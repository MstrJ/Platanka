"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@fortawesome";
exports.ids = ["vendor-chunks/@fortawesome"];
exports.modules = {

/***/ "(rsc)/./node_modules/@fortawesome/fontawesome-svg-core/styles.css":
/*!*******************************************************************!*\
  !*** ./node_modules/@fortawesome/fontawesome-svg-core/styles.css ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"49628f2dac30\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLXN2Zy1jb3JlL3N0eWxlcy5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wbGF0YW5rYXdlYi8uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtc3ZnLWNvcmUvc3R5bGVzLmNzcz82NjJlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiNDk2MjhmMmRhYzMwXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fortawesome/fontawesome-svg-core/styles.css\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fortawesome/fontawesome-svg-core/index.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@fortawesome/fontawesome-svg-core/index.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   api: () => (/* binding */ api),\n/* harmony export */   config: () => (/* binding */ config$1),\n/* harmony export */   counter: () => (/* binding */ counter),\n/* harmony export */   dom: () => (/* binding */ dom$1),\n/* harmony export */   findIconDefinition: () => (/* binding */ findIconDefinition$1),\n/* harmony export */   icon: () => (/* binding */ icon),\n/* harmony export */   layer: () => (/* binding */ layer),\n/* harmony export */   library: () => (/* binding */ library$1),\n/* harmony export */   noAuto: () => (/* binding */ noAuto$1),\n/* harmony export */   parse: () => (/* binding */ parse$1),\n/* harmony export */   text: () => (/* binding */ text),\n/* harmony export */   toHtml: () => (/* binding */ toHtml$1)\n/* harmony export */ });\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction _wrapRegExp() {\n    _wrapRegExp = function(re, groups) {\n        return new BabelRegExp(re, void 0, groups);\n    };\n    var _super = RegExp.prototype, _groups = new WeakMap();\n    function BabelRegExp(re, flags, groups) {\n        var _this = new RegExp(re, flags);\n        return _groups.set(_this, groups || _groups.get(re)), _setPrototypeOf(_this, BabelRegExp.prototype);\n    }\n    function buildGroups(result, re) {\n        var g = _groups.get(re);\n        return Object.keys(g).reduce(function(groups, name) {\n            return groups[name] = result[g[name]], groups;\n        }, Object.create(null));\n    }\n    return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function(str) {\n        var result = _super.exec.call(this, str);\n        return result && (result.groups = buildGroups(result, this)), result;\n    }, BabelRegExp.prototype[Symbol.replace] = function(str, substitution) {\n        if (\"string\" == typeof substitution) {\n            var groups = _groups.get(this);\n            return _super[Symbol.replace].call(this, str, substitution.replace(/\\$<([^>]+)>/g, function(_, name) {\n                return \"$\" + groups[name];\n            }));\n        }\n        if (\"function\" == typeof substitution) {\n            var _this = this;\n            return _super[Symbol.replace].call(this, str, function() {\n                var args = arguments;\n                return \"object\" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args);\n            });\n        }\n        return _super[Symbol.replace].call(this, str, substitution);\n    }, _wrapRegExp.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n        writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nvar noop = function noop() {};\nvar _WINDOW = {};\nvar _DOCUMENT = {};\nvar _MUTATION_OBSERVER = null;\nvar _PERFORMANCE = {\n    mark: noop,\n    measure: noop\n};\ntry {\n    if (false) {}\n    if (typeof document !== \"undefined\") _DOCUMENT = document;\n    if (typeof MutationObserver !== \"undefined\") _MUTATION_OBSERVER = MutationObserver;\n    if (typeof performance !== \"undefined\") _PERFORMANCE = performance;\n} catch (e) {}\nvar _ref = _WINDOW.navigator || {}, _ref$userAgent = _ref.userAgent, userAgent = _ref$userAgent === void 0 ? \"\" : _ref$userAgent;\nvar WINDOW = _WINDOW;\nvar DOCUMENT = _DOCUMENT;\nvar MUTATION_OBSERVER = _MUTATION_OBSERVER;\nvar PERFORMANCE = _PERFORMANCE;\nvar IS_BROWSER = !!WINDOW.document;\nvar IS_DOM = !!DOCUMENT.documentElement && !!DOCUMENT.head && typeof DOCUMENT.addEventListener === \"function\" && typeof DOCUMENT.createElement === \"function\";\nvar IS_IE = ~userAgent.indexOf(\"MSIE\") || ~userAgent.indexOf(\"Trident/\");\nvar _familyProxy, _familyProxy2, _familyProxy3, _familyProxy4, _familyProxy5;\nvar NAMESPACE_IDENTIFIER = \"___FONT_AWESOME___\";\nvar UNITS_IN_GRID = 16;\nvar DEFAULT_CSS_PREFIX = \"fa\";\nvar DEFAULT_REPLACEMENT_CLASS = \"svg-inline--fa\";\nvar DATA_FA_I2SVG = \"data-fa-i2svg\";\nvar DATA_FA_PSEUDO_ELEMENT = \"data-fa-pseudo-element\";\nvar DATA_FA_PSEUDO_ELEMENT_PENDING = \"data-fa-pseudo-element-pending\";\nvar DATA_PREFIX = \"data-prefix\";\nvar DATA_ICON = \"data-icon\";\nvar HTML_CLASS_I2SVG_BASE_CLASS = \"fontawesome-i2svg\";\nvar MUTATION_APPROACH_ASYNC = \"async\";\nvar TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS = [\n    \"HTML\",\n    \"HEAD\",\n    \"STYLE\",\n    \"SCRIPT\"\n];\nvar PRODUCTION = function() {\n    try {\n        return \"development\" === \"production\";\n    } catch (e) {\n        return false;\n    }\n}();\nvar FAMILY_CLASSIC = \"classic\";\nvar FAMILY_SHARP = \"sharp\";\nvar FAMILIES = [\n    FAMILY_CLASSIC,\n    FAMILY_SHARP\n];\nfunction familyProxy(obj) {\n    // Defaults to the classic family if family is not available\n    return new Proxy(obj, {\n        get: function get(target, prop) {\n            return prop in target ? target[prop] : target[FAMILY_CLASSIC];\n        }\n    });\n}\nvar PREFIX_TO_STYLE = familyProxy((_familyProxy = {}, _defineProperty(_familyProxy, FAMILY_CLASSIC, {\n    \"fa\": \"solid\",\n    \"fas\": \"solid\",\n    \"fa-solid\": \"solid\",\n    \"far\": \"regular\",\n    \"fa-regular\": \"regular\",\n    \"fal\": \"light\",\n    \"fa-light\": \"light\",\n    \"fat\": \"thin\",\n    \"fa-thin\": \"thin\",\n    \"fad\": \"duotone\",\n    \"fa-duotone\": \"duotone\",\n    \"fab\": \"brands\",\n    \"fa-brands\": \"brands\",\n    \"fak\": \"kit\",\n    \"fa-kit\": \"kit\"\n}), _defineProperty(_familyProxy, FAMILY_SHARP, {\n    \"fa\": \"solid\",\n    \"fass\": \"solid\",\n    \"fa-solid\": \"solid\",\n    \"fasr\": \"regular\",\n    \"fa-regular\": \"regular\",\n    \"fasl\": \"light\",\n    \"fa-light\": \"light\"\n}), _familyProxy));\nvar STYLE_TO_PREFIX = familyProxy((_familyProxy2 = {}, _defineProperty(_familyProxy2, FAMILY_CLASSIC, {\n    \"solid\": \"fas\",\n    \"regular\": \"far\",\n    \"light\": \"fal\",\n    \"thin\": \"fat\",\n    \"duotone\": \"fad\",\n    \"brands\": \"fab\",\n    \"kit\": \"fak\"\n}), _defineProperty(_familyProxy2, FAMILY_SHARP, {\n    \"solid\": \"fass\",\n    \"regular\": \"fasr\",\n    \"light\": \"fasl\"\n}), _familyProxy2));\nvar PREFIX_TO_LONG_STYLE = familyProxy((_familyProxy3 = {}, _defineProperty(_familyProxy3, FAMILY_CLASSIC, {\n    \"fab\": \"fa-brands\",\n    \"fad\": \"fa-duotone\",\n    \"fak\": \"fa-kit\",\n    \"fal\": \"fa-light\",\n    \"far\": \"fa-regular\",\n    \"fas\": \"fa-solid\",\n    \"fat\": \"fa-thin\"\n}), _defineProperty(_familyProxy3, FAMILY_SHARP, {\n    \"fass\": \"fa-solid\",\n    \"fasr\": \"fa-regular\",\n    \"fasl\": \"fa-light\"\n}), _familyProxy3));\nvar LONG_STYLE_TO_PREFIX = familyProxy((_familyProxy4 = {}, _defineProperty(_familyProxy4, FAMILY_CLASSIC, {\n    \"fa-brands\": \"fab\",\n    \"fa-duotone\": \"fad\",\n    \"fa-kit\": \"fak\",\n    \"fa-light\": \"fal\",\n    \"fa-regular\": \"far\",\n    \"fa-solid\": \"fas\",\n    \"fa-thin\": \"fat\"\n}), _defineProperty(_familyProxy4, FAMILY_SHARP, {\n    \"fa-solid\": \"fass\",\n    \"fa-regular\": \"fasr\",\n    \"fa-light\": \"fasl\"\n}), _familyProxy4));\nvar ICON_SELECTION_SYNTAX_PATTERN = /fa(s|r|l|t|d|b|k|ss|sr|sl)?[\\-\\ ]/; // eslint-disable-line no-useless-escape\nvar LAYERS_TEXT_CLASSNAME = \"fa-layers-text\";\nvar FONT_FAMILY_PATTERN = /Font ?Awesome ?([56 ]*)(Solid|Regular|Light|Thin|Duotone|Brands|Free|Pro|Sharp|Kit)?.*/i;\nvar FONT_WEIGHT_TO_PREFIX = familyProxy((_familyProxy5 = {}, _defineProperty(_familyProxy5, FAMILY_CLASSIC, {\n    \"900\": \"fas\",\n    \"400\": \"far\",\n    \"normal\": \"far\",\n    \"300\": \"fal\",\n    \"100\": \"fat\"\n}), _defineProperty(_familyProxy5, FAMILY_SHARP, {\n    \"900\": \"fass\",\n    \"400\": \"fasr\",\n    \"300\": \"fasl\"\n}), _familyProxy5));\nvar oneToTen = [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10\n];\nvar oneToTwenty = oneToTen.concat([\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20\n]);\nvar ATTRIBUTES_WATCHED_FOR_MUTATION = [\n    \"class\",\n    \"data-prefix\",\n    \"data-icon\",\n    \"data-fa-transform\",\n    \"data-fa-mask\"\n];\nvar DUOTONE_CLASSES = {\n    GROUP: \"duotone-group\",\n    SWAP_OPACITY: \"swap-opacity\",\n    PRIMARY: \"primary\",\n    SECONDARY: \"secondary\"\n};\nvar prefixes = new Set();\nObject.keys(STYLE_TO_PREFIX[FAMILY_CLASSIC]).map(prefixes.add.bind(prefixes));\nObject.keys(STYLE_TO_PREFIX[FAMILY_SHARP]).map(prefixes.add.bind(prefixes));\nvar RESERVED_CLASSES = [].concat(FAMILIES, _toConsumableArray(prefixes), [\n    \"2xs\",\n    \"xs\",\n    \"sm\",\n    \"lg\",\n    \"xl\",\n    \"2xl\",\n    \"beat\",\n    \"border\",\n    \"fade\",\n    \"beat-fade\",\n    \"bounce\",\n    \"flip-both\",\n    \"flip-horizontal\",\n    \"flip-vertical\",\n    \"flip\",\n    \"fw\",\n    \"inverse\",\n    \"layers-counter\",\n    \"layers-text\",\n    \"layers\",\n    \"li\",\n    \"pull-left\",\n    \"pull-right\",\n    \"pulse\",\n    \"rotate-180\",\n    \"rotate-270\",\n    \"rotate-90\",\n    \"rotate-by\",\n    \"shake\",\n    \"spin-pulse\",\n    \"spin-reverse\",\n    \"spin\",\n    \"stack-1x\",\n    \"stack-2x\",\n    \"stack\",\n    \"ul\",\n    DUOTONE_CLASSES.GROUP,\n    DUOTONE_CLASSES.SWAP_OPACITY,\n    DUOTONE_CLASSES.PRIMARY,\n    DUOTONE_CLASSES.SECONDARY\n]).concat(oneToTen.map(function(n) {\n    return \"\".concat(n, \"x\");\n})).concat(oneToTwenty.map(function(n) {\n    return \"w-\".concat(n);\n}));\nvar initial = WINDOW.FontAwesomeConfig || {};\nfunction getAttrConfig(attr) {\n    var element = DOCUMENT.querySelector(\"script[\" + attr + \"]\");\n    if (element) {\n        return element.getAttribute(attr);\n    }\n}\nfunction coerce(val) {\n    // Getting an empty string will occur if the attribute is set on the HTML tag but without a value\n    // We'll assume that this is an indication that it should be toggled to true\n    if (val === \"\") return true;\n    if (val === \"false\") return false;\n    if (val === \"true\") return true;\n    return val;\n}\nif (DOCUMENT && typeof DOCUMENT.querySelector === \"function\") {\n    var attrs = [\n        [\n            \"data-family-prefix\",\n            \"familyPrefix\"\n        ],\n        [\n            \"data-css-prefix\",\n            \"cssPrefix\"\n        ],\n        [\n            \"data-family-default\",\n            \"familyDefault\"\n        ],\n        [\n            \"data-style-default\",\n            \"styleDefault\"\n        ],\n        [\n            \"data-replacement-class\",\n            \"replacementClass\"\n        ],\n        [\n            \"data-auto-replace-svg\",\n            \"autoReplaceSvg\"\n        ],\n        [\n            \"data-auto-add-css\",\n            \"autoAddCss\"\n        ],\n        [\n            \"data-auto-a11y\",\n            \"autoA11y\"\n        ],\n        [\n            \"data-search-pseudo-elements\",\n            \"searchPseudoElements\"\n        ],\n        [\n            \"data-observe-mutations\",\n            \"observeMutations\"\n        ],\n        [\n            \"data-mutate-approach\",\n            \"mutateApproach\"\n        ],\n        [\n            \"data-keep-original-source\",\n            \"keepOriginalSource\"\n        ],\n        [\n            \"data-measure-performance\",\n            \"measurePerformance\"\n        ],\n        [\n            \"data-show-missing-icons\",\n            \"showMissingIcons\"\n        ]\n    ];\n    attrs.forEach(function(_ref) {\n        var _ref2 = _slicedToArray(_ref, 2), attr = _ref2[0], key = _ref2[1];\n        var val = coerce(getAttrConfig(attr));\n        if (val !== undefined && val !== null) {\n            initial[key] = val;\n        }\n    });\n}\nvar _default = {\n    styleDefault: \"solid\",\n    familyDefault: \"classic\",\n    cssPrefix: DEFAULT_CSS_PREFIX,\n    replacementClass: DEFAULT_REPLACEMENT_CLASS,\n    autoReplaceSvg: true,\n    autoAddCss: true,\n    autoA11y: true,\n    searchPseudoElements: false,\n    observeMutations: true,\n    mutateApproach: \"async\",\n    keepOriginalSource: true,\n    measurePerformance: false,\n    showMissingIcons: true\n}; // familyPrefix is deprecated but we must still support it if present\nif (initial.familyPrefix) {\n    initial.cssPrefix = initial.familyPrefix;\n}\nvar _config = _objectSpread2(_objectSpread2({}, _default), initial);\nif (!_config.autoReplaceSvg) _config.observeMutations = false;\nvar config = {};\nObject.keys(_default).forEach(function(key) {\n    Object.defineProperty(config, key, {\n        enumerable: true,\n        set: function set(val) {\n            _config[key] = val;\n            _onChangeCb.forEach(function(cb) {\n                return cb(config);\n            });\n        },\n        get: function get() {\n            return _config[key];\n        }\n    });\n}); // familyPrefix is deprecated as of 6.2.0 and should be removed in 7.0.0\nObject.defineProperty(config, \"familyPrefix\", {\n    enumerable: true,\n    set: function set(val) {\n        _config.cssPrefix = val;\n        _onChangeCb.forEach(function(cb) {\n            return cb(config);\n        });\n    },\n    get: function get() {\n        return _config.cssPrefix;\n    }\n});\nWINDOW.FontAwesomeConfig = config;\nvar _onChangeCb = [];\nfunction onChange(cb) {\n    _onChangeCb.push(cb);\n    return function() {\n        _onChangeCb.splice(_onChangeCb.indexOf(cb), 1);\n    };\n}\nvar d = UNITS_IN_GRID;\nvar meaninglessTransform = {\n    size: 16,\n    x: 0,\n    y: 0,\n    rotate: 0,\n    flipX: false,\n    flipY: false\n};\nfunction insertCss(css) {\n    if (!css || !IS_DOM) {\n        return;\n    }\n    var style = DOCUMENT.createElement(\"style\");\n    style.setAttribute(\"type\", \"text/css\");\n    style.innerHTML = css;\n    var headChildren = DOCUMENT.head.childNodes;\n    var beforeChild = null;\n    for(var i = headChildren.length - 1; i > -1; i--){\n        var child = headChildren[i];\n        var tagName = (child.tagName || \"\").toUpperCase();\n        if ([\n            \"STYLE\",\n            \"LINK\"\n        ].indexOf(tagName) > -1) {\n            beforeChild = child;\n        }\n    }\n    DOCUMENT.head.insertBefore(style, beforeChild);\n    return css;\n}\nvar idPool = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nfunction nextUniqueId() {\n    var size = 12;\n    var id = \"\";\n    while(size-- > 0){\n        id += idPool[Math.random() * 62 | 0];\n    }\n    return id;\n}\nfunction toArray(obj) {\n    var array = [];\n    for(var i = (obj || []).length >>> 0; i--;){\n        array[i] = obj[i];\n    }\n    return array;\n}\nfunction classArray(node) {\n    if (node.classList) {\n        return toArray(node.classList);\n    } else {\n        return (node.getAttribute(\"class\") || \"\").split(\" \").filter(function(i) {\n            return i;\n        });\n    }\n}\nfunction htmlEscape(str) {\n    return \"\".concat(str).replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\nfunction joinAttributes(attributes) {\n    return Object.keys(attributes || {}).reduce(function(acc, attributeName) {\n        return acc + \"\".concat(attributeName, '=\"').concat(htmlEscape(attributes[attributeName]), '\" ');\n    }, \"\").trim();\n}\nfunction joinStyles(styles) {\n    return Object.keys(styles || {}).reduce(function(acc, styleName) {\n        return acc + \"\".concat(styleName, \": \").concat(styles[styleName].trim(), \";\");\n    }, \"\");\n}\nfunction transformIsMeaningful(transform) {\n    return transform.size !== meaninglessTransform.size || transform.x !== meaninglessTransform.x || transform.y !== meaninglessTransform.y || transform.rotate !== meaninglessTransform.rotate || transform.flipX || transform.flipY;\n}\nfunction transformForSvg(_ref) {\n    var transform = _ref.transform, containerWidth = _ref.containerWidth, iconWidth = _ref.iconWidth;\n    var outer = {\n        transform: \"translate(\".concat(containerWidth / 2, \" 256)\")\n    };\n    var innerTranslate = \"translate(\".concat(transform.x * 32, \", \").concat(transform.y * 32, \") \");\n    var innerScale = \"scale(\".concat(transform.size / 16 * (transform.flipX ? -1 : 1), \", \").concat(transform.size / 16 * (transform.flipY ? -1 : 1), \") \");\n    var innerRotate = \"rotate(\".concat(transform.rotate, \" 0 0)\");\n    var inner = {\n        transform: \"\".concat(innerTranslate, \" \").concat(innerScale, \" \").concat(innerRotate)\n    };\n    var path = {\n        transform: \"translate(\".concat(iconWidth / 2 * -1, \" -256)\")\n    };\n    return {\n        outer: outer,\n        inner: inner,\n        path: path\n    };\n}\nfunction transformForCss(_ref2) {\n    var transform = _ref2.transform, _ref2$width = _ref2.width, width = _ref2$width === void 0 ? UNITS_IN_GRID : _ref2$width, _ref2$height = _ref2.height, height = _ref2$height === void 0 ? UNITS_IN_GRID : _ref2$height, _ref2$startCentered = _ref2.startCentered, startCentered = _ref2$startCentered === void 0 ? false : _ref2$startCentered;\n    var val = \"\";\n    if (startCentered && IS_IE) {\n        val += \"translate(\".concat(transform.x / d - width / 2, \"em, \").concat(transform.y / d - height / 2, \"em) \");\n    } else if (startCentered) {\n        val += \"translate(calc(-50% + \".concat(transform.x / d, \"em), calc(-50% + \").concat(transform.y / d, \"em)) \");\n    } else {\n        val += \"translate(\".concat(transform.x / d, \"em, \").concat(transform.y / d, \"em) \");\n    }\n    val += \"scale(\".concat(transform.size / d * (transform.flipX ? -1 : 1), \", \").concat(transform.size / d * (transform.flipY ? -1 : 1), \") \");\n    val += \"rotate(\".concat(transform.rotate, \"deg) \");\n    return val;\n}\nvar baseStyles = ':root, :host {\\n  --fa-font-solid: normal 900 1em/1 \"Font Awesome 6 Solid\";\\n  --fa-font-regular: normal 400 1em/1 \"Font Awesome 6 Regular\";\\n  --fa-font-light: normal 300 1em/1 \"Font Awesome 6 Light\";\\n  --fa-font-thin: normal 100 1em/1 \"Font Awesome 6 Thin\";\\n  --fa-font-duotone: normal 900 1em/1 \"Font Awesome 6 Duotone\";\\n  --fa-font-sharp-solid: normal 900 1em/1 \"Font Awesome 6 Sharp\";\\n  --fa-font-sharp-regular: normal 400 1em/1 \"Font Awesome 6 Sharp\";\\n  --fa-font-sharp-light: normal 300 1em/1 \"Font Awesome 6 Sharp\";\\n  --fa-font-brands: normal 400 1em/1 \"Font Awesome 6 Brands\";\\n}\\n\\nsvg:not(:root).svg-inline--fa, svg:not(:host).svg-inline--fa {\\n  overflow: visible;\\n  box-sizing: content-box;\\n}\\n\\n.svg-inline--fa {\\n  display: var(--fa-display, inline-block);\\n  height: 1em;\\n  overflow: visible;\\n  vertical-align: -0.125em;\\n}\\n.svg-inline--fa.fa-2xs {\\n  vertical-align: 0.1em;\\n}\\n.svg-inline--fa.fa-xs {\\n  vertical-align: 0em;\\n}\\n.svg-inline--fa.fa-sm {\\n  vertical-align: -0.0714285705em;\\n}\\n.svg-inline--fa.fa-lg {\\n  vertical-align: -0.2em;\\n}\\n.svg-inline--fa.fa-xl {\\n  vertical-align: -0.25em;\\n}\\n.svg-inline--fa.fa-2xl {\\n  vertical-align: -0.3125em;\\n}\\n.svg-inline--fa.fa-pull-left {\\n  margin-right: var(--fa-pull-margin, 0.3em);\\n  width: auto;\\n}\\n.svg-inline--fa.fa-pull-right {\\n  margin-left: var(--fa-pull-margin, 0.3em);\\n  width: auto;\\n}\\n.svg-inline--fa.fa-li {\\n  width: var(--fa-li-width, 2em);\\n  top: 0.25em;\\n}\\n.svg-inline--fa.fa-fw {\\n  width: var(--fa-fw-width, 1.25em);\\n}\\n\\n.fa-layers svg.svg-inline--fa {\\n  bottom: 0;\\n  left: 0;\\n  margin: auto;\\n  position: absolute;\\n  right: 0;\\n  top: 0;\\n}\\n\\n.fa-layers-counter, .fa-layers-text {\\n  display: inline-block;\\n  position: absolute;\\n  text-align: center;\\n}\\n\\n.fa-layers {\\n  display: inline-block;\\n  height: 1em;\\n  position: relative;\\n  text-align: center;\\n  vertical-align: -0.125em;\\n  width: 1em;\\n}\\n.fa-layers svg.svg-inline--fa {\\n  -webkit-transform-origin: center center;\\n          transform-origin: center center;\\n}\\n\\n.fa-layers-text {\\n  left: 50%;\\n  top: 50%;\\n  -webkit-transform: translate(-50%, -50%);\\n          transform: translate(-50%, -50%);\\n  -webkit-transform-origin: center center;\\n          transform-origin: center center;\\n}\\n\\n.fa-layers-counter {\\n  background-color: var(--fa-counter-background-color, #ff253a);\\n  border-radius: var(--fa-counter-border-radius, 1em);\\n  box-sizing: border-box;\\n  color: var(--fa-inverse, #fff);\\n  line-height: var(--fa-counter-line-height, 1);\\n  max-width: var(--fa-counter-max-width, 5em);\\n  min-width: var(--fa-counter-min-width, 1.5em);\\n  overflow: hidden;\\n  padding: var(--fa-counter-padding, 0.25em 0.5em);\\n  right: var(--fa-right, 0);\\n  text-overflow: ellipsis;\\n  top: var(--fa-top, 0);\\n  -webkit-transform: scale(var(--fa-counter-scale, 0.25));\\n          transform: scale(var(--fa-counter-scale, 0.25));\\n  -webkit-transform-origin: top right;\\n          transform-origin: top right;\\n}\\n\\n.fa-layers-bottom-right {\\n  bottom: var(--fa-bottom, 0);\\n  right: var(--fa-right, 0);\\n  top: auto;\\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\\n          transform: scale(var(--fa-layers-scale, 0.25));\\n  -webkit-transform-origin: bottom right;\\n          transform-origin: bottom right;\\n}\\n\\n.fa-layers-bottom-left {\\n  bottom: var(--fa-bottom, 0);\\n  left: var(--fa-left, 0);\\n  right: auto;\\n  top: auto;\\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\\n          transform: scale(var(--fa-layers-scale, 0.25));\\n  -webkit-transform-origin: bottom left;\\n          transform-origin: bottom left;\\n}\\n\\n.fa-layers-top-right {\\n  top: var(--fa-top, 0);\\n  right: var(--fa-right, 0);\\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\\n          transform: scale(var(--fa-layers-scale, 0.25));\\n  -webkit-transform-origin: top right;\\n          transform-origin: top right;\\n}\\n\\n.fa-layers-top-left {\\n  left: var(--fa-left, 0);\\n  right: auto;\\n  top: var(--fa-top, 0);\\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\\n          transform: scale(var(--fa-layers-scale, 0.25));\\n  -webkit-transform-origin: top left;\\n          transform-origin: top left;\\n}\\n\\n.fa-1x {\\n  font-size: 1em;\\n}\\n\\n.fa-2x {\\n  font-size: 2em;\\n}\\n\\n.fa-3x {\\n  font-size: 3em;\\n}\\n\\n.fa-4x {\\n  font-size: 4em;\\n}\\n\\n.fa-5x {\\n  font-size: 5em;\\n}\\n\\n.fa-6x {\\n  font-size: 6em;\\n}\\n\\n.fa-7x {\\n  font-size: 7em;\\n}\\n\\n.fa-8x {\\n  font-size: 8em;\\n}\\n\\n.fa-9x {\\n  font-size: 9em;\\n}\\n\\n.fa-10x {\\n  font-size: 10em;\\n}\\n\\n.fa-2xs {\\n  font-size: 0.625em;\\n  line-height: 0.1em;\\n  vertical-align: 0.225em;\\n}\\n\\n.fa-xs {\\n  font-size: 0.75em;\\n  line-height: 0.0833333337em;\\n  vertical-align: 0.125em;\\n}\\n\\n.fa-sm {\\n  font-size: 0.875em;\\n  line-height: 0.0714285718em;\\n  vertical-align: 0.0535714295em;\\n}\\n\\n.fa-lg {\\n  font-size: 1.25em;\\n  line-height: 0.05em;\\n  vertical-align: -0.075em;\\n}\\n\\n.fa-xl {\\n  font-size: 1.5em;\\n  line-height: 0.0416666682em;\\n  vertical-align: -0.125em;\\n}\\n\\n.fa-2xl {\\n  font-size: 2em;\\n  line-height: 0.03125em;\\n  vertical-align: -0.1875em;\\n}\\n\\n.fa-fw {\\n  text-align: center;\\n  width: 1.25em;\\n}\\n\\n.fa-ul {\\n  list-style-type: none;\\n  margin-left: var(--fa-li-margin, 2.5em);\\n  padding-left: 0;\\n}\\n.fa-ul > li {\\n  position: relative;\\n}\\n\\n.fa-li {\\n  left: calc(var(--fa-li-width, 2em) * -1);\\n  position: absolute;\\n  text-align: center;\\n  width: var(--fa-li-width, 2em);\\n  line-height: inherit;\\n}\\n\\n.fa-border {\\n  border-color: var(--fa-border-color, #eee);\\n  border-radius: var(--fa-border-radius, 0.1em);\\n  border-style: var(--fa-border-style, solid);\\n  border-width: var(--fa-border-width, 0.08em);\\n  padding: var(--fa-border-padding, 0.2em 0.25em 0.15em);\\n}\\n\\n.fa-pull-left {\\n  float: left;\\n  margin-right: var(--fa-pull-margin, 0.3em);\\n}\\n\\n.fa-pull-right {\\n  float: right;\\n  margin-left: var(--fa-pull-margin, 0.3em);\\n}\\n\\n.fa-beat {\\n  -webkit-animation-name: fa-beat;\\n          animation-name: fa-beat;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\\n}\\n\\n.fa-bounce {\\n  -webkit-animation-name: fa-bounce;\\n          animation-name: fa-bounce;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\\n}\\n\\n.fa-fade {\\n  -webkit-animation-name: fa-fade;\\n          animation-name: fa-fade;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\\n}\\n\\n.fa-beat-fade {\\n  -webkit-animation-name: fa-beat-fade;\\n          animation-name: fa-beat-fade;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\\n}\\n\\n.fa-flip {\\n  -webkit-animation-name: fa-flip;\\n          animation-name: fa-flip;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\\n}\\n\\n.fa-shake {\\n  -webkit-animation-name: fa-shake;\\n          animation-name: fa-shake;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\\n          animation-timing-function: var(--fa-animation-timing, linear);\\n}\\n\\n.fa-spin {\\n  -webkit-animation-name: fa-spin;\\n          animation-name: fa-spin;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 2s);\\n          animation-duration: var(--fa-animation-duration, 2s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\\n          animation-timing-function: var(--fa-animation-timing, linear);\\n}\\n\\n.fa-spin-reverse {\\n  --fa-animation-direction: reverse;\\n}\\n\\n.fa-pulse,\\n.fa-spin-pulse {\\n  -webkit-animation-name: fa-spin;\\n          animation-name: fa-spin;\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, steps(8));\\n          animation-timing-function: var(--fa-animation-timing, steps(8));\\n}\\n\\n@media (prefers-reduced-motion: reduce) {\\n  .fa-beat,\\n.fa-bounce,\\n.fa-fade,\\n.fa-beat-fade,\\n.fa-flip,\\n.fa-pulse,\\n.fa-shake,\\n.fa-spin,\\n.fa-spin-pulse {\\n    -webkit-animation-delay: -1ms;\\n            animation-delay: -1ms;\\n    -webkit-animation-duration: 1ms;\\n            animation-duration: 1ms;\\n    -webkit-animation-iteration-count: 1;\\n            animation-iteration-count: 1;\\n    -webkit-transition-delay: 0s;\\n            transition-delay: 0s;\\n    -webkit-transition-duration: 0s;\\n            transition-duration: 0s;\\n  }\\n}\\n@-webkit-keyframes fa-beat {\\n  0%, 90% {\\n    -webkit-transform: scale(1);\\n            transform: scale(1);\\n  }\\n  45% {\\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\\n            transform: scale(var(--fa-beat-scale, 1.25));\\n  }\\n}\\n@keyframes fa-beat {\\n  0%, 90% {\\n    -webkit-transform: scale(1);\\n            transform: scale(1);\\n  }\\n  45% {\\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\\n            transform: scale(var(--fa-beat-scale, 1.25));\\n  }\\n}\\n@-webkit-keyframes fa-bounce {\\n  0% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n  10% {\\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\\n  }\\n  30% {\\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\\n  }\\n  50% {\\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\\n  }\\n  57% {\\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\\n  }\\n  64% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n  100% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n}\\n@keyframes fa-bounce {\\n  0% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n  10% {\\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\\n  }\\n  30% {\\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\\n  }\\n  50% {\\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\\n  }\\n  57% {\\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\\n  }\\n  64% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n  100% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n}\\n@-webkit-keyframes fa-fade {\\n  50% {\\n    opacity: var(--fa-fade-opacity, 0.4);\\n  }\\n}\\n@keyframes fa-fade {\\n  50% {\\n    opacity: var(--fa-fade-opacity, 0.4);\\n  }\\n}\\n@-webkit-keyframes fa-beat-fade {\\n  0%, 100% {\\n    opacity: var(--fa-beat-fade-opacity, 0.4);\\n    -webkit-transform: scale(1);\\n            transform: scale(1);\\n  }\\n  50% {\\n    opacity: 1;\\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\\n  }\\n}\\n@keyframes fa-beat-fade {\\n  0%, 100% {\\n    opacity: var(--fa-beat-fade-opacity, 0.4);\\n    -webkit-transform: scale(1);\\n            transform: scale(1);\\n  }\\n  50% {\\n    opacity: 1;\\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\\n  }\\n}\\n@-webkit-keyframes fa-flip {\\n  50% {\\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\\n  }\\n}\\n@keyframes fa-flip {\\n  50% {\\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\\n  }\\n}\\n@-webkit-keyframes fa-shake {\\n  0% {\\n    -webkit-transform: rotate(-15deg);\\n            transform: rotate(-15deg);\\n  }\\n  4% {\\n    -webkit-transform: rotate(15deg);\\n            transform: rotate(15deg);\\n  }\\n  8%, 24% {\\n    -webkit-transform: rotate(-18deg);\\n            transform: rotate(-18deg);\\n  }\\n  12%, 28% {\\n    -webkit-transform: rotate(18deg);\\n            transform: rotate(18deg);\\n  }\\n  16% {\\n    -webkit-transform: rotate(-22deg);\\n            transform: rotate(-22deg);\\n  }\\n  20% {\\n    -webkit-transform: rotate(22deg);\\n            transform: rotate(22deg);\\n  }\\n  32% {\\n    -webkit-transform: rotate(-12deg);\\n            transform: rotate(-12deg);\\n  }\\n  36% {\\n    -webkit-transform: rotate(12deg);\\n            transform: rotate(12deg);\\n  }\\n  40%, 100% {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n  }\\n}\\n@keyframes fa-shake {\\n  0% {\\n    -webkit-transform: rotate(-15deg);\\n            transform: rotate(-15deg);\\n  }\\n  4% {\\n    -webkit-transform: rotate(15deg);\\n            transform: rotate(15deg);\\n  }\\n  8%, 24% {\\n    -webkit-transform: rotate(-18deg);\\n            transform: rotate(-18deg);\\n  }\\n  12%, 28% {\\n    -webkit-transform: rotate(18deg);\\n            transform: rotate(18deg);\\n  }\\n  16% {\\n    -webkit-transform: rotate(-22deg);\\n            transform: rotate(-22deg);\\n  }\\n  20% {\\n    -webkit-transform: rotate(22deg);\\n            transform: rotate(22deg);\\n  }\\n  32% {\\n    -webkit-transform: rotate(-12deg);\\n            transform: rotate(-12deg);\\n  }\\n  36% {\\n    -webkit-transform: rotate(12deg);\\n            transform: rotate(12deg);\\n  }\\n  40%, 100% {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n  }\\n}\\n@-webkit-keyframes fa-spin {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n            transform: rotate(360deg);\\n  }\\n}\\n@keyframes fa-spin {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n            transform: rotate(360deg);\\n  }\\n}\\n.fa-rotate-90 {\\n  -webkit-transform: rotate(90deg);\\n          transform: rotate(90deg);\\n}\\n\\n.fa-rotate-180 {\\n  -webkit-transform: rotate(180deg);\\n          transform: rotate(180deg);\\n}\\n\\n.fa-rotate-270 {\\n  -webkit-transform: rotate(270deg);\\n          transform: rotate(270deg);\\n}\\n\\n.fa-flip-horizontal {\\n  -webkit-transform: scale(-1, 1);\\n          transform: scale(-1, 1);\\n}\\n\\n.fa-flip-vertical {\\n  -webkit-transform: scale(1, -1);\\n          transform: scale(1, -1);\\n}\\n\\n.fa-flip-both,\\n.fa-flip-horizontal.fa-flip-vertical {\\n  -webkit-transform: scale(-1, -1);\\n          transform: scale(-1, -1);\\n}\\n\\n.fa-rotate-by {\\n  -webkit-transform: rotate(var(--fa-rotate-angle, none));\\n          transform: rotate(var(--fa-rotate-angle, none));\\n}\\n\\n.fa-stack {\\n  display: inline-block;\\n  vertical-align: middle;\\n  height: 2em;\\n  position: relative;\\n  width: 2.5em;\\n}\\n\\n.fa-stack-1x,\\n.fa-stack-2x {\\n  bottom: 0;\\n  left: 0;\\n  margin: auto;\\n  position: absolute;\\n  right: 0;\\n  top: 0;\\n  z-index: var(--fa-stack-z-index, auto);\\n}\\n\\n.svg-inline--fa.fa-stack-1x {\\n  height: 1em;\\n  width: 1.25em;\\n}\\n.svg-inline--fa.fa-stack-2x {\\n  height: 2em;\\n  width: 2.5em;\\n}\\n\\n.fa-inverse {\\n  color: var(--fa-inverse, #fff);\\n}\\n\\n.sr-only,\\n.fa-sr-only {\\n  position: absolute;\\n  width: 1px;\\n  height: 1px;\\n  padding: 0;\\n  margin: -1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0);\\n  white-space: nowrap;\\n  border-width: 0;\\n}\\n\\n.sr-only-focusable:not(:focus),\\n.fa-sr-only-focusable:not(:focus) {\\n  position: absolute;\\n  width: 1px;\\n  height: 1px;\\n  padding: 0;\\n  margin: -1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0);\\n  white-space: nowrap;\\n  border-width: 0;\\n}\\n\\n.svg-inline--fa .fa-primary {\\n  fill: var(--fa-primary-color, currentColor);\\n  opacity: var(--fa-primary-opacity, 1);\\n}\\n\\n.svg-inline--fa .fa-secondary {\\n  fill: var(--fa-secondary-color, currentColor);\\n  opacity: var(--fa-secondary-opacity, 0.4);\\n}\\n\\n.svg-inline--fa.fa-swap-opacity .fa-primary {\\n  opacity: var(--fa-secondary-opacity, 0.4);\\n}\\n\\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\\n  opacity: var(--fa-primary-opacity, 1);\\n}\\n\\n.svg-inline--fa mask .fa-primary,\\n.svg-inline--fa mask .fa-secondary {\\n  fill: black;\\n}\\n\\n.fad.fa-inverse,\\n.fa-duotone.fa-inverse {\\n  color: var(--fa-inverse, #fff);\\n}';\nfunction css() {\n    var dcp = DEFAULT_CSS_PREFIX;\n    var drc = DEFAULT_REPLACEMENT_CLASS;\n    var fp = config.cssPrefix;\n    var rc = config.replacementClass;\n    var s = baseStyles;\n    if (fp !== dcp || rc !== drc) {\n        var dPatt = new RegExp(\"\\\\.\".concat(dcp, \"\\\\-\"), \"g\");\n        var customPropPatt = new RegExp(\"\\\\--\".concat(dcp, \"\\\\-\"), \"g\");\n        var rPatt = new RegExp(\"\\\\.\".concat(drc), \"g\");\n        s = s.replace(dPatt, \".\".concat(fp, \"-\")).replace(customPropPatt, \"--\".concat(fp, \"-\")).replace(rPatt, \".\".concat(rc));\n    }\n    return s;\n}\nvar _cssInserted = false;\nfunction ensureCss() {\n    if (config.autoAddCss && !_cssInserted) {\n        insertCss(css());\n        _cssInserted = true;\n    }\n}\nvar InjectCSS = {\n    mixout: function mixout() {\n        return {\n            dom: {\n                css: css,\n                insertCss: ensureCss\n            }\n        };\n    },\n    hooks: function hooks() {\n        return {\n            beforeDOMElementCreation: function beforeDOMElementCreation() {\n                ensureCss();\n            },\n            beforeI2svg: function beforeI2svg() {\n                ensureCss();\n            }\n        };\n    }\n};\nvar w = WINDOW || {};\nif (!w[NAMESPACE_IDENTIFIER]) w[NAMESPACE_IDENTIFIER] = {};\nif (!w[NAMESPACE_IDENTIFIER].styles) w[NAMESPACE_IDENTIFIER].styles = {};\nif (!w[NAMESPACE_IDENTIFIER].hooks) w[NAMESPACE_IDENTIFIER].hooks = {};\nif (!w[NAMESPACE_IDENTIFIER].shims) w[NAMESPACE_IDENTIFIER].shims = [];\nvar namespace = w[NAMESPACE_IDENTIFIER];\nvar functions = [];\nvar listener = function listener() {\n    DOCUMENT.removeEventListener(\"DOMContentLoaded\", listener);\n    loaded = 1;\n    functions.map(function(fn) {\n        return fn();\n    });\n};\nvar loaded = false;\nif (IS_DOM) {\n    loaded = (DOCUMENT.documentElement.doScroll ? /^loaded|^c/ : /^loaded|^i|^c/).test(DOCUMENT.readyState);\n    if (!loaded) DOCUMENT.addEventListener(\"DOMContentLoaded\", listener);\n}\nfunction domready(fn) {\n    if (!IS_DOM) return;\n    loaded ? setTimeout(fn, 0) : functions.push(fn);\n}\nfunction toHtml(abstractNodes) {\n    var tag = abstractNodes.tag, _abstractNodes$attrib = abstractNodes.attributes, attributes = _abstractNodes$attrib === void 0 ? {} : _abstractNodes$attrib, _abstractNodes$childr = abstractNodes.children, children = _abstractNodes$childr === void 0 ? [] : _abstractNodes$childr;\n    if (typeof abstractNodes === \"string\") {\n        return htmlEscape(abstractNodes);\n    } else {\n        return \"<\".concat(tag, \" \").concat(joinAttributes(attributes), \">\").concat(children.map(toHtml).join(\"\"), \"</\").concat(tag, \">\");\n    }\n}\nfunction iconFromMapping(mapping, prefix, iconName) {\n    if (mapping && mapping[prefix] && mapping[prefix][iconName]) {\n        return {\n            prefix: prefix,\n            iconName: iconName,\n            icon: mapping[prefix][iconName]\n        };\n    }\n}\n/**\n * Internal helper to bind a function known to have 4 arguments\n * to a given context.\n */ var bindInternal4 = function bindInternal4(func, thisContext) {\n    return function(a, b, c, d) {\n        return func.call(thisContext, a, b, c, d);\n    };\n};\n/**\n * # Reduce\n *\n * A fast object `.reduce()` implementation.\n *\n * @param  {Object}   subject      The object to reduce over.\n * @param  {Function} fn           The reducer function.\n * @param  {mixed}    initialValue The initial value for the reducer, defaults to subject[0].\n * @param  {Object}   thisContext  The context for the reducer.\n * @return {mixed}                 The final result.\n */ var reduce = function fastReduceObject(subject, fn, initialValue, thisContext) {\n    var keys = Object.keys(subject), length = keys.length, iterator = thisContext !== undefined ? bindInternal4(fn, thisContext) : fn, i, key, result;\n    if (initialValue === undefined) {\n        i = 1;\n        result = subject[keys[0]];\n    } else {\n        i = 0;\n        result = initialValue;\n    }\n    for(; i < length; i++){\n        key = keys[i];\n        result = iterator(result, subject[key], key, subject);\n    }\n    return result;\n};\n/**\n * ucs2decode() and codePointAt() are both works of Mathias Bynens and licensed under MIT\n *\n * Copyright Mathias Bynens <https://mathiasbynens.be/>\n\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */ function ucs2decode(string) {\n    var output = [];\n    var counter = 0;\n    var length = string.length;\n    while(counter < length){\n        var value = string.charCodeAt(counter++);\n        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n            var extra = string.charCodeAt(counter++);\n            if ((extra & 0xFC00) == 0xDC00) {\n                // eslint-disable-line eqeqeq\n                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n            } else {\n                output.push(value);\n                counter--;\n            }\n        } else {\n            output.push(value);\n        }\n    }\n    return output;\n}\nfunction toHex(unicode) {\n    var decoded = ucs2decode(unicode);\n    return decoded.length === 1 ? decoded[0].toString(16) : null;\n}\nfunction codePointAt(string, index) {\n    var size = string.length;\n    var first = string.charCodeAt(index);\n    var second;\n    if (first >= 0xD800 && first <= 0xDBFF && size > index + 1) {\n        second = string.charCodeAt(index + 1);\n        if (second >= 0xDC00 && second <= 0xDFFF) {\n            return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        }\n    }\n    return first;\n}\nfunction normalizeIcons(icons) {\n    return Object.keys(icons).reduce(function(acc, iconName) {\n        var icon = icons[iconName];\n        var expanded = !!icon.icon;\n        if (expanded) {\n            acc[icon.iconName] = icon.icon;\n        } else {\n            acc[iconName] = icon;\n        }\n        return acc;\n    }, {});\n}\nfunction defineIcons(prefix, icons) {\n    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var _params$skipHooks = params.skipHooks, skipHooks = _params$skipHooks === void 0 ? false : _params$skipHooks;\n    var normalized = normalizeIcons(icons);\n    if (typeof namespace.hooks.addPack === \"function\" && !skipHooks) {\n        namespace.hooks.addPack(prefix, normalizeIcons(icons));\n    } else {\n        namespace.styles[prefix] = _objectSpread2(_objectSpread2({}, namespace.styles[prefix] || {}), normalized);\n    }\n    /**\n   * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction\n   * of new styles we needed to differentiate between them. Prefix `fa` is now an alias\n   * for `fas` so we'll ease the upgrade process for our users by automatically defining\n   * this as well.\n   */ if (prefix === \"fas\") {\n        defineIcons(\"fa\", icons);\n    }\n}\nvar duotonePathRe = [\n    /*#__PURE__*/ _wrapRegExp(/path d=\"((?:(?!\")[\\s\\S])+)\".*path d=\"((?:(?!\")[\\s\\S])+)\"/, {\n        d1: 1,\n        d2: 2\n    }),\n    /*#__PURE__*/ _wrapRegExp(/path class=\"((?:(?!\")[\\s\\S])+)\".*d=\"((?:(?!\")[\\s\\S])+)\".*path class=\"((?:(?!\")[\\s\\S])+)\".*d=\"((?:(?!\")[\\s\\S])+)\"/, {\n        cls1: 1,\n        d1: 2,\n        cls2: 3,\n        d2: 4\n    }),\n    /*#__PURE__*/ _wrapRegExp(/path class=\"((?:(?!\")[\\s\\S])+)\".*d=\"((?:(?!\")[\\s\\S])+)\"/, {\n        cls1: 1,\n        d1: 2\n    })\n];\nvar _LONG_STYLE, _PREFIXES, _PREFIXES_FOR_FAMILY;\nvar styles = namespace.styles, shims = namespace.shims;\nvar LONG_STYLE = (_LONG_STYLE = {}, _defineProperty(_LONG_STYLE, FAMILY_CLASSIC, Object.values(PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC])), _defineProperty(_LONG_STYLE, FAMILY_SHARP, Object.values(PREFIX_TO_LONG_STYLE[FAMILY_SHARP])), _LONG_STYLE);\nvar _defaultUsablePrefix = null;\nvar _byUnicode = {};\nvar _byLigature = {};\nvar _byOldName = {};\nvar _byOldUnicode = {};\nvar _byAlias = {};\nvar PREFIXES = (_PREFIXES = {}, _defineProperty(_PREFIXES, FAMILY_CLASSIC, Object.keys(PREFIX_TO_STYLE[FAMILY_CLASSIC])), _defineProperty(_PREFIXES, FAMILY_SHARP, Object.keys(PREFIX_TO_STYLE[FAMILY_SHARP])), _PREFIXES);\nfunction isReserved(name) {\n    return ~RESERVED_CLASSES.indexOf(name);\n}\nfunction getIconName(cssPrefix, cls) {\n    var parts = cls.split(\"-\");\n    var prefix = parts[0];\n    var iconName = parts.slice(1).join(\"-\");\n    if (prefix === cssPrefix && iconName !== \"\" && !isReserved(iconName)) {\n        return iconName;\n    } else {\n        return null;\n    }\n}\nvar build = function build() {\n    var lookup = function lookup(reducer) {\n        return reduce(styles, function(o, style, prefix) {\n            o[prefix] = reduce(style, reducer, {});\n            return o;\n        }, {});\n    };\n    _byUnicode = lookup(function(acc, icon, iconName) {\n        if (icon[3]) {\n            acc[icon[3]] = iconName;\n        }\n        if (icon[2]) {\n            var aliases = icon[2].filter(function(a) {\n                return typeof a === \"number\";\n            });\n            aliases.forEach(function(alias) {\n                acc[alias.toString(16)] = iconName;\n            });\n        }\n        return acc;\n    });\n    _byLigature = lookup(function(acc, icon, iconName) {\n        acc[iconName] = iconName;\n        if (icon[2]) {\n            var aliases = icon[2].filter(function(a) {\n                return typeof a === \"string\";\n            });\n            aliases.forEach(function(alias) {\n                acc[alias] = iconName;\n            });\n        }\n        return acc;\n    });\n    _byAlias = lookup(function(acc, icon, iconName) {\n        var aliases = icon[2];\n        acc[iconName] = iconName;\n        aliases.forEach(function(alias) {\n            acc[alias] = iconName;\n        });\n        return acc;\n    }); // If we have a Kit, we can't determine if regular is available since we\n    // could be auto-fetching it. We'll have to assume that it is available.\n    var hasRegular = \"far\" in styles || config.autoFetchSvg;\n    var shimLookups = reduce(shims, function(acc, shim) {\n        var maybeNameMaybeUnicode = shim[0];\n        var prefix = shim[1];\n        var iconName = shim[2];\n        if (prefix === \"far\" && !hasRegular) {\n            prefix = \"fas\";\n        }\n        if (typeof maybeNameMaybeUnicode === \"string\") {\n            acc.names[maybeNameMaybeUnicode] = {\n                prefix: prefix,\n                iconName: iconName\n            };\n        }\n        if (typeof maybeNameMaybeUnicode === \"number\") {\n            acc.unicodes[maybeNameMaybeUnicode.toString(16)] = {\n                prefix: prefix,\n                iconName: iconName\n            };\n        }\n        return acc;\n    }, {\n        names: {},\n        unicodes: {}\n    });\n    _byOldName = shimLookups.names;\n    _byOldUnicode = shimLookups.unicodes;\n    _defaultUsablePrefix = getCanonicalPrefix(config.styleDefault, {\n        family: config.familyDefault\n    });\n};\nonChange(function(c) {\n    _defaultUsablePrefix = getCanonicalPrefix(c.styleDefault, {\n        family: config.familyDefault\n    });\n});\nbuild();\nfunction byUnicode(prefix, unicode) {\n    return (_byUnicode[prefix] || {})[unicode];\n}\nfunction byLigature(prefix, ligature) {\n    return (_byLigature[prefix] || {})[ligature];\n}\nfunction byAlias(prefix, alias) {\n    return (_byAlias[prefix] || {})[alias];\n}\nfunction byOldName(name) {\n    return _byOldName[name] || {\n        prefix: null,\n        iconName: null\n    };\n}\nfunction byOldUnicode(unicode) {\n    var oldUnicode = _byOldUnicode[unicode];\n    var newUnicode = byUnicode(\"fas\", unicode);\n    return oldUnicode || (newUnicode ? {\n        prefix: \"fas\",\n        iconName: newUnicode\n    } : null) || {\n        prefix: null,\n        iconName: null\n    };\n}\nfunction getDefaultUsablePrefix() {\n    return _defaultUsablePrefix;\n}\nvar emptyCanonicalIcon = function emptyCanonicalIcon() {\n    return {\n        prefix: null,\n        iconName: null,\n        rest: []\n    };\n};\nfunction getCanonicalPrefix(styleOrPrefix) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _params$family = params.family, family = _params$family === void 0 ? FAMILY_CLASSIC : _params$family;\n    var style = PREFIX_TO_STYLE[family][styleOrPrefix];\n    var prefix = STYLE_TO_PREFIX[family][styleOrPrefix] || STYLE_TO_PREFIX[family][style];\n    var defined = styleOrPrefix in namespace.styles ? styleOrPrefix : null;\n    return prefix || defined || null;\n}\nvar PREFIXES_FOR_FAMILY = (_PREFIXES_FOR_FAMILY = {}, _defineProperty(_PREFIXES_FOR_FAMILY, FAMILY_CLASSIC, Object.keys(PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC])), _defineProperty(_PREFIXES_FOR_FAMILY, FAMILY_SHARP, Object.keys(PREFIX_TO_LONG_STYLE[FAMILY_SHARP])), _PREFIXES_FOR_FAMILY);\nfunction getCanonicalIcon(values) {\n    var _famProps;\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _params$skipLookups = params.skipLookups, skipLookups = _params$skipLookups === void 0 ? false : _params$skipLookups;\n    var famProps = (_famProps = {}, _defineProperty(_famProps, FAMILY_CLASSIC, \"\".concat(config.cssPrefix, \"-\").concat(FAMILY_CLASSIC)), _defineProperty(_famProps, FAMILY_SHARP, \"\".concat(config.cssPrefix, \"-\").concat(FAMILY_SHARP)), _famProps);\n    var givenPrefix = null;\n    var family = FAMILY_CLASSIC;\n    if (values.includes(famProps[FAMILY_CLASSIC]) || values.some(function(v) {\n        return PREFIXES_FOR_FAMILY[FAMILY_CLASSIC].includes(v);\n    })) {\n        family = FAMILY_CLASSIC;\n    }\n    if (values.includes(famProps[FAMILY_SHARP]) || values.some(function(v) {\n        return PREFIXES_FOR_FAMILY[FAMILY_SHARP].includes(v);\n    })) {\n        family = FAMILY_SHARP;\n    }\n    var canonical = values.reduce(function(acc, cls) {\n        var iconName = getIconName(config.cssPrefix, cls);\n        if (styles[cls]) {\n            cls = LONG_STYLE[family].includes(cls) ? LONG_STYLE_TO_PREFIX[family][cls] : cls;\n            givenPrefix = cls;\n            acc.prefix = cls;\n        } else if (PREFIXES[family].indexOf(cls) > -1) {\n            givenPrefix = cls;\n            acc.prefix = getCanonicalPrefix(cls, {\n                family: family\n            });\n        } else if (iconName) {\n            acc.iconName = iconName;\n        } else if (cls !== config.replacementClass && cls !== famProps[FAMILY_CLASSIC] && cls !== famProps[FAMILY_SHARP]) {\n            acc.rest.push(cls);\n        }\n        if (!skipLookups && acc.prefix && acc.iconName) {\n            var shim = givenPrefix === \"fa\" ? byOldName(acc.iconName) : {};\n            var aliasIconName = byAlias(acc.prefix, acc.iconName);\n            if (shim.prefix) {\n                givenPrefix = null;\n            }\n            acc.iconName = shim.iconName || aliasIconName || acc.iconName;\n            acc.prefix = shim.prefix || acc.prefix;\n            if (acc.prefix === \"far\" && !styles[\"far\"] && styles[\"fas\"] && !config.autoFetchSvg) {\n                // Allow a fallback from the regular style to solid if regular is not available\n                // but only if we aren't auto-fetching SVGs\n                acc.prefix = \"fas\";\n            }\n        }\n        return acc;\n    }, emptyCanonicalIcon());\n    if (values.includes(\"fa-brands\") || values.includes(\"fab\")) {\n        canonical.prefix = \"fab\";\n    }\n    if (values.includes(\"fa-duotone\") || values.includes(\"fad\")) {\n        canonical.prefix = \"fad\";\n    }\n    if (!canonical.prefix && family === FAMILY_SHARP && (styles[\"fass\"] || config.autoFetchSvg)) {\n        canonical.prefix = \"fass\";\n        canonical.iconName = byAlias(canonical.prefix, canonical.iconName) || canonical.iconName;\n    }\n    if (canonical.prefix === \"fa\" || givenPrefix === \"fa\") {\n        // The fa prefix is not canonical. So if it has made it through until this point\n        // we will shift it to the correct prefix.\n        canonical.prefix = getDefaultUsablePrefix() || \"fas\";\n    }\n    return canonical;\n}\nvar Library = /*#__PURE__*/ function() {\n    function Library() {\n        _classCallCheck(this, Library);\n        this.definitions = {};\n    }\n    _createClass(Library, [\n        {\n            key: \"add\",\n            value: function add() {\n                var _this = this;\n                for(var _len = arguments.length, definitions = new Array(_len), _key = 0; _key < _len; _key++){\n                    definitions[_key] = arguments[_key];\n                }\n                var additions = definitions.reduce(this._pullDefinitions, {});\n                Object.keys(additions).forEach(function(key) {\n                    _this.definitions[key] = _objectSpread2(_objectSpread2({}, _this.definitions[key] || {}), additions[key]);\n                    defineIcons(key, additions[key]); // TODO can we stop doing this? We can't get the icons by 'fa-solid' any longer so this probably needs to change\n                    var longPrefix = PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC][key];\n                    if (longPrefix) defineIcons(longPrefix, additions[key]);\n                    build();\n                });\n            }\n        },\n        {\n            key: \"reset\",\n            value: function reset() {\n                this.definitions = {};\n            }\n        },\n        {\n            key: \"_pullDefinitions\",\n            value: function _pullDefinitions(additions, definition) {\n                var normalized = definition.prefix && definition.iconName && definition.icon ? {\n                    0: definition\n                } : definition;\n                Object.keys(normalized).map(function(key) {\n                    var _normalized$key = normalized[key], prefix = _normalized$key.prefix, iconName = _normalized$key.iconName, icon = _normalized$key.icon;\n                    var aliases = icon[2];\n                    if (!additions[prefix]) additions[prefix] = {};\n                    if (aliases.length > 0) {\n                        aliases.forEach(function(alias) {\n                            if (typeof alias === \"string\") {\n                                additions[prefix][alias] = icon;\n                            }\n                        });\n                    }\n                    additions[prefix][iconName] = icon;\n                });\n                return additions;\n            }\n        }\n    ]);\n    return Library;\n}();\nvar _plugins = [];\nvar _hooks = {};\nvar providers = {};\nvar defaultProviderKeys = Object.keys(providers);\nfunction registerPlugins(nextPlugins, _ref) {\n    var obj = _ref.mixoutsTo;\n    _plugins = nextPlugins;\n    _hooks = {};\n    Object.keys(providers).forEach(function(k) {\n        if (defaultProviderKeys.indexOf(k) === -1) {\n            delete providers[k];\n        }\n    });\n    _plugins.forEach(function(plugin) {\n        var mixout = plugin.mixout ? plugin.mixout() : {};\n        Object.keys(mixout).forEach(function(tk) {\n            if (typeof mixout[tk] === \"function\") {\n                obj[tk] = mixout[tk];\n            }\n            if (_typeof(mixout[tk]) === \"object\") {\n                Object.keys(mixout[tk]).forEach(function(sk) {\n                    if (!obj[tk]) {\n                        obj[tk] = {};\n                    }\n                    obj[tk][sk] = mixout[tk][sk];\n                });\n            }\n        });\n        if (plugin.hooks) {\n            var hooks = plugin.hooks();\n            Object.keys(hooks).forEach(function(hook) {\n                if (!_hooks[hook]) {\n                    _hooks[hook] = [];\n                }\n                _hooks[hook].push(hooks[hook]);\n            });\n        }\n        if (plugin.provides) {\n            plugin.provides(providers);\n        }\n    });\n    return obj;\n}\nfunction chainHooks(hook, accumulator) {\n    for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n        args[_key - 2] = arguments[_key];\n    }\n    var hookFns = _hooks[hook] || [];\n    hookFns.forEach(function(hookFn) {\n        accumulator = hookFn.apply(null, [\n            accumulator\n        ].concat(args)); // eslint-disable-line no-useless-call\n    });\n    return accumulator;\n}\nfunction callHooks(hook) {\n    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n        args[_key2 - 1] = arguments[_key2];\n    }\n    var hookFns = _hooks[hook] || [];\n    hookFns.forEach(function(hookFn) {\n        hookFn.apply(null, args);\n    });\n    return undefined;\n}\nfunction callProvided() {\n    var hook = arguments[0];\n    var args = Array.prototype.slice.call(arguments, 1);\n    return providers[hook] ? providers[hook].apply(null, args) : undefined;\n}\nfunction findIconDefinition(iconLookup) {\n    if (iconLookup.prefix === \"fa\") {\n        iconLookup.prefix = \"fas\";\n    }\n    var iconName = iconLookup.iconName;\n    var prefix = iconLookup.prefix || getDefaultUsablePrefix();\n    if (!iconName) return;\n    iconName = byAlias(prefix, iconName) || iconName;\n    return iconFromMapping(library.definitions, prefix, iconName) || iconFromMapping(namespace.styles, prefix, iconName);\n}\nvar library = new Library();\nvar noAuto = function noAuto() {\n    config.autoReplaceSvg = false;\n    config.observeMutations = false;\n    callHooks(\"noAuto\");\n};\nvar dom = {\n    i2svg: function i2svg() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (IS_DOM) {\n            callHooks(\"beforeI2svg\", params);\n            callProvided(\"pseudoElements2svg\", params);\n            return callProvided(\"i2svg\", params);\n        } else {\n            return Promise.reject(\"Operation requires a DOM of some kind.\");\n        }\n    },\n    watch: function watch() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var autoReplaceSvgRoot = params.autoReplaceSvgRoot;\n        if (config.autoReplaceSvg === false) {\n            config.autoReplaceSvg = true;\n        }\n        config.observeMutations = true;\n        domready(function() {\n            autoReplace({\n                autoReplaceSvgRoot: autoReplaceSvgRoot\n            });\n            callHooks(\"watch\", params);\n        });\n    }\n};\nvar parse = {\n    icon: function icon(_icon) {\n        if (_icon === null) {\n            return null;\n        }\n        if (_typeof(_icon) === \"object\" && _icon.prefix && _icon.iconName) {\n            return {\n                prefix: _icon.prefix,\n                iconName: byAlias(_icon.prefix, _icon.iconName) || _icon.iconName\n            };\n        }\n        if (Array.isArray(_icon) && _icon.length === 2) {\n            var iconName = _icon[1].indexOf(\"fa-\") === 0 ? _icon[1].slice(3) : _icon[1];\n            var prefix = getCanonicalPrefix(_icon[0]);\n            return {\n                prefix: prefix,\n                iconName: byAlias(prefix, iconName) || iconName\n            };\n        }\n        if (typeof _icon === \"string\" && (_icon.indexOf(\"\".concat(config.cssPrefix, \"-\")) > -1 || _icon.match(ICON_SELECTION_SYNTAX_PATTERN))) {\n            var canonicalIcon = getCanonicalIcon(_icon.split(\" \"), {\n                skipLookups: true\n            });\n            return {\n                prefix: canonicalIcon.prefix || getDefaultUsablePrefix(),\n                iconName: byAlias(canonicalIcon.prefix, canonicalIcon.iconName) || canonicalIcon.iconName\n            };\n        }\n        if (typeof _icon === \"string\") {\n            var _prefix = getDefaultUsablePrefix();\n            return {\n                prefix: _prefix,\n                iconName: byAlias(_prefix, _icon) || _icon\n            };\n        }\n    }\n};\nvar api = {\n    noAuto: noAuto,\n    config: config,\n    dom: dom,\n    parse: parse,\n    library: library,\n    findIconDefinition: findIconDefinition,\n    toHtml: toHtml\n};\nvar autoReplace = function autoReplace() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _params$autoReplaceSv = params.autoReplaceSvgRoot, autoReplaceSvgRoot = _params$autoReplaceSv === void 0 ? DOCUMENT : _params$autoReplaceSv;\n    if ((Object.keys(namespace.styles).length > 0 || config.autoFetchSvg) && IS_DOM && config.autoReplaceSvg) api.dom.i2svg({\n        node: autoReplaceSvgRoot\n    });\n};\nfunction domVariants(val, abstractCreator) {\n    Object.defineProperty(val, \"abstract\", {\n        get: abstractCreator\n    });\n    Object.defineProperty(val, \"html\", {\n        get: function get() {\n            return val.abstract.map(function(a) {\n                return toHtml(a);\n            });\n        }\n    });\n    Object.defineProperty(val, \"node\", {\n        get: function get() {\n            if (!IS_DOM) return;\n            var container = DOCUMENT.createElement(\"div\");\n            container.innerHTML = val.html;\n            return container.children;\n        }\n    });\n    return val;\n}\nfunction asIcon(_ref) {\n    var children = _ref.children, main = _ref.main, mask = _ref.mask, attributes = _ref.attributes, styles = _ref.styles, transform = _ref.transform;\n    if (transformIsMeaningful(transform) && main.found && !mask.found) {\n        var width = main.width, height = main.height;\n        var offset = {\n            x: width / height / 2,\n            y: 0.5\n        };\n        attributes[\"style\"] = joinStyles(_objectSpread2(_objectSpread2({}, styles), {}, {\n            \"transform-origin\": \"\".concat(offset.x + transform.x / 16, \"em \").concat(offset.y + transform.y / 16, \"em\")\n        }));\n    }\n    return [\n        {\n            tag: \"svg\",\n            attributes: attributes,\n            children: children\n        }\n    ];\n}\nfunction asSymbol(_ref) {\n    var prefix = _ref.prefix, iconName = _ref.iconName, children = _ref.children, attributes = _ref.attributes, symbol = _ref.symbol;\n    var id = symbol === true ? \"\".concat(prefix, \"-\").concat(config.cssPrefix, \"-\").concat(iconName) : symbol;\n    return [\n        {\n            tag: \"svg\",\n            attributes: {\n                style: \"display: none;\"\n            },\n            children: [\n                {\n                    tag: \"symbol\",\n                    attributes: _objectSpread2(_objectSpread2({}, attributes), {}, {\n                        id: id\n                    }),\n                    children: children\n                }\n            ]\n        }\n    ];\n}\nfunction makeInlineSvgAbstract(params) {\n    var _params$icons = params.icons, main = _params$icons.main, mask = _params$icons.mask, prefix = params.prefix, iconName = params.iconName, transform = params.transform, symbol = params.symbol, title = params.title, maskId = params.maskId, titleId = params.titleId, extra = params.extra, _params$watchable = params.watchable, watchable = _params$watchable === void 0 ? false : _params$watchable;\n    var _ref = mask.found ? mask : main, width = _ref.width, height = _ref.height;\n    var isUploadedIcon = prefix === \"fak\";\n    var attrClass = [\n        config.replacementClass,\n        iconName ? \"\".concat(config.cssPrefix, \"-\").concat(iconName) : \"\"\n    ].filter(function(c) {\n        return extra.classes.indexOf(c) === -1;\n    }).filter(function(c) {\n        return c !== \"\" || !!c;\n    }).concat(extra.classes).join(\" \");\n    var content = {\n        children: [],\n        attributes: _objectSpread2(_objectSpread2({}, extra.attributes), {}, {\n            \"data-prefix\": prefix,\n            \"data-icon\": iconName,\n            \"class\": attrClass,\n            \"role\": extra.attributes.role || \"img\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\",\n            \"viewBox\": \"0 0 \".concat(width, \" \").concat(height)\n        })\n    };\n    var uploadedIconWidthStyle = isUploadedIcon && !~extra.classes.indexOf(\"fa-fw\") ? {\n        width: \"\".concat(width / height * 16 * 0.0625, \"em\")\n    } : {};\n    if (watchable) {\n        content.attributes[DATA_FA_I2SVG] = \"\";\n    }\n    if (title) {\n        content.children.push({\n            tag: \"title\",\n            attributes: {\n                id: content.attributes[\"aria-labelledby\"] || \"title-\".concat(titleId || nextUniqueId())\n            },\n            children: [\n                title\n            ]\n        });\n        delete content.attributes.title;\n    }\n    var args = _objectSpread2(_objectSpread2({}, content), {}, {\n        prefix: prefix,\n        iconName: iconName,\n        main: main,\n        mask: mask,\n        maskId: maskId,\n        transform: transform,\n        symbol: symbol,\n        styles: _objectSpread2(_objectSpread2({}, uploadedIconWidthStyle), extra.styles)\n    });\n    var _ref2 = mask.found && main.found ? callProvided(\"generateAbstractMask\", args) || {\n        children: [],\n        attributes: {}\n    } : callProvided(\"generateAbstractIcon\", args) || {\n        children: [],\n        attributes: {}\n    }, children = _ref2.children, attributes = _ref2.attributes;\n    args.children = children;\n    args.attributes = attributes;\n    if (symbol) {\n        return asSymbol(args);\n    } else {\n        return asIcon(args);\n    }\n}\nfunction makeLayersTextAbstract(params) {\n    var content = params.content, width = params.width, height = params.height, transform = params.transform, title = params.title, extra = params.extra, _params$watchable2 = params.watchable, watchable = _params$watchable2 === void 0 ? false : _params$watchable2;\n    var attributes = _objectSpread2(_objectSpread2(_objectSpread2({}, extra.attributes), title ? {\n        \"title\": title\n    } : {}), {}, {\n        \"class\": extra.classes.join(\" \")\n    });\n    if (watchable) {\n        attributes[DATA_FA_I2SVG] = \"\";\n    }\n    var styles = _objectSpread2({}, extra.styles);\n    if (transformIsMeaningful(transform)) {\n        styles[\"transform\"] = transformForCss({\n            transform: transform,\n            startCentered: true,\n            width: width,\n            height: height\n        });\n        styles[\"-webkit-transform\"] = styles[\"transform\"];\n    }\n    var styleString = joinStyles(styles);\n    if (styleString.length > 0) {\n        attributes[\"style\"] = styleString;\n    }\n    var val = [];\n    val.push({\n        tag: \"span\",\n        attributes: attributes,\n        children: [\n            content\n        ]\n    });\n    if (title) {\n        val.push({\n            tag: \"span\",\n            attributes: {\n                class: \"sr-only\"\n            },\n            children: [\n                title\n            ]\n        });\n    }\n    return val;\n}\nfunction makeLayersCounterAbstract(params) {\n    var content = params.content, title = params.title, extra = params.extra;\n    var attributes = _objectSpread2(_objectSpread2(_objectSpread2({}, extra.attributes), title ? {\n        \"title\": title\n    } : {}), {}, {\n        \"class\": extra.classes.join(\" \")\n    });\n    var styleString = joinStyles(extra.styles);\n    if (styleString.length > 0) {\n        attributes[\"style\"] = styleString;\n    }\n    var val = [];\n    val.push({\n        tag: \"span\",\n        attributes: attributes,\n        children: [\n            content\n        ]\n    });\n    if (title) {\n        val.push({\n            tag: \"span\",\n            attributes: {\n                class: \"sr-only\"\n            },\n            children: [\n                title\n            ]\n        });\n    }\n    return val;\n}\nvar styles$1 = namespace.styles;\nfunction asFoundIcon(icon) {\n    var width = icon[0];\n    var height = icon[1];\n    var _icon$slice = icon.slice(4), _icon$slice2 = _slicedToArray(_icon$slice, 1), vectorData = _icon$slice2[0];\n    var element = null;\n    if (Array.isArray(vectorData)) {\n        element = {\n            tag: \"g\",\n            attributes: {\n                class: \"\".concat(config.cssPrefix, \"-\").concat(DUOTONE_CLASSES.GROUP)\n            },\n            children: [\n                {\n                    tag: \"path\",\n                    attributes: {\n                        class: \"\".concat(config.cssPrefix, \"-\").concat(DUOTONE_CLASSES.SECONDARY),\n                        fill: \"currentColor\",\n                        d: vectorData[0]\n                    }\n                },\n                {\n                    tag: \"path\",\n                    attributes: {\n                        class: \"\".concat(config.cssPrefix, \"-\").concat(DUOTONE_CLASSES.PRIMARY),\n                        fill: \"currentColor\",\n                        d: vectorData[1]\n                    }\n                }\n            ]\n        };\n    } else {\n        element = {\n            tag: \"path\",\n            attributes: {\n                fill: \"currentColor\",\n                d: vectorData\n            }\n        };\n    }\n    return {\n        found: true,\n        width: width,\n        height: height,\n        icon: element\n    };\n}\nvar missingIconResolutionMixin = {\n    found: false,\n    width: 512,\n    height: 512\n};\nfunction maybeNotifyMissing(iconName, prefix) {\n    if (!PRODUCTION && !config.showMissingIcons && iconName) {\n        console.error('Icon with name \"'.concat(iconName, '\" and prefix \"').concat(prefix, '\" is missing.'));\n    }\n}\nfunction findIcon(iconName, prefix) {\n    var givenPrefix = prefix;\n    if (prefix === \"fa\" && config.styleDefault !== null) {\n        prefix = getDefaultUsablePrefix();\n    }\n    return new Promise(function(resolve, reject) {\n        var val = {\n            found: false,\n            width: 512,\n            height: 512,\n            icon: callProvided(\"missingIconAbstract\") || {}\n        };\n        if (givenPrefix === \"fa\") {\n            var shim = byOldName(iconName) || {};\n            iconName = shim.iconName || iconName;\n            prefix = shim.prefix || prefix;\n        }\n        if (iconName && prefix && styles$1[prefix] && styles$1[prefix][iconName]) {\n            var icon = styles$1[prefix][iconName];\n            return resolve(asFoundIcon(icon));\n        }\n        maybeNotifyMissing(iconName, prefix);\n        resolve(_objectSpread2(_objectSpread2({}, missingIconResolutionMixin), {}, {\n            icon: config.showMissingIcons && iconName ? callProvided(\"missingIconAbstract\") || {} : {}\n        }));\n    });\n}\nvar noop$1 = function noop() {};\nvar p = config.measurePerformance && PERFORMANCE && PERFORMANCE.mark && PERFORMANCE.measure ? PERFORMANCE : {\n    mark: noop$1,\n    measure: noop$1\n};\nvar preamble = 'FA \"6.4.2\"';\nvar begin = function begin(name) {\n    p.mark(\"\".concat(preamble, \" \").concat(name, \" begins\"));\n    return function() {\n        return end(name);\n    };\n};\nvar end = function end(name) {\n    p.mark(\"\".concat(preamble, \" \").concat(name, \" ends\"));\n    p.measure(\"\".concat(preamble, \" \").concat(name), \"\".concat(preamble, \" \").concat(name, \" begins\"), \"\".concat(preamble, \" \").concat(name, \" ends\"));\n};\nvar perf = {\n    begin: begin,\n    end: end\n};\nvar noop$2 = function noop() {};\nfunction isWatched(node) {\n    var i2svg = node.getAttribute ? node.getAttribute(DATA_FA_I2SVG) : null;\n    return typeof i2svg === \"string\";\n}\nfunction hasPrefixAndIcon(node) {\n    var prefix = node.getAttribute ? node.getAttribute(DATA_PREFIX) : null;\n    var icon = node.getAttribute ? node.getAttribute(DATA_ICON) : null;\n    return prefix && icon;\n}\nfunction hasBeenReplaced(node) {\n    return node && node.classList && node.classList.contains && node.classList.contains(config.replacementClass);\n}\nfunction getMutator() {\n    if (config.autoReplaceSvg === true) {\n        return mutators.replace;\n    }\n    var mutator = mutators[config.autoReplaceSvg];\n    return mutator || mutators.replace;\n}\nfunction createElementNS(tag) {\n    return DOCUMENT.createElementNS(\"http://www.w3.org/2000/svg\", tag);\n}\nfunction createElement(tag) {\n    return DOCUMENT.createElement(tag);\n}\nfunction convertSVG(abstractObj) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _params$ceFn = params.ceFn, ceFn = _params$ceFn === void 0 ? abstractObj.tag === \"svg\" ? createElementNS : createElement : _params$ceFn;\n    if (typeof abstractObj === \"string\") {\n        return DOCUMENT.createTextNode(abstractObj);\n    }\n    var tag = ceFn(abstractObj.tag);\n    Object.keys(abstractObj.attributes || []).forEach(function(key) {\n        tag.setAttribute(key, abstractObj.attributes[key]);\n    });\n    var children = abstractObj.children || [];\n    children.forEach(function(child) {\n        tag.appendChild(convertSVG(child, {\n            ceFn: ceFn\n        }));\n    });\n    return tag;\n}\nfunction nodeAsComment(node) {\n    var comment = \" \".concat(node.outerHTML, \" \");\n    /* BEGIN.ATTRIBUTION */ comment = \"\".concat(comment, \"Font Awesome fontawesome.com \");\n    /* END.ATTRIBUTION */ return comment;\n}\nvar mutators = {\n    replace: function replace(mutation) {\n        var node = mutation[0];\n        if (node.parentNode) {\n            mutation[1].forEach(function(_abstract) {\n                node.parentNode.insertBefore(convertSVG(_abstract), node);\n            });\n            if (node.getAttribute(DATA_FA_I2SVG) === null && config.keepOriginalSource) {\n                var comment = DOCUMENT.createComment(nodeAsComment(node));\n                node.parentNode.replaceChild(comment, node);\n            } else {\n                node.remove();\n            }\n        }\n    },\n    nest: function nest(mutation) {\n        var node = mutation[0];\n        var _abstract2 = mutation[1]; // If we already have a replaced node we do not want to continue nesting within it.\n        // Short-circuit to the standard replacement\n        if (~classArray(node).indexOf(config.replacementClass)) {\n            return mutators.replace(mutation);\n        }\n        var forSvg = new RegExp(\"\".concat(config.cssPrefix, \"-.*\"));\n        delete _abstract2[0].attributes.id;\n        if (_abstract2[0].attributes.class) {\n            var splitClasses = _abstract2[0].attributes.class.split(\" \").reduce(function(acc, cls) {\n                if (cls === config.replacementClass || cls.match(forSvg)) {\n                    acc.toSvg.push(cls);\n                } else {\n                    acc.toNode.push(cls);\n                }\n                return acc;\n            }, {\n                toNode: [],\n                toSvg: []\n            });\n            _abstract2[0].attributes.class = splitClasses.toSvg.join(\" \");\n            if (splitClasses.toNode.length === 0) {\n                node.removeAttribute(\"class\");\n            } else {\n                node.setAttribute(\"class\", splitClasses.toNode.join(\" \"));\n            }\n        }\n        var newInnerHTML = _abstract2.map(function(a) {\n            return toHtml(a);\n        }).join(\"\\n\");\n        node.setAttribute(DATA_FA_I2SVG, \"\");\n        node.innerHTML = newInnerHTML;\n    }\n};\nfunction performOperationSync(op) {\n    op();\n}\nfunction perform(mutations, callback) {\n    var callbackFunction = typeof callback === \"function\" ? callback : noop$2;\n    if (mutations.length === 0) {\n        callbackFunction();\n    } else {\n        var frame = performOperationSync;\n        if (config.mutateApproach === MUTATION_APPROACH_ASYNC) {\n            frame = WINDOW.requestAnimationFrame || performOperationSync;\n        }\n        frame(function() {\n            var mutator = getMutator();\n            var mark = perf.begin(\"mutate\");\n            mutations.map(mutator);\n            mark();\n            callbackFunction();\n        });\n    }\n}\nvar disabled = false;\nfunction disableObservation() {\n    disabled = true;\n}\nfunction enableObservation() {\n    disabled = false;\n}\nvar mo = null;\nfunction observe(options) {\n    if (!MUTATION_OBSERVER) {\n        return;\n    }\n    if (!config.observeMutations) {\n        return;\n    }\n    var _options$treeCallback = options.treeCallback, treeCallback = _options$treeCallback === void 0 ? noop$2 : _options$treeCallback, _options$nodeCallback = options.nodeCallback, nodeCallback = _options$nodeCallback === void 0 ? noop$2 : _options$nodeCallback, _options$pseudoElemen = options.pseudoElementsCallback, pseudoElementsCallback = _options$pseudoElemen === void 0 ? noop$2 : _options$pseudoElemen, _options$observeMutat = options.observeMutationsRoot, observeMutationsRoot = _options$observeMutat === void 0 ? DOCUMENT : _options$observeMutat;\n    mo = new MUTATION_OBSERVER(function(objects) {\n        if (disabled) return;\n        var defaultPrefix = getDefaultUsablePrefix();\n        toArray(objects).forEach(function(mutationRecord) {\n            if (mutationRecord.type === \"childList\" && mutationRecord.addedNodes.length > 0 && !isWatched(mutationRecord.addedNodes[0])) {\n                if (config.searchPseudoElements) {\n                    pseudoElementsCallback(mutationRecord.target);\n                }\n                treeCallback(mutationRecord.target);\n            }\n            if (mutationRecord.type === \"attributes\" && mutationRecord.target.parentNode && config.searchPseudoElements) {\n                pseudoElementsCallback(mutationRecord.target.parentNode);\n            }\n            if (mutationRecord.type === \"attributes\" && isWatched(mutationRecord.target) && ~ATTRIBUTES_WATCHED_FOR_MUTATION.indexOf(mutationRecord.attributeName)) {\n                if (mutationRecord.attributeName === \"class\" && hasPrefixAndIcon(mutationRecord.target)) {\n                    var _getCanonicalIcon = getCanonicalIcon(classArray(mutationRecord.target)), prefix = _getCanonicalIcon.prefix, iconName = _getCanonicalIcon.iconName;\n                    mutationRecord.target.setAttribute(DATA_PREFIX, prefix || defaultPrefix);\n                    if (iconName) mutationRecord.target.setAttribute(DATA_ICON, iconName);\n                } else if (hasBeenReplaced(mutationRecord.target)) {\n                    nodeCallback(mutationRecord.target);\n                }\n            }\n        });\n    });\n    if (!IS_DOM) return;\n    mo.observe(observeMutationsRoot, {\n        childList: true,\n        attributes: true,\n        characterData: true,\n        subtree: true\n    });\n}\nfunction disconnect() {\n    if (!mo) return;\n    mo.disconnect();\n}\nfunction styleParser(node) {\n    var style = node.getAttribute(\"style\");\n    var val = [];\n    if (style) {\n        val = style.split(\";\").reduce(function(acc, style) {\n            var styles = style.split(\":\");\n            var prop = styles[0];\n            var value = styles.slice(1);\n            if (prop && value.length > 0) {\n                acc[prop] = value.join(\":\").trim();\n            }\n            return acc;\n        }, {});\n    }\n    return val;\n}\nfunction classParser(node) {\n    var existingPrefix = node.getAttribute(\"data-prefix\");\n    var existingIconName = node.getAttribute(\"data-icon\");\n    var innerText = node.innerText !== undefined ? node.innerText.trim() : \"\";\n    var val = getCanonicalIcon(classArray(node));\n    if (!val.prefix) {\n        val.prefix = getDefaultUsablePrefix();\n    }\n    if (existingPrefix && existingIconName) {\n        val.prefix = existingPrefix;\n        val.iconName = existingIconName;\n    }\n    if (val.iconName && val.prefix) {\n        return val;\n    }\n    if (val.prefix && innerText.length > 0) {\n        val.iconName = byLigature(val.prefix, node.innerText) || byUnicode(val.prefix, toHex(node.innerText));\n    }\n    if (!val.iconName && config.autoFetchSvg && node.firstChild && node.firstChild.nodeType === Node.TEXT_NODE) {\n        val.iconName = node.firstChild.data;\n    }\n    return val;\n}\nfunction attributesParser(node) {\n    var extraAttributes = toArray(node.attributes).reduce(function(acc, attr) {\n        if (acc.name !== \"class\" && acc.name !== \"style\") {\n            acc[attr.name] = attr.value;\n        }\n        return acc;\n    }, {});\n    var title = node.getAttribute(\"title\");\n    var titleId = node.getAttribute(\"data-fa-title-id\");\n    if (config.autoA11y) {\n        if (title) {\n            extraAttributes[\"aria-labelledby\"] = \"\".concat(config.replacementClass, \"-title-\").concat(titleId || nextUniqueId());\n        } else {\n            extraAttributes[\"aria-hidden\"] = \"true\";\n            extraAttributes[\"focusable\"] = \"false\";\n        }\n    }\n    return extraAttributes;\n}\nfunction blankMeta() {\n    return {\n        iconName: null,\n        title: null,\n        titleId: null,\n        prefix: null,\n        transform: meaninglessTransform,\n        symbol: false,\n        mask: {\n            iconName: null,\n            prefix: null,\n            rest: []\n        },\n        maskId: null,\n        extra: {\n            classes: [],\n            styles: {},\n            attributes: {}\n        }\n    };\n}\nfunction parseMeta(node) {\n    var parser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        styleParser: true\n    };\n    var _classParser = classParser(node), iconName = _classParser.iconName, prefix = _classParser.prefix, extraClasses = _classParser.rest;\n    var extraAttributes = attributesParser(node);\n    var pluginMeta = chainHooks(\"parseNodeAttributes\", {}, node);\n    var extraStyles = parser.styleParser ? styleParser(node) : [];\n    return _objectSpread2({\n        iconName: iconName,\n        title: node.getAttribute(\"title\"),\n        titleId: node.getAttribute(\"data-fa-title-id\"),\n        prefix: prefix,\n        transform: meaninglessTransform,\n        mask: {\n            iconName: null,\n            prefix: null,\n            rest: []\n        },\n        maskId: null,\n        symbol: false,\n        extra: {\n            classes: extraClasses,\n            styles: extraStyles,\n            attributes: extraAttributes\n        }\n    }, pluginMeta);\n}\nvar styles$2 = namespace.styles;\nfunction generateMutation(node) {\n    var nodeMeta = config.autoReplaceSvg === \"nest\" ? parseMeta(node, {\n        styleParser: false\n    }) : parseMeta(node);\n    if (~nodeMeta.extra.classes.indexOf(LAYERS_TEXT_CLASSNAME)) {\n        return callProvided(\"generateLayersText\", node, nodeMeta);\n    } else {\n        return callProvided(\"generateSvgReplacementMutation\", node, nodeMeta);\n    }\n}\nvar knownPrefixes = new Set();\nFAMILIES.map(function(family) {\n    knownPrefixes.add(\"fa-\".concat(family));\n});\nObject.keys(PREFIX_TO_STYLE[FAMILY_CLASSIC]).map(knownPrefixes.add.bind(knownPrefixes));\nObject.keys(PREFIX_TO_STYLE[FAMILY_SHARP]).map(knownPrefixes.add.bind(knownPrefixes));\nknownPrefixes = _toConsumableArray(knownPrefixes);\nfunction onTree(root) {\n    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (!IS_DOM) return Promise.resolve();\n    var htmlClassList = DOCUMENT.documentElement.classList;\n    var hclAdd = function hclAdd(suffix) {\n        return htmlClassList.add(\"\".concat(HTML_CLASS_I2SVG_BASE_CLASS, \"-\").concat(suffix));\n    };\n    var hclRemove = function hclRemove(suffix) {\n        return htmlClassList.remove(\"\".concat(HTML_CLASS_I2SVG_BASE_CLASS, \"-\").concat(suffix));\n    };\n    var prefixes = config.autoFetchSvg ? knownPrefixes : FAMILIES.map(function(f) {\n        return \"fa-\".concat(f);\n    }).concat(Object.keys(styles$2));\n    if (!prefixes.includes(\"fa\")) {\n        prefixes.push(\"fa\");\n    }\n    var prefixesDomQuery = [\n        \".\".concat(LAYERS_TEXT_CLASSNAME, \":not([\").concat(DATA_FA_I2SVG, \"])\")\n    ].concat(prefixes.map(function(p) {\n        return \".\".concat(p, \":not([\").concat(DATA_FA_I2SVG, \"])\");\n    })).join(\", \");\n    if (prefixesDomQuery.length === 0) {\n        return Promise.resolve();\n    }\n    var candidates = [];\n    try {\n        candidates = toArray(root.querySelectorAll(prefixesDomQuery));\n    } catch (e) {}\n    if (candidates.length > 0) {\n        hclAdd(\"pending\");\n        hclRemove(\"complete\");\n    } else {\n        return Promise.resolve();\n    }\n    var mark = perf.begin(\"onTree\");\n    var mutations = candidates.reduce(function(acc, node) {\n        try {\n            var mutation = generateMutation(node);\n            if (mutation) {\n                acc.push(mutation);\n            }\n        } catch (e) {\n            if (!PRODUCTION) {\n                if (e.name === \"MissingIcon\") {\n                    console.error(e);\n                }\n            }\n        }\n        return acc;\n    }, []);\n    return new Promise(function(resolve, reject) {\n        Promise.all(mutations).then(function(resolvedMutations) {\n            perform(resolvedMutations, function() {\n                hclAdd(\"active\");\n                hclAdd(\"complete\");\n                hclRemove(\"pending\");\n                if (typeof callback === \"function\") callback();\n                mark();\n                resolve();\n            });\n        }).catch(function(e) {\n            mark();\n            reject(e);\n        });\n    });\n}\nfunction onNode(node) {\n    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    generateMutation(node).then(function(mutation) {\n        if (mutation) {\n            perform([\n                mutation\n            ], callback);\n        }\n    });\n}\nfunction resolveIcons(next) {\n    return function(maybeIconDefinition) {\n        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var iconDefinition = (maybeIconDefinition || {}).icon ? maybeIconDefinition : findIconDefinition(maybeIconDefinition || {});\n        var mask = params.mask;\n        if (mask) {\n            mask = (mask || {}).icon ? mask : findIconDefinition(mask || {});\n        }\n        return next(iconDefinition, _objectSpread2(_objectSpread2({}, params), {}, {\n            mask: mask\n        }));\n    };\n}\nvar render = function render(iconDefinition) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _params$transform = params.transform, transform = _params$transform === void 0 ? meaninglessTransform : _params$transform, _params$symbol = params.symbol, symbol = _params$symbol === void 0 ? false : _params$symbol, _params$mask = params.mask, mask = _params$mask === void 0 ? null : _params$mask, _params$maskId = params.maskId, maskId = _params$maskId === void 0 ? null : _params$maskId, _params$title = params.title, title = _params$title === void 0 ? null : _params$title, _params$titleId = params.titleId, titleId = _params$titleId === void 0 ? null : _params$titleId, _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes, _params$attributes = params.attributes, attributes = _params$attributes === void 0 ? {} : _params$attributes, _params$styles = params.styles, styles = _params$styles === void 0 ? {} : _params$styles;\n    if (!iconDefinition) return;\n    var prefix = iconDefinition.prefix, iconName = iconDefinition.iconName, icon = iconDefinition.icon;\n    return domVariants(_objectSpread2({\n        type: \"icon\"\n    }, iconDefinition), function() {\n        callHooks(\"beforeDOMElementCreation\", {\n            iconDefinition: iconDefinition,\n            params: params\n        });\n        if (config.autoA11y) {\n            if (title) {\n                attributes[\"aria-labelledby\"] = \"\".concat(config.replacementClass, \"-title-\").concat(titleId || nextUniqueId());\n            } else {\n                attributes[\"aria-hidden\"] = \"true\";\n                attributes[\"focusable\"] = \"false\";\n            }\n        }\n        return makeInlineSvgAbstract({\n            icons: {\n                main: asFoundIcon(icon),\n                mask: mask ? asFoundIcon(mask.icon) : {\n                    found: false,\n                    width: null,\n                    height: null,\n                    icon: {}\n                }\n            },\n            prefix: prefix,\n            iconName: iconName,\n            transform: _objectSpread2(_objectSpread2({}, meaninglessTransform), transform),\n            symbol: symbol,\n            title: title,\n            maskId: maskId,\n            titleId: titleId,\n            extra: {\n                attributes: attributes,\n                styles: styles,\n                classes: classes\n            }\n        });\n    });\n};\nvar ReplaceElements = {\n    mixout: function mixout() {\n        return {\n            icon: resolveIcons(render)\n        };\n    },\n    hooks: function hooks() {\n        return {\n            mutationObserverCallbacks: function mutationObserverCallbacks(accumulator) {\n                accumulator.treeCallback = onTree;\n                accumulator.nodeCallback = onNode;\n                return accumulator;\n            }\n        };\n    },\n    provides: function provides(providers$$1) {\n        providers$$1.i2svg = function(params) {\n            var _params$node = params.node, node = _params$node === void 0 ? DOCUMENT : _params$node, _params$callback = params.callback, callback = _params$callback === void 0 ? function() {} : _params$callback;\n            return onTree(node, callback);\n        };\n        providers$$1.generateSvgReplacementMutation = function(node, nodeMeta) {\n            var iconName = nodeMeta.iconName, title = nodeMeta.title, titleId = nodeMeta.titleId, prefix = nodeMeta.prefix, transform = nodeMeta.transform, symbol = nodeMeta.symbol, mask = nodeMeta.mask, maskId = nodeMeta.maskId, extra = nodeMeta.extra;\n            return new Promise(function(resolve, reject) {\n                Promise.all([\n                    findIcon(iconName, prefix),\n                    mask.iconName ? findIcon(mask.iconName, mask.prefix) : Promise.resolve({\n                        found: false,\n                        width: 512,\n                        height: 512,\n                        icon: {}\n                    })\n                ]).then(function(_ref) {\n                    var _ref2 = _slicedToArray(_ref, 2), main = _ref2[0], mask = _ref2[1];\n                    resolve([\n                        node,\n                        makeInlineSvgAbstract({\n                            icons: {\n                                main: main,\n                                mask: mask\n                            },\n                            prefix: prefix,\n                            iconName: iconName,\n                            transform: transform,\n                            symbol: symbol,\n                            maskId: maskId,\n                            title: title,\n                            titleId: titleId,\n                            extra: extra,\n                            watchable: true\n                        })\n                    ]);\n                }).catch(reject);\n            });\n        };\n        providers$$1.generateAbstractIcon = function(_ref3) {\n            var children = _ref3.children, attributes = _ref3.attributes, main = _ref3.main, transform = _ref3.transform, styles = _ref3.styles;\n            var styleString = joinStyles(styles);\n            if (styleString.length > 0) {\n                attributes[\"style\"] = styleString;\n            }\n            var nextChild;\n            if (transformIsMeaningful(transform)) {\n                nextChild = callProvided(\"generateAbstractTransformGrouping\", {\n                    main: main,\n                    transform: transform,\n                    containerWidth: main.width,\n                    iconWidth: main.width\n                });\n            }\n            children.push(nextChild || main.icon);\n            return {\n                children: children,\n                attributes: attributes\n            };\n        };\n    }\n};\nvar Layers = {\n    mixout: function mixout() {\n        return {\n            layer: function layer(assembler) {\n                var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes;\n                return domVariants({\n                    type: \"layer\"\n                }, function() {\n                    callHooks(\"beforeDOMElementCreation\", {\n                        assembler: assembler,\n                        params: params\n                    });\n                    var children = [];\n                    assembler(function(args) {\n                        Array.isArray(args) ? args.map(function(a) {\n                            children = children.concat(a.abstract);\n                        }) : children = children.concat(args.abstract);\n                    });\n                    return [\n                        {\n                            tag: \"span\",\n                            attributes: {\n                                class: [\n                                    \"\".concat(config.cssPrefix, \"-layers\")\n                                ].concat(_toConsumableArray(classes)).join(\" \")\n                            },\n                            children: children\n                        }\n                    ];\n                });\n            }\n        };\n    }\n};\nvar LayersCounter = {\n    mixout: function mixout() {\n        return {\n            counter: function counter(content) {\n                var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var _params$title = params.title, title = _params$title === void 0 ? null : _params$title, _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes, _params$attributes = params.attributes, attributes = _params$attributes === void 0 ? {} : _params$attributes, _params$styles = params.styles, styles = _params$styles === void 0 ? {} : _params$styles;\n                return domVariants({\n                    type: \"counter\",\n                    content: content\n                }, function() {\n                    callHooks(\"beforeDOMElementCreation\", {\n                        content: content,\n                        params: params\n                    });\n                    return makeLayersCounterAbstract({\n                        content: content.toString(),\n                        title: title,\n                        extra: {\n                            attributes: attributes,\n                            styles: styles,\n                            classes: [\n                                \"\".concat(config.cssPrefix, \"-layers-counter\")\n                            ].concat(_toConsumableArray(classes))\n                        }\n                    });\n                });\n            }\n        };\n    }\n};\nvar LayersText = {\n    mixout: function mixout() {\n        return {\n            text: function text(content) {\n                var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var _params$transform = params.transform, transform = _params$transform === void 0 ? meaninglessTransform : _params$transform, _params$title = params.title, title = _params$title === void 0 ? null : _params$title, _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes, _params$attributes = params.attributes, attributes = _params$attributes === void 0 ? {} : _params$attributes, _params$styles = params.styles, styles = _params$styles === void 0 ? {} : _params$styles;\n                return domVariants({\n                    type: \"text\",\n                    content: content\n                }, function() {\n                    callHooks(\"beforeDOMElementCreation\", {\n                        content: content,\n                        params: params\n                    });\n                    return makeLayersTextAbstract({\n                        content: content,\n                        transform: _objectSpread2(_objectSpread2({}, meaninglessTransform), transform),\n                        title: title,\n                        extra: {\n                            attributes: attributes,\n                            styles: styles,\n                            classes: [\n                                \"\".concat(config.cssPrefix, \"-layers-text\")\n                            ].concat(_toConsumableArray(classes))\n                        }\n                    });\n                });\n            }\n        };\n    },\n    provides: function provides(providers$$1) {\n        providers$$1.generateLayersText = function(node, nodeMeta) {\n            var title = nodeMeta.title, transform = nodeMeta.transform, extra = nodeMeta.extra;\n            var width = null;\n            var height = null;\n            if (IS_IE) {\n                var computedFontSize = parseInt(getComputedStyle(node).fontSize, 10);\n                var boundingClientRect = node.getBoundingClientRect();\n                width = boundingClientRect.width / computedFontSize;\n                height = boundingClientRect.height / computedFontSize;\n            }\n            if (config.autoA11y && !title) {\n                extra.attributes[\"aria-hidden\"] = \"true\";\n            }\n            return Promise.resolve([\n                node,\n                makeLayersTextAbstract({\n                    content: node.innerHTML,\n                    width: width,\n                    height: height,\n                    transform: transform,\n                    title: title,\n                    extra: extra,\n                    watchable: true\n                })\n            ]);\n        };\n    }\n};\nvar CLEAN_CONTENT_PATTERN = new RegExp('\"', \"ug\");\nvar SECONDARY_UNICODE_RANGE = [\n    1105920,\n    1112319\n];\nfunction hexValueFromContent(content) {\n    var cleaned = content.replace(CLEAN_CONTENT_PATTERN, \"\");\n    var codePoint = codePointAt(cleaned, 0);\n    var isPrependTen = codePoint >= SECONDARY_UNICODE_RANGE[0] && codePoint <= SECONDARY_UNICODE_RANGE[1];\n    var isDoubled = cleaned.length === 2 ? cleaned[0] === cleaned[1] : false;\n    return {\n        value: isDoubled ? toHex(cleaned[0]) : toHex(cleaned),\n        isSecondary: isPrependTen || isDoubled\n    };\n}\nfunction replaceForPosition(node, position) {\n    var pendingAttribute = \"\".concat(DATA_FA_PSEUDO_ELEMENT_PENDING).concat(position.replace(\":\", \"-\"));\n    return new Promise(function(resolve, reject) {\n        if (node.getAttribute(pendingAttribute) !== null) {\n            // This node is already being processed\n            return resolve();\n        }\n        var children = toArray(node.children);\n        var alreadyProcessedPseudoElement = children.filter(function(c) {\n            return c.getAttribute(DATA_FA_PSEUDO_ELEMENT) === position;\n        })[0];\n        var styles = WINDOW.getComputedStyle(node, position);\n        var fontFamily = styles.getPropertyValue(\"font-family\").match(FONT_FAMILY_PATTERN);\n        var fontWeight = styles.getPropertyValue(\"font-weight\");\n        var content = styles.getPropertyValue(\"content\");\n        if (alreadyProcessedPseudoElement && !fontFamily) {\n            // If we've already processed it but the current computed style does not result in a font-family,\n            // that probably means that a class name that was previously present to make the icon has been\n            // removed. So we now should delete the icon.\n            node.removeChild(alreadyProcessedPseudoElement);\n            return resolve();\n        } else if (fontFamily && content !== \"none\" && content !== \"\") {\n            var _content = styles.getPropertyValue(\"content\");\n            var family = ~[\n                \"Sharp\"\n            ].indexOf(fontFamily[2]) ? FAMILY_SHARP : FAMILY_CLASSIC;\n            var prefix = ~[\n                \"Solid\",\n                \"Regular\",\n                \"Light\",\n                \"Thin\",\n                \"Duotone\",\n                \"Brands\",\n                \"Kit\"\n            ].indexOf(fontFamily[2]) ? STYLE_TO_PREFIX[family][fontFamily[2].toLowerCase()] : FONT_WEIGHT_TO_PREFIX[family][fontWeight];\n            var _hexValueFromContent = hexValueFromContent(_content), hexValue = _hexValueFromContent.value, isSecondary = _hexValueFromContent.isSecondary;\n            var isV4 = fontFamily[0].startsWith(\"FontAwesome\");\n            var iconName = byUnicode(prefix, hexValue);\n            var iconIdentifier = iconName;\n            if (isV4) {\n                var iconName4 = byOldUnicode(hexValue);\n                if (iconName4.iconName && iconName4.prefix) {\n                    iconName = iconName4.iconName;\n                    prefix = iconName4.prefix;\n                }\n            } // Only convert the pseudo element in this ::before/::after position into an icon if we haven't\n            // already done so with the same prefix and iconName\n            if (iconName && !isSecondary && (!alreadyProcessedPseudoElement || alreadyProcessedPseudoElement.getAttribute(DATA_PREFIX) !== prefix || alreadyProcessedPseudoElement.getAttribute(DATA_ICON) !== iconIdentifier)) {\n                node.setAttribute(pendingAttribute, iconIdentifier);\n                if (alreadyProcessedPseudoElement) {\n                    // Delete the old one, since we're replacing it with a new one\n                    node.removeChild(alreadyProcessedPseudoElement);\n                }\n                var meta = blankMeta();\n                var extra = meta.extra;\n                extra.attributes[DATA_FA_PSEUDO_ELEMENT] = position;\n                findIcon(iconName, prefix).then(function(main) {\n                    var _abstract = makeInlineSvgAbstract(_objectSpread2(_objectSpread2({}, meta), {}, {\n                        icons: {\n                            main: main,\n                            mask: emptyCanonicalIcon()\n                        },\n                        prefix: prefix,\n                        iconName: iconIdentifier,\n                        extra: extra,\n                        watchable: true\n                    }));\n                    var element = DOCUMENT.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n                    if (position === \"::before\") {\n                        node.insertBefore(element, node.firstChild);\n                    } else {\n                        node.appendChild(element);\n                    }\n                    element.outerHTML = _abstract.map(function(a) {\n                        return toHtml(a);\n                    }).join(\"\\n\");\n                    node.removeAttribute(pendingAttribute);\n                    resolve();\n                }).catch(reject);\n            } else {\n                resolve();\n            }\n        } else {\n            resolve();\n        }\n    });\n}\nfunction replace(node) {\n    return Promise.all([\n        replaceForPosition(node, \"::before\"),\n        replaceForPosition(node, \"::after\")\n    ]);\n}\nfunction processable(node) {\n    return node.parentNode !== document.head && !~TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS.indexOf(node.tagName.toUpperCase()) && !node.getAttribute(DATA_FA_PSEUDO_ELEMENT) && (!node.parentNode || node.parentNode.tagName !== \"svg\");\n}\nfunction searchPseudoElements(root) {\n    if (!IS_DOM) return;\n    return new Promise(function(resolve, reject) {\n        var operations = toArray(root.querySelectorAll(\"*\")).filter(processable).map(replace);\n        var end = perf.begin(\"searchPseudoElements\");\n        disableObservation();\n        Promise.all(operations).then(function() {\n            end();\n            enableObservation();\n            resolve();\n        }).catch(function() {\n            end();\n            enableObservation();\n            reject();\n        });\n    });\n}\nvar PseudoElements = {\n    hooks: function hooks() {\n        return {\n            mutationObserverCallbacks: function mutationObserverCallbacks(accumulator) {\n                accumulator.pseudoElementsCallback = searchPseudoElements;\n                return accumulator;\n            }\n        };\n    },\n    provides: function provides(providers$$1) {\n        providers$$1.pseudoElements2svg = function(params) {\n            var _params$node = params.node, node = _params$node === void 0 ? DOCUMENT : _params$node;\n            if (config.searchPseudoElements) {\n                searchPseudoElements(node);\n            }\n        };\n    }\n};\nvar _unwatched = false;\nvar MutationObserver$1 = {\n    mixout: function mixout() {\n        return {\n            dom: {\n                unwatch: function unwatch() {\n                    disableObservation();\n                    _unwatched = true;\n                }\n            }\n        };\n    },\n    hooks: function hooks() {\n        return {\n            bootstrap: function bootstrap() {\n                observe(chainHooks(\"mutationObserverCallbacks\", {}));\n            },\n            noAuto: function noAuto() {\n                disconnect();\n            },\n            watch: function watch(params) {\n                var observeMutationsRoot = params.observeMutationsRoot;\n                if (_unwatched) {\n                    enableObservation();\n                } else {\n                    observe(chainHooks(\"mutationObserverCallbacks\", {\n                        observeMutationsRoot: observeMutationsRoot\n                    }));\n                }\n            }\n        };\n    }\n};\nvar parseTransformString = function parseTransformString(transformString) {\n    var transform = {\n        size: 16,\n        x: 0,\n        y: 0,\n        flipX: false,\n        flipY: false,\n        rotate: 0\n    };\n    return transformString.toLowerCase().split(\" \").reduce(function(acc, n) {\n        var parts = n.toLowerCase().split(\"-\");\n        var first = parts[0];\n        var rest = parts.slice(1).join(\"-\");\n        if (first && rest === \"h\") {\n            acc.flipX = true;\n            return acc;\n        }\n        if (first && rest === \"v\") {\n            acc.flipY = true;\n            return acc;\n        }\n        rest = parseFloat(rest);\n        if (isNaN(rest)) {\n            return acc;\n        }\n        switch(first){\n            case \"grow\":\n                acc.size = acc.size + rest;\n                break;\n            case \"shrink\":\n                acc.size = acc.size - rest;\n                break;\n            case \"left\":\n                acc.x = acc.x - rest;\n                break;\n            case \"right\":\n                acc.x = acc.x + rest;\n                break;\n            case \"up\":\n                acc.y = acc.y - rest;\n                break;\n            case \"down\":\n                acc.y = acc.y + rest;\n                break;\n            case \"rotate\":\n                acc.rotate = acc.rotate + rest;\n                break;\n        }\n        return acc;\n    }, transform);\n};\nvar PowerTransforms = {\n    mixout: function mixout() {\n        return {\n            parse: {\n                transform: function transform(transformString) {\n                    return parseTransformString(transformString);\n                }\n            }\n        };\n    },\n    hooks: function hooks() {\n        return {\n            parseNodeAttributes: function parseNodeAttributes(accumulator, node) {\n                var transformString = node.getAttribute(\"data-fa-transform\");\n                if (transformString) {\n                    accumulator.transform = parseTransformString(transformString);\n                }\n                return accumulator;\n            }\n        };\n    },\n    provides: function provides(providers) {\n        providers.generateAbstractTransformGrouping = function(_ref) {\n            var main = _ref.main, transform = _ref.transform, containerWidth = _ref.containerWidth, iconWidth = _ref.iconWidth;\n            var outer = {\n                transform: \"translate(\".concat(containerWidth / 2, \" 256)\")\n            };\n            var innerTranslate = \"translate(\".concat(transform.x * 32, \", \").concat(transform.y * 32, \") \");\n            var innerScale = \"scale(\".concat(transform.size / 16 * (transform.flipX ? -1 : 1), \", \").concat(transform.size / 16 * (transform.flipY ? -1 : 1), \") \");\n            var innerRotate = \"rotate(\".concat(transform.rotate, \" 0 0)\");\n            var inner = {\n                transform: \"\".concat(innerTranslate, \" \").concat(innerScale, \" \").concat(innerRotate)\n            };\n            var path = {\n                transform: \"translate(\".concat(iconWidth / 2 * -1, \" -256)\")\n            };\n            var operations = {\n                outer: outer,\n                inner: inner,\n                path: path\n            };\n            return {\n                tag: \"g\",\n                attributes: _objectSpread2({}, operations.outer),\n                children: [\n                    {\n                        tag: \"g\",\n                        attributes: _objectSpread2({}, operations.inner),\n                        children: [\n                            {\n                                tag: main.icon.tag,\n                                children: main.icon.children,\n                                attributes: _objectSpread2(_objectSpread2({}, main.icon.attributes), operations.path)\n                            }\n                        ]\n                    }\n                ]\n            };\n        };\n    }\n};\nvar ALL_SPACE = {\n    x: 0,\n    y: 0,\n    width: \"100%\",\n    height: \"100%\"\n};\nfunction fillBlack(_abstract) {\n    var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (_abstract.attributes && (_abstract.attributes.fill || force)) {\n        _abstract.attributes.fill = \"black\";\n    }\n    return _abstract;\n}\nfunction deGroup(_abstract2) {\n    if (_abstract2.tag === \"g\") {\n        return _abstract2.children;\n    } else {\n        return [\n            _abstract2\n        ];\n    }\n}\nvar Masks = {\n    hooks: function hooks() {\n        return {\n            parseNodeAttributes: function parseNodeAttributes(accumulator, node) {\n                var maskData = node.getAttribute(\"data-fa-mask\");\n                var mask = !maskData ? emptyCanonicalIcon() : getCanonicalIcon(maskData.split(\" \").map(function(i) {\n                    return i.trim();\n                }));\n                if (!mask.prefix) {\n                    mask.prefix = getDefaultUsablePrefix();\n                }\n                accumulator.mask = mask;\n                accumulator.maskId = node.getAttribute(\"data-fa-mask-id\");\n                return accumulator;\n            }\n        };\n    },\n    provides: function provides(providers) {\n        providers.generateAbstractMask = function(_ref) {\n            var children = _ref.children, attributes = _ref.attributes, main = _ref.main, mask = _ref.mask, explicitMaskId = _ref.maskId, transform = _ref.transform;\n            var mainWidth = main.width, mainPath = main.icon;\n            var maskWidth = mask.width, maskPath = mask.icon;\n            var trans = transformForSvg({\n                transform: transform,\n                containerWidth: maskWidth,\n                iconWidth: mainWidth\n            });\n            var maskRect = {\n                tag: \"rect\",\n                attributes: _objectSpread2(_objectSpread2({}, ALL_SPACE), {}, {\n                    fill: \"white\"\n                })\n            };\n            var maskInnerGroupChildrenMixin = mainPath.children ? {\n                children: mainPath.children.map(fillBlack)\n            } : {};\n            var maskInnerGroup = {\n                tag: \"g\",\n                attributes: _objectSpread2({}, trans.inner),\n                children: [\n                    fillBlack(_objectSpread2({\n                        tag: mainPath.tag,\n                        attributes: _objectSpread2(_objectSpread2({}, mainPath.attributes), trans.path)\n                    }, maskInnerGroupChildrenMixin))\n                ]\n            };\n            var maskOuterGroup = {\n                tag: \"g\",\n                attributes: _objectSpread2({}, trans.outer),\n                children: [\n                    maskInnerGroup\n                ]\n            };\n            var maskId = \"mask-\".concat(explicitMaskId || nextUniqueId());\n            var clipId = \"clip-\".concat(explicitMaskId || nextUniqueId());\n            var maskTag = {\n                tag: \"mask\",\n                attributes: _objectSpread2(_objectSpread2({}, ALL_SPACE), {}, {\n                    id: maskId,\n                    maskUnits: \"userSpaceOnUse\",\n                    maskContentUnits: \"userSpaceOnUse\"\n                }),\n                children: [\n                    maskRect,\n                    maskOuterGroup\n                ]\n            };\n            var defs = {\n                tag: \"defs\",\n                children: [\n                    {\n                        tag: \"clipPath\",\n                        attributes: {\n                            id: clipId\n                        },\n                        children: deGroup(maskPath)\n                    },\n                    maskTag\n                ]\n            };\n            children.push(defs, {\n                tag: \"rect\",\n                attributes: _objectSpread2({\n                    fill: \"currentColor\",\n                    \"clip-path\": \"url(#\".concat(clipId, \")\"),\n                    mask: \"url(#\".concat(maskId, \")\")\n                }, ALL_SPACE)\n            });\n            return {\n                children: children,\n                attributes: attributes\n            };\n        };\n    }\n};\nvar MissingIconIndicator = {\n    provides: function provides(providers) {\n        var reduceMotion = false;\n        if (WINDOW.matchMedia) {\n            reduceMotion = WINDOW.matchMedia(\"(prefers-reduced-motion: reduce)\").matches;\n        }\n        providers.missingIconAbstract = function() {\n            var gChildren = [];\n            var FILL = {\n                fill: \"currentColor\"\n            };\n            var ANIMATION_BASE = {\n                attributeType: \"XML\",\n                repeatCount: \"indefinite\",\n                dur: \"2s\"\n            }; // Ring\n            gChildren.push({\n                tag: \"path\",\n                attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {\n                    d: \"M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z\"\n                })\n            });\n            var OPACITY_ANIMATE = _objectSpread2(_objectSpread2({}, ANIMATION_BASE), {}, {\n                attributeName: \"opacity\"\n            });\n            var dot = {\n                tag: \"circle\",\n                attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {\n                    cx: \"256\",\n                    cy: \"364\",\n                    r: \"28\"\n                }),\n                children: []\n            };\n            if (!reduceMotion) {\n                dot.children.push({\n                    tag: \"animate\",\n                    attributes: _objectSpread2(_objectSpread2({}, ANIMATION_BASE), {}, {\n                        attributeName: \"r\",\n                        values: \"28;14;28;28;14;28;\"\n                    })\n                }, {\n                    tag: \"animate\",\n                    attributes: _objectSpread2(_objectSpread2({}, OPACITY_ANIMATE), {}, {\n                        values: \"1;0;1;1;0;1;\"\n                    })\n                });\n            }\n            gChildren.push(dot);\n            gChildren.push({\n                tag: \"path\",\n                attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {\n                    opacity: \"1\",\n                    d: \"M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z\"\n                }),\n                children: reduceMotion ? [] : [\n                    {\n                        tag: \"animate\",\n                        attributes: _objectSpread2(_objectSpread2({}, OPACITY_ANIMATE), {}, {\n                            values: \"1;0;0;0;0;1;\"\n                        })\n                    }\n                ]\n            });\n            if (!reduceMotion) {\n                // Exclamation\n                gChildren.push({\n                    tag: \"path\",\n                    attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {\n                        opacity: \"0\",\n                        d: \"M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z\"\n                    }),\n                    children: [\n                        {\n                            tag: \"animate\",\n                            attributes: _objectSpread2(_objectSpread2({}, OPACITY_ANIMATE), {}, {\n                                values: \"0;0;1;1;0;0;\"\n                            })\n                        }\n                    ]\n                });\n            }\n            return {\n                tag: \"g\",\n                attributes: {\n                    \"class\": \"missing\"\n                },\n                children: gChildren\n            };\n        };\n    }\n};\nvar SvgSymbols = {\n    hooks: function hooks() {\n        return {\n            parseNodeAttributes: function parseNodeAttributes(accumulator, node) {\n                var symbolData = node.getAttribute(\"data-fa-symbol\");\n                var symbol = symbolData === null ? false : symbolData === \"\" ? true : symbolData;\n                accumulator[\"symbol\"] = symbol;\n                return accumulator;\n            }\n        };\n    }\n};\nvar plugins = [\n    InjectCSS,\n    ReplaceElements,\n    Layers,\n    LayersCounter,\n    LayersText,\n    PseudoElements,\n    MutationObserver$1,\n    PowerTransforms,\n    Masks,\n    MissingIconIndicator,\n    SvgSymbols\n];\nregisterPlugins(plugins, {\n    mixoutsTo: api\n});\nvar noAuto$1 = api.noAuto;\nvar config$1 = api.config;\nvar library$1 = api.library;\nvar dom$1 = api.dom;\nvar parse$1 = api.parse;\nvar findIconDefinition$1 = api.findIconDefinition;\nvar toHtml$1 = api.toHtml;\nvar icon = api.icon;\nvar layer = api.layer;\nvar text = api.text;\nvar counter = api.counter;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLXN2Zy1jb3JlL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxTQUFTQSxRQUFRQyxNQUFNLEVBQUVDLGNBQWM7SUFDckMsSUFBSUMsT0FBT0MsT0FBT0QsSUFBSSxDQUFDRjtJQUV2QixJQUFJRyxPQUFPQyxxQkFBcUIsRUFBRTtRQUNoQyxJQUFJQyxVQUFVRixPQUFPQyxxQkFBcUIsQ0FBQ0o7UUFDM0NDLGtCQUFtQkksQ0FBQUEsVUFBVUEsUUFBUUMsTUFBTSxDQUFDLFNBQVVDLEdBQUc7WUFDdkQsT0FBT0osT0FBT0ssd0JBQXdCLENBQUNSLFFBQVFPLEtBQUtFLFVBQVU7UUFDaEUsRUFBQyxHQUFJUCxLQUFLUSxJQUFJLENBQUNDLEtBQUssQ0FBQ1QsTUFBTUc7SUFDN0I7SUFFQSxPQUFPSDtBQUNUO0FBRUEsU0FBU1UsZUFBZUMsTUFBTTtJQUM1QixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUMsVUFBVUMsTUFBTSxFQUFFRixJQUFLO1FBQ3pDLElBQUlHLFNBQVMsUUFBUUYsU0FBUyxDQUFDRCxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0QsRUFBRSxHQUFHLENBQUM7UUFDcERBLElBQUksSUFBSWYsUUFBUUksT0FBT2MsU0FBUyxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO1lBQ3ZEQyxnQkFBZ0JQLFFBQVFNLEtBQUtGLE1BQU0sQ0FBQ0UsSUFBSTtRQUMxQyxLQUFLaEIsT0FBT2tCLHlCQUF5QixHQUFHbEIsT0FBT21CLGdCQUFnQixDQUFDVCxRQUFRVixPQUFPa0IseUJBQXlCLENBQUNKLFdBQVdsQixRQUFRSSxPQUFPYyxTQUFTQyxPQUFPLENBQUMsU0FBVUMsR0FBRztZQUMvSmhCLE9BQU9vQixjQUFjLENBQUNWLFFBQVFNLEtBQUtoQixPQUFPSyx3QkFBd0IsQ0FBQ1MsUUFBUUU7UUFDN0U7SUFDRjtJQUVBLE9BQU9OO0FBQ1Q7QUFFQSxTQUFTVyxRQUFRQyxHQUFHO0lBQ2xCO0lBRUEsT0FBT0QsVUFBVSxjQUFjLE9BQU9FLFVBQVUsWUFBWSxPQUFPQSxPQUFPQyxRQUFRLEdBQUcsU0FBVUYsR0FBRztRQUNoRyxPQUFPLE9BQU9BO0lBQ2hCLElBQUksU0FBVUEsR0FBRztRQUNmLE9BQU9BLE9BQU8sY0FBYyxPQUFPQyxVQUFVRCxJQUFJRyxXQUFXLEtBQUtGLFVBQVVELFFBQVFDLE9BQU9HLFNBQVMsR0FBRyxXQUFXLE9BQU9KO0lBQzFILEdBQUdELFFBQVFDO0FBQ2I7QUFFQSxTQUFTSztJQUNQQSxjQUFjLFNBQVVDLEVBQUUsRUFBRUMsTUFBTTtRQUNoQyxPQUFPLElBQUlDLFlBQVlGLElBQUksS0FBSyxHQUFHQztJQUNyQztJQUVBLElBQUlFLFNBQVNDLE9BQU9OLFNBQVMsRUFDekJPLFVBQVUsSUFBSUM7SUFFbEIsU0FBU0osWUFBWUYsRUFBRSxFQUFFTyxLQUFLLEVBQUVOLE1BQU07UUFDcEMsSUFBSU8sUUFBUSxJQUFJSixPQUFPSixJQUFJTztRQUUzQixPQUFPRixRQUFRSSxHQUFHLENBQUNELE9BQU9QLFVBQVVJLFFBQVFLLEdBQUcsQ0FBQ1YsTUFBTVcsZ0JBQWdCSCxPQUFPTixZQUFZSixTQUFTO0lBQ3BHO0lBRUEsU0FBU2MsWUFBWUMsTUFBTSxFQUFFYixFQUFFO1FBQzdCLElBQUljLElBQUlULFFBQVFLLEdBQUcsQ0FBQ1Y7UUFFcEIsT0FBTzVCLE9BQU9ELElBQUksQ0FBQzJDLEdBQUdDLE1BQU0sQ0FBQyxTQUFVZCxNQUFNLEVBQUVlLElBQUk7WUFDakQsT0FBT2YsTUFBTSxDQUFDZSxLQUFLLEdBQUdILE1BQU0sQ0FBQ0MsQ0FBQyxDQUFDRSxLQUFLLENBQUMsRUFBRWY7UUFDekMsR0FBRzdCLE9BQU82QyxNQUFNLENBQUM7SUFDbkI7SUFFQSxPQUFPQyxVQUFVaEIsYUFBYUUsU0FBU0YsWUFBWUosU0FBUyxDQUFDcUIsSUFBSSxHQUFHLFNBQVVDLEdBQUc7UUFDL0UsSUFBSVAsU0FBU1YsT0FBT2dCLElBQUksQ0FBQ0UsSUFBSSxDQUFDLElBQUksRUFBRUQ7UUFFcEMsT0FBT1AsVUFBV0EsQ0FBQUEsT0FBT1osTUFBTSxHQUFHVyxZQUFZQyxRQUFRLElBQUksSUFBSUE7SUFDaEUsR0FBR1gsWUFBWUosU0FBUyxDQUFDSCxPQUFPMkIsT0FBTyxDQUFDLEdBQUcsU0FBVUYsR0FBRyxFQUFFRyxZQUFZO1FBQ3BFLElBQUksWUFBWSxPQUFPQSxjQUFjO1lBQ25DLElBQUl0QixTQUFTSSxRQUFRSyxHQUFHLENBQUMsSUFBSTtZQUU3QixPQUFPUCxNQUFNLENBQUNSLE9BQU8yQixPQUFPLENBQUMsQ0FBQ0QsSUFBSSxDQUFDLElBQUksRUFBRUQsS0FBS0csYUFBYUQsT0FBTyxDQUFDLGdCQUFnQixTQUFVRSxDQUFDLEVBQUVSLElBQUk7Z0JBQ2xHLE9BQU8sTUFBTWYsTUFBTSxDQUFDZSxLQUFLO1lBQzNCO1FBQ0Y7UUFFQSxJQUFJLGNBQWMsT0FBT08sY0FBYztZQUNyQyxJQUFJZixRQUFRLElBQUk7WUFFaEIsT0FBT0wsTUFBTSxDQUFDUixPQUFPMkIsT0FBTyxDQUFDLENBQUNELElBQUksQ0FBQyxJQUFJLEVBQUVELEtBQUs7Z0JBQzVDLElBQUlLLE9BQU96QztnQkFDWCxPQUFPLFlBQVksT0FBT3lDLElBQUksQ0FBQ0EsS0FBS3hDLE1BQU0sR0FBRyxFQUFFLElBQUksQ0FBQ3dDLE9BQU8sRUFBRSxDQUFDQyxLQUFLLENBQUNMLElBQUksQ0FBQ0ksS0FBSSxFQUFHOUMsSUFBSSxDQUFDaUMsWUFBWWEsTUFBTWpCLFNBQVNlLGFBQWEzQyxLQUFLLENBQUMsSUFBSSxFQUFFNkM7WUFDM0k7UUFDRjtRQUVBLE9BQU90QixNQUFNLENBQUNSLE9BQU8yQixPQUFPLENBQUMsQ0FBQ0QsSUFBSSxDQUFDLElBQUksRUFBRUQsS0FBS0c7SUFDaEQsR0FBR3hCLFlBQVluQixLQUFLLENBQUMsSUFBSSxFQUFFSTtBQUM3QjtBQUVBLFNBQVMyQyxnQkFBZ0JDLFFBQVEsRUFBRUMsV0FBVztJQUM1QyxJQUFJLENBQUVELENBQUFBLG9CQUFvQkMsV0FBVSxHQUFJO1FBQ3RDLE1BQU0sSUFBSUMsVUFBVTtJQUN0QjtBQUNGO0FBRUEsU0FBU0Msa0JBQWtCakQsTUFBTSxFQUFFa0QsS0FBSztJQUN0QyxJQUFLLElBQUlqRCxJQUFJLEdBQUdBLElBQUlpRCxNQUFNL0MsTUFBTSxFQUFFRixJQUFLO1FBQ3JDLElBQUlrRCxhQUFhRCxLQUFLLENBQUNqRCxFQUFFO1FBQ3pCa0QsV0FBV3ZELFVBQVUsR0FBR3VELFdBQVd2RCxVQUFVLElBQUk7UUFDakR1RCxXQUFXQyxZQUFZLEdBQUc7UUFDMUIsSUFBSSxXQUFXRCxZQUFZQSxXQUFXRSxRQUFRLEdBQUc7UUFDakQvRCxPQUFPb0IsY0FBYyxDQUFDVixRQUFRbUQsV0FBVzdDLEdBQUcsRUFBRTZDO0lBQ2hEO0FBQ0Y7QUFFQSxTQUFTRyxhQUFhUCxXQUFXLEVBQUVRLFVBQVUsRUFBRUMsV0FBVztJQUN4RCxJQUFJRCxZQUFZTixrQkFBa0JGLFlBQVkvQixTQUFTLEVBQUV1QztJQUN6RCxJQUFJQyxhQUFhUCxrQkFBa0JGLGFBQWFTO0lBQ2hEbEUsT0FBT29CLGNBQWMsQ0FBQ3FDLGFBQWEsYUFBYTtRQUM5Q00sVUFBVTtJQUNaO0lBQ0EsT0FBT047QUFDVDtBQUVBLFNBQVN4QyxnQkFBZ0JLLEdBQUcsRUFBRU4sR0FBRyxFQUFFbUQsS0FBSztJQUN0QyxJQUFJbkQsT0FBT00sS0FBSztRQUNkdEIsT0FBT29CLGNBQWMsQ0FBQ0UsS0FBS04sS0FBSztZQUM5Qm1ELE9BQU9BO1lBQ1A3RCxZQUFZO1lBQ1p3RCxjQUFjO1lBQ2RDLFVBQVU7UUFDWjtJQUNGLE9BQU87UUFDTHpDLEdBQUcsQ0FBQ04sSUFBSSxHQUFHbUQ7SUFDYjtJQUVBLE9BQU83QztBQUNUO0FBRUEsU0FBU3dCLFVBQVVzQixRQUFRLEVBQUVDLFVBQVU7SUFDckMsSUFBSSxPQUFPQSxlQUFlLGNBQWNBLGVBQWUsTUFBTTtRQUMzRCxNQUFNLElBQUlYLFVBQVU7SUFDdEI7SUFFQVUsU0FBUzFDLFNBQVMsR0FBRzFCLE9BQU82QyxNQUFNLENBQUN3QixjQUFjQSxXQUFXM0MsU0FBUyxFQUFFO1FBQ3JFRCxhQUFhO1lBQ1gwQyxPQUFPQztZQUNQTCxVQUFVO1lBQ1ZELGNBQWM7UUFDaEI7SUFDRjtJQUNBOUQsT0FBT29CLGNBQWMsQ0FBQ2dELFVBQVUsYUFBYTtRQUMzQ0wsVUFBVTtJQUNaO0lBQ0EsSUFBSU0sWUFBWTlCLGdCQUFnQjZCLFVBQVVDO0FBQzVDO0FBRUEsU0FBUzlCLGdCQUFnQitCLENBQUMsRUFBRUMsQ0FBQztJQUMzQmhDLGtCQUFrQnZDLE9BQU93RSxjQUFjLElBQUksU0FBU2pDLGdCQUFnQitCLENBQUMsRUFBRUMsQ0FBQztRQUN0RUQsRUFBRUcsU0FBUyxHQUFHRjtRQUNkLE9BQU9EO0lBQ1Q7SUFFQSxPQUFPL0IsZ0JBQWdCK0IsR0FBR0M7QUFDNUI7QUFFQSxTQUFTRyxlQUFlQyxHQUFHLEVBQUVoRSxDQUFDO0lBQzVCLE9BQU9pRSxnQkFBZ0JELFFBQVFFLHNCQUFzQkYsS0FBS2hFLE1BQU1tRSw0QkFBNEJILEtBQUtoRSxNQUFNb0U7QUFDekc7QUFFQSxTQUFTQyxtQkFBbUJMLEdBQUc7SUFDN0IsT0FBT00sbUJBQW1CTixRQUFRTyxpQkFBaUJQLFFBQVFHLDRCQUE0QkgsUUFBUVE7QUFDakc7QUFFQSxTQUFTRixtQkFBbUJOLEdBQUc7SUFDN0IsSUFBSVMsTUFBTUMsT0FBTyxDQUFDVixNQUFNLE9BQU9XLGtCQUFrQlg7QUFDbkQ7QUFFQSxTQUFTQyxnQkFBZ0JELEdBQUc7SUFDMUIsSUFBSVMsTUFBTUMsT0FBTyxDQUFDVixNQUFNLE9BQU9BO0FBQ2pDO0FBRUEsU0FBU08saUJBQWlCSyxJQUFJO0lBQzVCLElBQUksT0FBT2hFLFdBQVcsZUFBZWdFLElBQUksQ0FBQ2hFLE9BQU9DLFFBQVEsQ0FBQyxJQUFJLFFBQVErRCxJQUFJLENBQUMsYUFBYSxJQUFJLE1BQU0sT0FBT0gsTUFBTUksSUFBSSxDQUFDRDtBQUN0SDtBQUVBLFNBQVNWLHNCQUFzQkYsR0FBRyxFQUFFaEUsQ0FBQztJQUNuQyxJQUFJOEUsS0FBS2QsT0FBTyxPQUFPLE9BQU8sT0FBT3BELFdBQVcsZUFBZW9ELEdBQUcsQ0FBQ3BELE9BQU9DLFFBQVEsQ0FBQyxJQUFJbUQsR0FBRyxDQUFDLGFBQWE7SUFFeEcsSUFBSWMsTUFBTSxNQUFNO0lBQ2hCLElBQUlDLE9BQU8sRUFBRTtJQUNiLElBQUlDLEtBQUs7SUFDVCxJQUFJQyxLQUFLO0lBRVQsSUFBSUMsSUFBSUM7SUFFUixJQUFJO1FBQ0YsSUFBS0wsS0FBS0EsR0FBR3hDLElBQUksQ0FBQzBCLE1BQU0sQ0FBRWdCLENBQUFBLEtBQUssQ0FBQ0UsS0FBS0osR0FBR00sSUFBSSxFQUFDLEVBQUdDLElBQUksR0FBR0wsS0FBSyxLQUFNO1lBQ2hFRCxLQUFLbkYsSUFBSSxDQUFDc0YsR0FBRzFCLEtBQUs7WUFFbEIsSUFBSXhELEtBQUsrRSxLQUFLN0UsTUFBTSxLQUFLRixHQUFHO1FBQzlCO0lBQ0YsRUFBRSxPQUFPc0YsS0FBSztRQUNaTCxLQUFLO1FBQ0xFLEtBQUtHO0lBQ1AsU0FBVTtRQUNSLElBQUk7WUFDRixJQUFJLENBQUNOLE1BQU1GLEVBQUUsQ0FBQyxTQUFTLElBQUksTUFBTUEsRUFBRSxDQUFDLFNBQVM7UUFDL0MsU0FBVTtZQUNSLElBQUlHLElBQUksTUFBTUU7UUFDaEI7SUFDRjtJQUVBLE9BQU9KO0FBQ1Q7QUFFQSxTQUFTWiw0QkFBNEJSLENBQUMsRUFBRTRCLE1BQU07SUFDNUMsSUFBSSxDQUFDNUIsR0FBRztJQUNSLElBQUksT0FBT0EsTUFBTSxVQUFVLE9BQU9nQixrQkFBa0JoQixHQUFHNEI7SUFDdkQsSUFBSUMsSUFBSW5HLE9BQU8wQixTQUFTLENBQUMwRSxRQUFRLENBQUNuRCxJQUFJLENBQUNxQixHQUFHaEIsS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUNwRCxJQUFJNkMsTUFBTSxZQUFZN0IsRUFBRTdDLFdBQVcsRUFBRTBFLElBQUk3QixFQUFFN0MsV0FBVyxDQUFDbUIsSUFBSTtJQUMzRCxJQUFJdUQsTUFBTSxTQUFTQSxNQUFNLE9BQU8sT0FBT2YsTUFBTUksSUFBSSxDQUFDbEI7SUFDbEQsSUFBSTZCLE1BQU0sZUFBZSwyQ0FBMkNFLElBQUksQ0FBQ0YsSUFBSSxPQUFPYixrQkFBa0JoQixHQUFHNEI7QUFDM0c7QUFFQSxTQUFTWixrQkFBa0JYLEdBQUcsRUFBRTJCLEdBQUc7SUFDakMsSUFBSUEsT0FBTyxRQUFRQSxNQUFNM0IsSUFBSTlELE1BQU0sRUFBRXlGLE1BQU0zQixJQUFJOUQsTUFBTTtJQUVyRCxJQUFLLElBQUlGLElBQUksR0FBRzRGLE9BQU8sSUFBSW5CLE1BQU1rQixNQUFNM0YsSUFBSTJGLEtBQUszRixJQUFLNEYsSUFBSSxDQUFDNUYsRUFBRSxHQUFHZ0UsR0FBRyxDQUFDaEUsRUFBRTtJQUVyRSxPQUFPNEY7QUFDVDtBQUVBLFNBQVNwQjtJQUNQLE1BQU0sSUFBSXpCLFVBQVU7QUFDdEI7QUFFQSxTQUFTcUI7SUFDUCxNQUFNLElBQUlyQixVQUFVO0FBQ3RCO0FBRUEsSUFBSThDLE9BQU8sU0FBU0EsUUFBUTtBQUU1QixJQUFJQyxVQUFVLENBQUM7QUFDZixJQUFJQyxZQUFZLENBQUM7QUFDakIsSUFBSUMscUJBQXFCO0FBQ3pCLElBQUlDLGVBQWU7SUFDakJDLE1BQU1MO0lBQ05NLFNBQVNOO0FBQ1g7QUFFQSxJQUFJO0lBQ0YsSUFBSSxLQUFrQixFQUFhQyxFQUFpQk07SUFDcEQsSUFBSSxPQUFPQyxhQUFhLGFBQWFOLFlBQVlNO0lBQ2pELElBQUksT0FBT0MscUJBQXFCLGFBQWFOLHFCQUFxQk07SUFDbEUsSUFBSSxPQUFPQyxnQkFBZ0IsYUFBYU4sZUFBZU07QUFDekQsRUFBRSxPQUFPQyxHQUFHLENBQUM7QUFFYixJQUFJQyxPQUFPWCxRQUFRWSxTQUFTLElBQUksQ0FBQyxHQUM3QkMsaUJBQWlCRixLQUFLRyxTQUFTLEVBQy9CQSxZQUFZRCxtQkFBbUIsS0FBSyxJQUFJLEtBQUtBO0FBQ2pELElBQUlFLFNBQVNmO0FBQ2IsSUFBSWdCLFdBQVdmO0FBQ2YsSUFBSWdCLG9CQUFvQmY7QUFDeEIsSUFBSWdCLGNBQWNmO0FBQ2xCLElBQUlnQixhQUFhLENBQUMsQ0FBQ0osT0FBT1IsUUFBUTtBQUNsQyxJQUFJYSxTQUFTLENBQUMsQ0FBQ0osU0FBU0ssZUFBZSxJQUFJLENBQUMsQ0FBQ0wsU0FBU00sSUFBSSxJQUFJLE9BQU9OLFNBQVNPLGdCQUFnQixLQUFLLGNBQWMsT0FBT1AsU0FBU1EsYUFBYSxLQUFLO0FBQ25KLElBQUlDLFFBQVEsQ0FBQ1gsVUFBVVksT0FBTyxDQUFDLFdBQVcsQ0FBQ1osVUFBVVksT0FBTyxDQUFDO0FBRTdELElBQUlDLGNBQWNDLGVBQWVDLGVBQWVDLGVBQWVDO0FBRS9ELElBQUlDLHVCQUF1QjtBQUMzQixJQUFJQyxnQkFBZ0I7QUFDcEIsSUFBSUMscUJBQXFCO0FBQ3pCLElBQUlDLDRCQUE0QjtBQUNoQyxJQUFJQyxnQkFBZ0I7QUFDcEIsSUFBSUMseUJBQXlCO0FBQzdCLElBQUlDLGlDQUFpQztBQUNyQyxJQUFJQyxjQUFjO0FBQ2xCLElBQUlDLFlBQVk7QUFDaEIsSUFBSUMsOEJBQThCO0FBQ2xDLElBQUlDLDBCQUEwQjtBQUM5QixJQUFJQyxzQ0FBc0M7SUFBQztJQUFRO0lBQVE7SUFBUztDQUFTO0FBQzdFLElBQUlDLGFBQWE7SUFDZixJQUFJO1FBQ0YsT0FBT0Msa0JBQXlCO0lBQ2xDLEVBQUUsT0FBT25DLEdBQUc7UUFDVixPQUFPO0lBQ1Q7QUFDRjtBQUNBLElBQUlvQyxpQkFBaUI7QUFDckIsSUFBSUMsZUFBZTtBQUNuQixJQUFJQyxXQUFXO0lBQUNGO0lBQWdCQztDQUFhO0FBRTdDLFNBQVNFLFlBQVlwSSxHQUFHO0lBQ3RCLDREQUE0RDtJQUM1RCxPQUFPLElBQUlxSSxNQUFNckksS0FBSztRQUNwQmdCLEtBQUssU0FBU0EsSUFBSTVCLE1BQU0sRUFBRWtKLElBQUk7WUFDNUIsT0FBT0EsUUFBUWxKLFNBQVNBLE1BQU0sQ0FBQ2tKLEtBQUssR0FBR2xKLE1BQU0sQ0FBQzZJLGVBQWU7UUFDL0Q7SUFDRjtBQUNGO0FBQ0EsSUFBSU0sa0JBQWtCSCxZQUFhdEIsQ0FBQUEsZUFBZSxDQUFDLEdBQUduSCxnQkFBZ0JtSCxjQUFjbUIsZ0JBQWdCO0lBQ2xHLE1BQU07SUFDTixPQUFPO0lBQ1AsWUFBWTtJQUNaLE9BQU87SUFDUCxjQUFjO0lBQ2QsT0FBTztJQUNQLFlBQVk7SUFDWixPQUFPO0lBQ1AsV0FBVztJQUNYLE9BQU87SUFDUCxjQUFjO0lBQ2QsT0FBTztJQUNQLGFBQWE7SUFDYixPQUFPO0lBQ1AsVUFBVTtBQUNaLElBQUl0SSxnQkFBZ0JtSCxjQUFjb0IsY0FBYztJQUM5QyxNQUFNO0lBQ04sUUFBUTtJQUNSLFlBQVk7SUFDWixRQUFRO0lBQ1IsY0FBYztJQUNkLFFBQVE7SUFDUixZQUFZO0FBQ2QsSUFBSXBCLFlBQVc7QUFDZixJQUFJMEIsa0JBQWtCSixZQUFhckIsQ0FBQUEsZ0JBQWdCLENBQUMsR0FBR3BILGdCQUFnQm9ILGVBQWVrQixnQkFBZ0I7SUFDcEcsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztBQUNULElBQUl0SSxnQkFBZ0JvSCxlQUFlbUIsY0FBYztJQUMvQyxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7QUFDWCxJQUFJbkIsYUFBWTtBQUNoQixJQUFJMEIsdUJBQXVCTCxZQUFhcEIsQ0FBQUEsZ0JBQWdCLENBQUMsR0FBR3JILGdCQUFnQnFILGVBQWVpQixnQkFBZ0I7SUFDekcsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztBQUNULElBQUl0SSxnQkFBZ0JxSCxlQUFla0IsY0FBYztJQUMvQyxRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7QUFDVixJQUFJbEIsYUFBWTtBQUNoQixJQUFJMEIsdUJBQXVCTixZQUFhbkIsQ0FBQUEsZ0JBQWdCLENBQUMsR0FBR3RILGdCQUFnQnNILGVBQWVnQixnQkFBZ0I7SUFDekcsYUFBYTtJQUNiLGNBQWM7SUFDZCxVQUFVO0lBQ1YsWUFBWTtJQUNaLGNBQWM7SUFDZCxZQUFZO0lBQ1osV0FBVztBQUNiLElBQUl0SSxnQkFBZ0JzSCxlQUFlaUIsY0FBYztJQUMvQyxZQUFZO0lBQ1osY0FBYztJQUNkLFlBQVk7QUFDZCxJQUFJakIsYUFBWTtBQUNoQixJQUFJMEIsZ0NBQWdDLHFDQUFxQyx3Q0FBd0M7QUFFakgsSUFBSUMsd0JBQXdCO0FBQzVCLElBQUlDLHNCQUFzQjtBQUMxQixJQUFJQyx3QkFBd0JWLFlBQWFsQixDQUFBQSxnQkFBZ0IsQ0FBQyxHQUFHdkgsZ0JBQWdCdUgsZUFBZWUsZ0JBQWdCO0lBQzFHLE9BQU87SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0FBQ1QsSUFBSXRJLGdCQUFnQnVILGVBQWVnQixjQUFjO0lBQy9DLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztBQUNULElBQUloQixhQUFZO0FBQ2hCLElBQUk2QixXQUFXO0lBQUM7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7Q0FBRztBQUM5QyxJQUFJQyxjQUFjRCxTQUFTRSxNQUFNLENBQUM7SUFBQztJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtJQUFJO0lBQUk7SUFBSTtDQUFHO0FBQzFFLElBQUlDLGtDQUFrQztJQUFDO0lBQVM7SUFBZTtJQUFhO0lBQXFCO0NBQWU7QUFDaEgsSUFBSUMsa0JBQWtCO0lBQ3BCQyxPQUFPO0lBQ1BDLGNBQWM7SUFDZEMsU0FBUztJQUNUQyxXQUFXO0FBQ2I7QUFDQSxJQUFJQyxXQUFXLElBQUlDO0FBQ25CL0ssT0FBT0QsSUFBSSxDQUFDK0osZUFBZSxDQUFDUCxlQUFlLEVBQUV5QixHQUFHLENBQUNGLFNBQVNHLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDSjtBQUNuRTlLLE9BQU9ELElBQUksQ0FBQytKLGVBQWUsQ0FBQ04sYUFBYSxFQUFFd0IsR0FBRyxDQUFDRixTQUFTRyxHQUFHLENBQUNDLElBQUksQ0FBQ0o7QUFDakUsSUFBSUssbUJBQW1CLEVBQUUsQ0FBQ1osTUFBTSxDQUFDZCxVQUFVekUsbUJBQW1COEYsV0FBVztJQUFDO0lBQU87SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFPO0lBQVE7SUFBVTtJQUFRO0lBQWE7SUFBVTtJQUFhO0lBQW1CO0lBQWlCO0lBQVE7SUFBTTtJQUFXO0lBQWtCO0lBQWU7SUFBVTtJQUFNO0lBQWE7SUFBYztJQUFTO0lBQWM7SUFBYztJQUFhO0lBQWE7SUFBUztJQUFjO0lBQWdCO0lBQVE7SUFBWTtJQUFZO0lBQVM7SUFBTUwsZ0JBQWdCQyxLQUFLO0lBQUVELGdCQUFnQkUsWUFBWTtJQUFFRixnQkFBZ0JHLE9BQU87SUFBRUgsZ0JBQWdCSSxTQUFTO0NBQUMsRUFBRU4sTUFBTSxDQUFDRixTQUFTVyxHQUFHLENBQUMsU0FBVTdFLENBQUM7SUFDbmxCLE9BQU8sR0FBR29FLE1BQU0sQ0FBQ3BFLEdBQUc7QUFDdEIsSUFBSW9FLE1BQU0sQ0FBQ0QsWUFBWVUsR0FBRyxDQUFDLFNBQVU3RSxDQUFDO0lBQ3BDLE9BQU8sS0FBS29FLE1BQU0sQ0FBQ3BFO0FBQ3JCO0FBRUEsSUFBSWlGLFVBQVU1RCxPQUFPNkQsaUJBQWlCLElBQUksQ0FBQztBQUUzQyxTQUFTQyxjQUFjQyxJQUFJO0lBQ3pCLElBQUlDLFVBQVUvRCxTQUFTZ0UsYUFBYSxDQUFDLFlBQVlGLE9BQU87SUFFeEQsSUFBSUMsU0FBUztRQUNYLE9BQU9BLFFBQVFFLFlBQVksQ0FBQ0g7SUFDOUI7QUFDRjtBQUVBLFNBQVNJLE9BQU9DLEdBQUc7SUFDakIsaUdBQWlHO0lBQ2pHLDRFQUE0RTtJQUM1RSxJQUFJQSxRQUFRLElBQUksT0FBTztJQUN2QixJQUFJQSxRQUFRLFNBQVMsT0FBTztJQUM1QixJQUFJQSxRQUFRLFFBQVEsT0FBTztJQUMzQixPQUFPQTtBQUNUO0FBRUEsSUFBSW5FLFlBQVksT0FBT0EsU0FBU2dFLGFBQWEsS0FBSyxZQUFZO0lBQzVELElBQUlJLFFBQVE7UUFBQztZQUFDO1lBQXNCO1NBQWU7UUFBRTtZQUFDO1lBQW1CO1NBQVk7UUFBRTtZQUFDO1lBQXVCO1NBQWdCO1FBQUU7WUFBQztZQUFzQjtTQUFlO1FBQUU7WUFBQztZQUEwQjtTQUFtQjtRQUFFO1lBQUM7WUFBeUI7U0FBaUI7UUFBRTtZQUFDO1lBQXFCO1NBQWE7UUFBRTtZQUFDO1lBQWtCO1NBQVc7UUFBRTtZQUFDO1lBQStCO1NBQXVCO1FBQUU7WUFBQztZQUEwQjtTQUFtQjtRQUFFO1lBQUM7WUFBd0I7U0FBaUI7UUFBRTtZQUFDO1lBQTZCO1NBQXFCO1FBQUU7WUFBQztZQUE0QjtTQUFxQjtRQUFFO1lBQUM7WUFBMkI7U0FBbUI7S0FBQztJQUN6bkJBLE1BQU05SyxPQUFPLENBQUMsU0FBVXFHLElBQUk7UUFDMUIsSUFBSTBFLFFBQVFwSCxlQUFlMEMsTUFBTSxJQUM3Qm1FLE9BQU9PLEtBQUssQ0FBQyxFQUFFLEVBQ2Y5SyxNQUFNOEssS0FBSyxDQUFDLEVBQUU7UUFFbEIsSUFBSUYsTUFBTUQsT0FBT0wsY0FBY0M7UUFFL0IsSUFBSUssUUFBUUcsYUFBYUgsUUFBUSxNQUFNO1lBQ3JDUixPQUFPLENBQUNwSyxJQUFJLEdBQUc0SztRQUNqQjtJQUNGO0FBQ0Y7QUFFQSxJQUFJSSxXQUFXO0lBQ2JDLGNBQWM7SUFDZEMsZUFBZTtJQUNmQyxXQUFXeEQ7SUFDWHlELGtCQUFrQnhEO0lBQ2xCeUQsZ0JBQWdCO0lBQ2hCQyxZQUFZO0lBQ1pDLFVBQVU7SUFDVkMsc0JBQXNCO0lBQ3RCQyxrQkFBa0I7SUFDbEJDLGdCQUFnQjtJQUNoQkMsb0JBQW9CO0lBQ3BCQyxvQkFBb0I7SUFDcEJDLGtCQUFrQjtBQUNwQixHQUFHLHFFQUFxRTtBQUV4RSxJQUFJekIsUUFBUTBCLFlBQVksRUFBRTtJQUN4QjFCLFFBQVFlLFNBQVMsR0FBR2YsUUFBUTBCLFlBQVk7QUFDMUM7QUFFQSxJQUFJQyxVQUFVdE0sZUFBZUEsZUFBZSxDQUFDLEdBQUd1TCxXQUFXWjtBQUUzRCxJQUFJLENBQUMyQixRQUFRVixjQUFjLEVBQUVVLFFBQVFOLGdCQUFnQixHQUFHO0FBQ3hELElBQUlPLFNBQVMsQ0FBQztBQUNkaE4sT0FBT0QsSUFBSSxDQUFDaU0sVUFBVWpMLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO0lBQ3pDaEIsT0FBT29CLGNBQWMsQ0FBQzRMLFFBQVFoTSxLQUFLO1FBQ2pDVixZQUFZO1FBQ1orQixLQUFLLFNBQVNBLElBQUl1SixHQUFHO1lBQ25CbUIsT0FBTyxDQUFDL0wsSUFBSSxHQUFHNEs7WUFFZnFCLFlBQVlsTSxPQUFPLENBQUMsU0FBVW1NLEVBQUU7Z0JBQzlCLE9BQU9BLEdBQUdGO1lBQ1o7UUFDRjtRQUNBMUssS0FBSyxTQUFTQTtZQUNaLE9BQU95SyxPQUFPLENBQUMvTCxJQUFJO1FBQ3JCO0lBQ0Y7QUFDRixJQUFJLHdFQUF3RTtBQUU1RWhCLE9BQU9vQixjQUFjLENBQUM0TCxRQUFRLGdCQUFnQjtJQUM1QzFNLFlBQVk7SUFDWitCLEtBQUssU0FBU0EsSUFBSXVKLEdBQUc7UUFDbkJtQixRQUFRWixTQUFTLEdBQUdQO1FBRXBCcUIsWUFBWWxNLE9BQU8sQ0FBQyxTQUFVbU0sRUFBRTtZQUM5QixPQUFPQSxHQUFHRjtRQUNaO0lBQ0Y7SUFDQTFLLEtBQUssU0FBU0E7UUFDWixPQUFPeUssUUFBUVosU0FBUztJQUMxQjtBQUNGO0FBQ0EzRSxPQUFPNkQsaUJBQWlCLEdBQUcyQjtBQUMzQixJQUFJQyxjQUFjLEVBQUU7QUFDcEIsU0FBU0UsU0FBU0QsRUFBRTtJQUNsQkQsWUFBWTFNLElBQUksQ0FBQzJNO0lBRWpCLE9BQU87UUFDTEQsWUFBWUcsTUFBTSxDQUFDSCxZQUFZOUUsT0FBTyxDQUFDK0UsS0FBSztJQUM5QztBQUNGO0FBRUEsSUFBSUcsSUFBSTNFO0FBQ1IsSUFBSTRFLHVCQUF1QjtJQUN6QkMsTUFBTTtJQUNOQyxHQUFHO0lBQ0hDLEdBQUc7SUFDSEMsUUFBUTtJQUNSQyxPQUFPO0lBQ1BDLE9BQU87QUFDVDtBQUNBLFNBQVNDLFVBQVVDLEdBQUc7SUFDcEIsSUFBSSxDQUFDQSxPQUFPLENBQUNqRyxRQUFRO1FBQ25CO0lBQ0Y7SUFFQSxJQUFJa0csUUFBUXRHLFNBQVNRLGFBQWEsQ0FBQztJQUNuQzhGLE1BQU1DLFlBQVksQ0FBQyxRQUFRO0lBQzNCRCxNQUFNRSxTQUFTLEdBQUdIO0lBQ2xCLElBQUlJLGVBQWV6RyxTQUFTTSxJQUFJLENBQUNvRyxVQUFVO0lBQzNDLElBQUlDLGNBQWM7SUFFbEIsSUFBSyxJQUFJek4sSUFBSXVOLGFBQWFyTixNQUFNLEdBQUcsR0FBR0YsSUFBSSxDQUFDLEdBQUdBLElBQUs7UUFDakQsSUFBSTBOLFFBQVFILFlBQVksQ0FBQ3ZOLEVBQUU7UUFDM0IsSUFBSTJOLFVBQVUsQ0FBQ0QsTUFBTUMsT0FBTyxJQUFJLEVBQUMsRUFBR0MsV0FBVztRQUUvQyxJQUFJO1lBQUM7WUFBUztTQUFPLENBQUNwRyxPQUFPLENBQUNtRyxXQUFXLENBQUMsR0FBRztZQUMzQ0YsY0FBY0M7UUFDaEI7SUFDRjtJQUVBNUcsU0FBU00sSUFBSSxDQUFDeUcsWUFBWSxDQUFDVCxPQUFPSztJQUNsQyxPQUFPTjtBQUNUO0FBQ0EsSUFBSVcsU0FBUztBQUNiLFNBQVNDO0lBQ1AsSUFBSW5CLE9BQU87SUFDWCxJQUFJb0IsS0FBSztJQUVULE1BQU9wQixTQUFTLEVBQUc7UUFDakJvQixNQUFNRixNQUFNLENBQUNHLEtBQUtDLE1BQU0sS0FBSyxLQUFLLEVBQUU7SUFDdEM7SUFFQSxPQUFPRjtBQUNUO0FBQ0EsU0FBU0csUUFBUXhOLEdBQUc7SUFDbEIsSUFBSXlOLFFBQVEsRUFBRTtJQUVkLElBQUssSUFBSXBPLElBQUksQ0FBQ1csT0FBTyxFQUFFLEVBQUVULE1BQU0sS0FBSyxHQUFHRixLQUFNO1FBQzNDb08sS0FBSyxDQUFDcE8sRUFBRSxHQUFHVyxHQUFHLENBQUNYLEVBQUU7SUFDbkI7SUFFQSxPQUFPb087QUFDVDtBQUNBLFNBQVNDLFdBQVdDLElBQUk7SUFDdEIsSUFBSUEsS0FBS0MsU0FBUyxFQUFFO1FBQ2xCLE9BQU9KLFFBQVFHLEtBQUtDLFNBQVM7SUFDL0IsT0FBTztRQUNMLE9BQU8sQ0FBQ0QsS0FBS3ZELFlBQVksQ0FBQyxZQUFZLEVBQUMsRUFBR3lELEtBQUssQ0FBQyxLQUFLaFAsTUFBTSxDQUFDLFNBQVVRLENBQUM7WUFDckUsT0FBT0E7UUFDVDtJQUNGO0FBQ0Y7QUFDQSxTQUFTeU8sV0FBV3BNLEdBQUc7SUFDckIsT0FBTyxHQUFHdUgsTUFBTSxDQUFDdkgsS0FBS0UsT0FBTyxDQUFDLE1BQU0sU0FBU0EsT0FBTyxDQUFDLE1BQU0sVUFBVUEsT0FBTyxDQUFDLE1BQU0sU0FBU0EsT0FBTyxDQUFDLE1BQU0sUUFBUUEsT0FBTyxDQUFDLE1BQU07QUFDbEk7QUFDQSxTQUFTbU0sZUFBZUMsVUFBVTtJQUNoQyxPQUFPdFAsT0FBT0QsSUFBSSxDQUFDdVAsY0FBYyxDQUFDLEdBQUczTSxNQUFNLENBQUMsU0FBVTRNLEdBQUcsRUFBRUMsYUFBYTtRQUN0RSxPQUFPRCxNQUFNLEdBQUdoRixNQUFNLENBQUNpRixlQUFlLE1BQU9qRixNQUFNLENBQUM2RSxXQUFXRSxVQUFVLENBQUNFLGNBQWMsR0FBRztJQUM3RixHQUFHLElBQUlDLElBQUk7QUFDYjtBQUNBLFNBQVNDLFdBQVdDLE1BQU07SUFDeEIsT0FBTzNQLE9BQU9ELElBQUksQ0FBQzRQLFVBQVUsQ0FBQyxHQUFHaE4sTUFBTSxDQUFDLFNBQVU0TSxHQUFHLEVBQUVLLFNBQVM7UUFDOUQsT0FBT0wsTUFBTSxHQUFHaEYsTUFBTSxDQUFDcUYsV0FBVyxNQUFNckYsTUFBTSxDQUFDb0YsTUFBTSxDQUFDQyxVQUFVLENBQUNILElBQUksSUFBSTtJQUMzRSxHQUFHO0FBQ0w7QUFDQSxTQUFTSSxzQkFBc0JDLFNBQVM7SUFDdEMsT0FBT0EsVUFBVXZDLElBQUksS0FBS0QscUJBQXFCQyxJQUFJLElBQUl1QyxVQUFVdEMsQ0FBQyxLQUFLRixxQkFBcUJFLENBQUMsSUFBSXNDLFVBQVVyQyxDQUFDLEtBQUtILHFCQUFxQkcsQ0FBQyxJQUFJcUMsVUFBVXBDLE1BQU0sS0FBS0oscUJBQXFCSSxNQUFNLElBQUlvQyxVQUFVbkMsS0FBSyxJQUFJbUMsVUFBVWxDLEtBQUs7QUFDbk87QUFDQSxTQUFTbUMsZ0JBQWdCM0ksSUFBSTtJQUMzQixJQUFJMEksWUFBWTFJLEtBQUswSSxTQUFTLEVBQzFCRSxpQkFBaUI1SSxLQUFLNEksY0FBYyxFQUNwQ0MsWUFBWTdJLEtBQUs2SSxTQUFTO0lBQzlCLElBQUlDLFFBQVE7UUFDVkosV0FBVyxhQUFhdkYsTUFBTSxDQUFDeUYsaUJBQWlCLEdBQUc7SUFDckQ7SUFDQSxJQUFJRyxpQkFBaUIsYUFBYTVGLE1BQU0sQ0FBQ3VGLFVBQVV0QyxDQUFDLEdBQUcsSUFBSSxNQUFNakQsTUFBTSxDQUFDdUYsVUFBVXJDLENBQUMsR0FBRyxJQUFJO0lBQzFGLElBQUkyQyxhQUFhLFNBQVM3RixNQUFNLENBQUN1RixVQUFVdkMsSUFBSSxHQUFHLEtBQU11QyxDQUFBQSxVQUFVbkMsS0FBSyxHQUFHLENBQUMsSUFBSSxJQUFJLE1BQU1wRCxNQUFNLENBQUN1RixVQUFVdkMsSUFBSSxHQUFHLEtBQU11QyxDQUFBQSxVQUFVbEMsS0FBSyxHQUFHLENBQUMsSUFBSSxJQUFJO0lBQ2xKLElBQUl5QyxjQUFjLFVBQVU5RixNQUFNLENBQUN1RixVQUFVcEMsTUFBTSxFQUFFO0lBQ3JELElBQUk0QyxRQUFRO1FBQ1ZSLFdBQVcsR0FBR3ZGLE1BQU0sQ0FBQzRGLGdCQUFnQixLQUFLNUYsTUFBTSxDQUFDNkYsWUFBWSxLQUFLN0YsTUFBTSxDQUFDOEY7SUFDM0U7SUFDQSxJQUFJRSxPQUFPO1FBQ1RULFdBQVcsYUFBYXZGLE1BQU0sQ0FBQzBGLFlBQVksSUFBSSxDQUFDLEdBQUc7SUFDckQ7SUFDQSxPQUFPO1FBQ0xDLE9BQU9BO1FBQ1BJLE9BQU9BO1FBQ1BDLE1BQU1BO0lBQ1I7QUFDRjtBQUNBLFNBQVNDLGdCQUFnQjFFLEtBQUs7SUFDNUIsSUFBSWdFLFlBQVloRSxNQUFNZ0UsU0FBUyxFQUMzQlcsY0FBYzNFLE1BQU00RSxLQUFLLEVBQ3pCQSxRQUFRRCxnQkFBZ0IsS0FBSyxJQUFJL0gsZ0JBQWdCK0gsYUFDakRFLGVBQWU3RSxNQUFNOEUsTUFBTSxFQUMzQkEsU0FBU0QsaUJBQWlCLEtBQUssSUFBSWpJLGdCQUFnQmlJLGNBQ25ERSxzQkFBc0IvRSxNQUFNZ0YsYUFBYSxFQUN6Q0EsZ0JBQWdCRCx3QkFBd0IsS0FBSyxJQUFJLFFBQVFBO0lBQzdELElBQUlqRixNQUFNO0lBRVYsSUFBSWtGLGlCQUFpQjVJLE9BQU87UUFDMUIwRCxPQUFPLGFBQWFyQixNQUFNLENBQUN1RixVQUFVdEMsQ0FBQyxHQUFHSCxJQUFJcUQsUUFBUSxHQUFHLFFBQVFuRyxNQUFNLENBQUN1RixVQUFVckMsQ0FBQyxHQUFHSixJQUFJdUQsU0FBUyxHQUFHO0lBQ3ZHLE9BQU8sSUFBSUUsZUFBZTtRQUN4QmxGLE9BQU8seUJBQXlCckIsTUFBTSxDQUFDdUYsVUFBVXRDLENBQUMsR0FBR0gsR0FBRyxxQkFBcUI5QyxNQUFNLENBQUN1RixVQUFVckMsQ0FBQyxHQUFHSixHQUFHO0lBQ3ZHLE9BQU87UUFDTHpCLE9BQU8sYUFBYXJCLE1BQU0sQ0FBQ3VGLFVBQVV0QyxDQUFDLEdBQUdILEdBQUcsUUFBUTlDLE1BQU0sQ0FBQ3VGLFVBQVVyQyxDQUFDLEdBQUdKLEdBQUc7SUFDOUU7SUFFQXpCLE9BQU8sU0FBU3JCLE1BQU0sQ0FBQ3VGLFVBQVV2QyxJQUFJLEdBQUdGLElBQUt5QyxDQUFBQSxVQUFVbkMsS0FBSyxHQUFHLENBQUMsSUFBSSxJQUFJLE1BQU1wRCxNQUFNLENBQUN1RixVQUFVdkMsSUFBSSxHQUFHRixJQUFLeUMsQ0FBQUEsVUFBVWxDLEtBQUssR0FBRyxDQUFDLElBQUksSUFBSTtJQUN0SWhDLE9BQU8sVUFBVXJCLE1BQU0sQ0FBQ3VGLFVBQVVwQyxNQUFNLEVBQUU7SUFDMUMsT0FBTzlCO0FBQ1Q7QUFFQSxJQUFJbUYsYUFBYTtBQUVqQixTQUFTakQ7SUFDUCxJQUFJa0QsTUFBTXJJO0lBQ1YsSUFBSXNJLE1BQU1ySTtJQUNWLElBQUlzSSxLQUFLbEUsT0FBT2IsU0FBUztJQUN6QixJQUFJZ0YsS0FBS25FLE9BQU9aLGdCQUFnQjtJQUNoQyxJQUFJZ0YsSUFBSUw7SUFFUixJQUFJRyxPQUFPRixPQUFPRyxPQUFPRixLQUFLO1FBQzVCLElBQUlJLFFBQVEsSUFBSXJQLE9BQU8sTUFBTXVJLE1BQU0sQ0FBQ3lHLEtBQUssUUFBUTtRQUNqRCxJQUFJTSxpQkFBaUIsSUFBSXRQLE9BQU8sT0FBT3VJLE1BQU0sQ0FBQ3lHLEtBQUssUUFBUTtRQUMzRCxJQUFJTyxRQUFRLElBQUl2UCxPQUFPLE1BQU11SSxNQUFNLENBQUMwRyxNQUFNO1FBQzFDRyxJQUFJQSxFQUFFbE8sT0FBTyxDQUFDbU8sT0FBTyxJQUFJOUcsTUFBTSxDQUFDMkcsSUFBSSxNQUFNaE8sT0FBTyxDQUFDb08sZ0JBQWdCLEtBQUsvRyxNQUFNLENBQUMyRyxJQUFJLE1BQU1oTyxPQUFPLENBQUNxTyxPQUFPLElBQUloSCxNQUFNLENBQUM0RztJQUNwSDtJQUVBLE9BQU9DO0FBQ1Q7QUFFQSxJQUFJSSxlQUFlO0FBRW5CLFNBQVNDO0lBQ1AsSUFBSXpFLE9BQU9WLFVBQVUsSUFBSSxDQUFDa0YsY0FBYztRQUN0QzNELFVBQVVDO1FBQ1YwRCxlQUFlO0lBQ2pCO0FBQ0Y7QUFFQSxJQUFJRSxZQUFZO0lBQ2RDLFFBQVEsU0FBU0E7UUFDZixPQUFPO1lBQ0xDLEtBQUs7Z0JBQ0g5RCxLQUFLQTtnQkFDTEQsV0FBVzREO1lBQ2I7UUFDRjtJQUNGO0lBQ0FJLE9BQU8sU0FBU0E7UUFDZCxPQUFPO1lBQ0xDLDBCQUEwQixTQUFTQTtnQkFDakNMO1lBQ0Y7WUFDQU0sYUFBYSxTQUFTQTtnQkFDcEJOO1lBQ0Y7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxJQUFJTyxJQUFJeEssVUFBVSxDQUFDO0FBQ25CLElBQUksQ0FBQ3dLLENBQUMsQ0FBQ3ZKLHFCQUFxQixFQUFFdUosQ0FBQyxDQUFDdkoscUJBQXFCLEdBQUcsQ0FBQztBQUN6RCxJQUFJLENBQUN1SixDQUFDLENBQUN2SixxQkFBcUIsQ0FBQ2tILE1BQU0sRUFBRXFDLENBQUMsQ0FBQ3ZKLHFCQUFxQixDQUFDa0gsTUFBTSxHQUFHLENBQUM7QUFDdkUsSUFBSSxDQUFDcUMsQ0FBQyxDQUFDdkoscUJBQXFCLENBQUNvSixLQUFLLEVBQUVHLENBQUMsQ0FBQ3ZKLHFCQUFxQixDQUFDb0osS0FBSyxHQUFHLENBQUM7QUFDckUsSUFBSSxDQUFDRyxDQUFDLENBQUN2SixxQkFBcUIsQ0FBQ3dKLEtBQUssRUFBRUQsQ0FBQyxDQUFDdkoscUJBQXFCLENBQUN3SixLQUFLLEdBQUcsRUFBRTtBQUN0RSxJQUFJQyxZQUFZRixDQUFDLENBQUN2SixxQkFBcUI7QUFFdkMsSUFBSTBKLFlBQVksRUFBRTtBQUVsQixJQUFJQyxXQUFXLFNBQVNBO0lBQ3RCM0ssU0FBUzRLLG1CQUFtQixDQUFDLG9CQUFvQkQ7SUFDakRFLFNBQVM7SUFDVEgsVUFBVW5ILEdBQUcsQ0FBQyxTQUFVdUgsRUFBRTtRQUN4QixPQUFPQTtJQUNUO0FBQ0Y7QUFFQSxJQUFJRCxTQUFTO0FBRWIsSUFBSXpLLFFBQVE7SUFDVnlLLFNBQVMsQ0FBQzdLLFNBQVNLLGVBQWUsQ0FBQzBLLFFBQVEsR0FBRyxlQUFlLGVBQWMsRUFBR25NLElBQUksQ0FBQ29CLFNBQVNnTCxVQUFVO0lBQ3RHLElBQUksQ0FBQ0gsUUFBUTdLLFNBQVNPLGdCQUFnQixDQUFDLG9CQUFvQm9LO0FBQzdEO0FBRUEsU0FBU00sU0FBVUgsRUFBRTtJQUNuQixJQUFJLENBQUMxSyxRQUFRO0lBQ2J5SyxTQUFTSyxXQUFXSixJQUFJLEtBQUtKLFVBQVU1UixJQUFJLENBQUNnUztBQUM5QztBQUVBLFNBQVNLLE9BQU9DLGFBQWE7SUFDM0IsSUFBSUMsTUFBTUQsY0FBY0MsR0FBRyxFQUN2QkMsd0JBQXdCRixjQUFjdkQsVUFBVSxFQUNoREEsYUFBYXlELDBCQUEwQixLQUFLLElBQUksQ0FBQyxJQUFJQSx1QkFDckRDLHdCQUF3QkgsY0FBY0ksUUFBUSxFQUM5Q0EsV0FBV0QsMEJBQTBCLEtBQUssSUFBSSxFQUFFLEdBQUdBO0lBRXZELElBQUksT0FBT0gsa0JBQWtCLFVBQVU7UUFDckMsT0FBT3pELFdBQVd5RDtJQUNwQixPQUFPO1FBQ0wsT0FBTyxJQUFJdEksTUFBTSxDQUFDdUksS0FBSyxLQUFLdkksTUFBTSxDQUFDOEUsZUFBZUMsYUFBYSxLQUFLL0UsTUFBTSxDQUFDMEksU0FBU2pJLEdBQUcsQ0FBQzRILFFBQVFNLElBQUksQ0FBQyxLQUFLLE1BQU0zSSxNQUFNLENBQUN1SSxLQUFLO0lBQzlIO0FBQ0Y7QUFFQSxTQUFTSyxnQkFBZ0JDLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxRQUFRO0lBQ2hELElBQUlGLFdBQVdBLE9BQU8sQ0FBQ0MsT0FBTyxJQUFJRCxPQUFPLENBQUNDLE9BQU8sQ0FBQ0MsU0FBUyxFQUFFO1FBQzNELE9BQU87WUFDTEQsUUFBUUE7WUFDUkMsVUFBVUE7WUFDVkMsTUFBTUgsT0FBTyxDQUFDQyxPQUFPLENBQUNDLFNBQVM7UUFDakM7SUFDRjtBQUNGO0FBRUE7OztDQUdDLEdBRUQsSUFBSUUsZ0JBQWdCLFNBQVNBLGNBQWNDLElBQUksRUFBRUMsV0FBVztJQUMxRCxPQUFPLFNBQVVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUV4RyxDQUFDO1FBQ3pCLE9BQU9vRyxLQUFLeFEsSUFBSSxDQUFDeVEsYUFBYUMsR0FBR0MsR0FBR0MsR0FBR3hHO0lBQ3pDO0FBQ0Y7QUFFQTs7Ozs7Ozs7OztDQVVDLEdBR0QsSUFBSTFLLFNBQVMsU0FBU21SLGlCQUFpQkMsT0FBTyxFQUFFeEIsRUFBRSxFQUFFeUIsWUFBWSxFQUFFTixXQUFXO0lBQzNFLElBQUkzVCxPQUFPQyxPQUFPRCxJQUFJLENBQUNnVSxVQUNuQmxULFNBQVNkLEtBQUtjLE1BQU0sRUFDcEJXLFdBQVdrUyxnQkFBZ0IzSCxZQUFZeUgsY0FBY2pCLElBQUltQixlQUFlbkIsSUFDeEU1UixHQUNBSyxLQUNBeUI7SUFFSixJQUFJdVIsaUJBQWlCakksV0FBVztRQUM5QnBMLElBQUk7UUFDSjhCLFNBQVNzUixPQUFPLENBQUNoVSxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQzNCLE9BQU87UUFDTFksSUFBSTtRQUNKOEIsU0FBU3VSO0lBQ1g7SUFFQSxNQUFPclQsSUFBSUUsUUFBUUYsSUFBSztRQUN0QkssTUFBTWpCLElBQUksQ0FBQ1ksRUFBRTtRQUNiOEIsU0FBU2pCLFNBQVNpQixRQUFRc1IsT0FBTyxDQUFDL1MsSUFBSSxFQUFFQSxLQUFLK1M7SUFDL0M7SUFFQSxPQUFPdFI7QUFDVDtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXVCQyxHQUNELFNBQVN3UixXQUFXQyxNQUFNO0lBQ3hCLElBQUlDLFNBQVMsRUFBRTtJQUNmLElBQUlDLFVBQVU7SUFDZCxJQUFJdlQsU0FBU3FULE9BQU9yVCxNQUFNO0lBRTFCLE1BQU91VCxVQUFVdlQsT0FBUTtRQUN2QixJQUFJc0QsUUFBUStQLE9BQU9HLFVBQVUsQ0FBQ0Q7UUFFOUIsSUFBSWpRLFNBQVMsVUFBVUEsU0FBUyxVQUFVaVEsVUFBVXZULFFBQVE7WUFDMUQsSUFBSXlULFFBQVFKLE9BQU9HLFVBQVUsQ0FBQ0Q7WUFFOUIsSUFBSSxDQUFDRSxRQUFRLE1BQUssS0FBTSxRQUFRO2dCQUM5Qiw2QkFBNkI7Z0JBQzdCSCxPQUFPNVQsSUFBSSxDQUFDLENBQUMsQ0FBQzRELFFBQVEsS0FBSSxLQUFNLEVBQUMsSUFBTW1RLENBQUFBLFFBQVEsS0FBSSxJQUFLO1lBQzFELE9BQU87Z0JBQ0xILE9BQU81VCxJQUFJLENBQUM0RDtnQkFDWmlRO1lBQ0Y7UUFDRixPQUFPO1lBQ0xELE9BQU81VCxJQUFJLENBQUM0RDtRQUNkO0lBQ0Y7SUFFQSxPQUFPZ1E7QUFDVDtBQUVBLFNBQVNJLE1BQU1DLE9BQU87SUFDcEIsSUFBSUMsVUFBVVIsV0FBV087SUFDekIsT0FBT0MsUUFBUTVULE1BQU0sS0FBSyxJQUFJNFQsT0FBTyxDQUFDLEVBQUUsQ0FBQ3JPLFFBQVEsQ0FBQyxNQUFNO0FBQzFEO0FBQ0EsU0FBU3NPLFlBQVlSLE1BQU0sRUFBRVMsS0FBSztJQUNoQyxJQUFJcEgsT0FBTzJHLE9BQU9yVCxNQUFNO0lBQ3hCLElBQUkrVCxRQUFRVixPQUFPRyxVQUFVLENBQUNNO0lBQzlCLElBQUlFO0lBRUosSUFBSUQsU0FBUyxVQUFVQSxTQUFTLFVBQVVySCxPQUFPb0gsUUFBUSxHQUFHO1FBQzFERSxTQUFTWCxPQUFPRyxVQUFVLENBQUNNLFFBQVE7UUFFbkMsSUFBSUUsVUFBVSxVQUFVQSxVQUFVLFFBQVE7WUFDeEMsT0FBTyxDQUFDRCxRQUFRLE1BQUssSUFBSyxRQUFRQyxTQUFTLFNBQVM7UUFDdEQ7SUFDRjtJQUVBLE9BQU9EO0FBQ1Q7QUFFQSxTQUFTRSxlQUFlQyxLQUFLO0lBQzNCLE9BQU8vVSxPQUFPRCxJQUFJLENBQUNnVixPQUFPcFMsTUFBTSxDQUFDLFNBQVU0TSxHQUFHLEVBQUUrRCxRQUFRO1FBQ3RELElBQUlDLE9BQU93QixLQUFLLENBQUN6QixTQUFTO1FBQzFCLElBQUkwQixXQUFXLENBQUMsQ0FBQ3pCLEtBQUtBLElBQUk7UUFFMUIsSUFBSXlCLFVBQVU7WUFDWnpGLEdBQUcsQ0FBQ2dFLEtBQUtELFFBQVEsQ0FBQyxHQUFHQyxLQUFLQSxJQUFJO1FBQ2hDLE9BQU87WUFDTGhFLEdBQUcsQ0FBQytELFNBQVMsR0FBR0M7UUFDbEI7UUFFQSxPQUFPaEU7SUFDVCxHQUFHLENBQUM7QUFDTjtBQUVBLFNBQVMwRixZQUFZNUIsTUFBTSxFQUFFMEIsS0FBSztJQUNoQyxJQUFJRyxTQUFTdFUsVUFBVUMsTUFBTSxHQUFHLEtBQUtELFNBQVMsQ0FBQyxFQUFFLEtBQUttTCxZQUFZbkwsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO0lBQ2xGLElBQUl1VSxvQkFBb0JELE9BQU9FLFNBQVMsRUFDcENBLFlBQVlELHNCQUFzQixLQUFLLElBQUksUUFBUUE7SUFDdkQsSUFBSUUsYUFBYVAsZUFBZUM7SUFFaEMsSUFBSSxPQUFPN0MsVUFBVUwsS0FBSyxDQUFDeUQsT0FBTyxLQUFLLGNBQWMsQ0FBQ0YsV0FBVztRQUMvRGxELFVBQVVMLEtBQUssQ0FBQ3lELE9BQU8sQ0FBQ2pDLFFBQVF5QixlQUFlQztJQUNqRCxPQUFPO1FBQ0w3QyxVQUFVdkMsTUFBTSxDQUFDMEQsT0FBTyxHQUFHNVMsZUFBZUEsZUFBZSxDQUFDLEdBQUd5UixVQUFVdkMsTUFBTSxDQUFDMEQsT0FBTyxJQUFJLENBQUMsSUFBSWdDO0lBQ2hHO0lBQ0E7Ozs7O0dBS0MsR0FHRCxJQUFJaEMsV0FBVyxPQUFPO1FBQ3BCNEIsWUFBWSxNQUFNRjtJQUNwQjtBQUNGO0FBRUEsSUFBSVEsZ0JBQWdCO0lBQUMsV0FBVyxHQUFFNVQsWUFBWSw0REFBNEQ7UUFDeEc2VCxJQUFJO1FBQ0pDLElBQUk7SUFDTjtJQUFJLFdBQVcsR0FBRTlULFlBQVksb0hBQW9IO1FBQy9JK1QsTUFBTTtRQUNORixJQUFJO1FBQ0pHLE1BQU07UUFDTkYsSUFBSTtJQUNOO0lBQUksV0FBVyxHQUFFOVQsWUFBWSwyREFBMkQ7UUFDdEYrVCxNQUFNO1FBQ05GLElBQUk7SUFDTjtDQUFHO0FBRUgsSUFBSUksYUFBYUMsV0FBV0M7QUFDNUIsSUFBSW5HLFNBQVN1QyxVQUFVdkMsTUFBTSxFQUN6QnNDLFFBQVFDLFVBQVVELEtBQUs7QUFDM0IsSUFBSThELGFBQWNILENBQUFBLGNBQWMsQ0FBQyxHQUFHM1UsZ0JBQWdCMlUsYUFBYXJNLGdCQUFnQnZKLE9BQU9nVyxNQUFNLENBQUNqTSxvQkFBb0IsQ0FBQ1IsZUFBZSxJQUFJdEksZ0JBQWdCMlUsYUFBYXBNLGNBQWN4SixPQUFPZ1csTUFBTSxDQUFDak0sb0JBQW9CLENBQUNQLGFBQWEsSUFBSW9NLFdBQVU7QUFDaFAsSUFBSUssdUJBQXVCO0FBQzNCLElBQUlDLGFBQWEsQ0FBQztBQUNsQixJQUFJQyxjQUFjLENBQUM7QUFDbkIsSUFBSUMsYUFBYSxDQUFDO0FBQ2xCLElBQUlDLGdCQUFnQixDQUFDO0FBQ3JCLElBQUlDLFdBQVcsQ0FBQztBQUNoQixJQUFJQyxXQUFZVixDQUFBQSxZQUFZLENBQUMsR0FBRzVVLGdCQUFnQjRVLFdBQVd0TSxnQkFBZ0J2SixPQUFPRCxJQUFJLENBQUM4SixlQUFlLENBQUNOLGVBQWUsSUFBSXRJLGdCQUFnQjRVLFdBQVdyTSxjQUFjeEosT0FBT0QsSUFBSSxDQUFDOEosZUFBZSxDQUFDTCxhQUFhLElBQUlxTSxTQUFRO0FBRXhOLFNBQVNXLFdBQVc1VCxJQUFJO0lBQ3RCLE9BQU8sQ0FBQ3VJLGlCQUFpQmhELE9BQU8sQ0FBQ3ZGO0FBQ25DO0FBRUEsU0FBUzZULFlBQVl0SyxTQUFTLEVBQUV1SyxHQUFHO0lBQ2pDLElBQUlDLFFBQVFELElBQUl2SCxLQUFLLENBQUM7SUFDdEIsSUFBSWtFLFNBQVNzRCxLQUFLLENBQUMsRUFBRTtJQUNyQixJQUFJckQsV0FBV3FELE1BQU1yVCxLQUFLLENBQUMsR0FBRzRQLElBQUksQ0FBQztJQUVuQyxJQUFJRyxXQUFXbEgsYUFBYW1ILGFBQWEsTUFBTSxDQUFDa0QsV0FBV2xELFdBQVc7UUFDcEUsT0FBT0E7SUFDVCxPQUFPO1FBQ0wsT0FBTztJQUNUO0FBQ0Y7QUFDQSxJQUFJc0QsUUFBUSxTQUFTQTtJQUNuQixJQUFJQyxTQUFTLFNBQVNBLE9BQU9DLE9BQU87UUFDbEMsT0FBT25VLE9BQU9nTixRQUFRLFNBQVVyTCxDQUFDLEVBQUV5SixLQUFLLEVBQUVzRixNQUFNO1lBQzlDL08sQ0FBQyxDQUFDK08sT0FBTyxHQUFHMVEsT0FBT29MLE9BQU8rSSxTQUFTLENBQUM7WUFDcEMsT0FBT3hTO1FBQ1QsR0FBRyxDQUFDO0lBQ047SUFFQTRSLGFBQWFXLE9BQU8sU0FBVXRILEdBQUcsRUFBRWdFLElBQUksRUFBRUQsUUFBUTtRQUMvQyxJQUFJQyxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ1hoRSxHQUFHLENBQUNnRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUdEO1FBQ2pCO1FBRUEsSUFBSUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNYLElBQUl3RCxVQUFVeEQsSUFBSSxDQUFDLEVBQUUsQ0FBQ3BULE1BQU0sQ0FBQyxTQUFVd1QsQ0FBQztnQkFDdEMsT0FBTyxPQUFPQSxNQUFNO1lBQ3RCO1lBQ0FvRCxRQUFRaFcsT0FBTyxDQUFDLFNBQVVpVyxLQUFLO2dCQUM3QnpILEdBQUcsQ0FBQ3lILE1BQU01USxRQUFRLENBQUMsSUFBSSxHQUFHa047WUFDNUI7UUFDRjtRQUVBLE9BQU8vRDtJQUNUO0lBQ0E0RyxjQUFjVSxPQUFPLFNBQVV0SCxHQUFHLEVBQUVnRSxJQUFJLEVBQUVELFFBQVE7UUFDaEQvRCxHQUFHLENBQUMrRCxTQUFTLEdBQUdBO1FBRWhCLElBQUlDLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDWCxJQUFJd0QsVUFBVXhELElBQUksQ0FBQyxFQUFFLENBQUNwVCxNQUFNLENBQUMsU0FBVXdULENBQUM7Z0JBQ3RDLE9BQU8sT0FBT0EsTUFBTTtZQUN0QjtZQUNBb0QsUUFBUWhXLE9BQU8sQ0FBQyxTQUFVaVcsS0FBSztnQkFDN0J6SCxHQUFHLENBQUN5SCxNQUFNLEdBQUcxRDtZQUNmO1FBQ0Y7UUFFQSxPQUFPL0Q7SUFDVDtJQUNBK0csV0FBV08sT0FBTyxTQUFVdEgsR0FBRyxFQUFFZ0UsSUFBSSxFQUFFRCxRQUFRO1FBQzdDLElBQUl5RCxVQUFVeEQsSUFBSSxDQUFDLEVBQUU7UUFDckJoRSxHQUFHLENBQUMrRCxTQUFTLEdBQUdBO1FBQ2hCeUQsUUFBUWhXLE9BQU8sQ0FBQyxTQUFVaVcsS0FBSztZQUM3QnpILEdBQUcsQ0FBQ3lILE1BQU0sR0FBRzFEO1FBQ2Y7UUFDQSxPQUFPL0Q7SUFDVCxJQUFJLHdFQUF3RTtJQUM1RSx3RUFBd0U7SUFFeEUsSUFBSTBILGFBQWEsU0FBU3RILFVBQVUzQyxPQUFPa0ssWUFBWTtJQUN2RCxJQUFJQyxjQUFjeFUsT0FBT3NQLE9BQU8sU0FBVTFDLEdBQUcsRUFBRTZILElBQUk7UUFDakQsSUFBSUMsd0JBQXdCRCxJQUFJLENBQUMsRUFBRTtRQUNuQyxJQUFJL0QsU0FBUytELElBQUksQ0FBQyxFQUFFO1FBQ3BCLElBQUk5RCxXQUFXOEQsSUFBSSxDQUFDLEVBQUU7UUFFdEIsSUFBSS9ELFdBQVcsU0FBUyxDQUFDNEQsWUFBWTtZQUNuQzVELFNBQVM7UUFDWDtRQUVBLElBQUksT0FBT2dFLDBCQUEwQixVQUFVO1lBQzdDOUgsSUFBSStILEtBQUssQ0FBQ0Qsc0JBQXNCLEdBQUc7Z0JBQ2pDaEUsUUFBUUE7Z0JBQ1JDLFVBQVVBO1lBQ1o7UUFDRjtRQUVBLElBQUksT0FBTytELDBCQUEwQixVQUFVO1lBQzdDOUgsSUFBSWdJLFFBQVEsQ0FBQ0Ysc0JBQXNCalIsUUFBUSxDQUFDLElBQUksR0FBRztnQkFDakRpTixRQUFRQTtnQkFDUkMsVUFBVUE7WUFDWjtRQUNGO1FBRUEsT0FBTy9EO0lBQ1QsR0FBRztRQUNEK0gsT0FBTyxDQUFDO1FBQ1JDLFVBQVUsQ0FBQztJQUNiO0lBQ0FuQixhQUFhZSxZQUFZRyxLQUFLO0lBQzlCakIsZ0JBQWdCYyxZQUFZSSxRQUFRO0lBQ3BDdEIsdUJBQXVCdUIsbUJBQW1CeEssT0FBT2YsWUFBWSxFQUFFO1FBQzdEd0wsUUFBUXpLLE9BQU9kLGFBQWE7SUFDOUI7QUFDRjtBQUNBaUIsU0FBUyxTQUFVMEcsQ0FBQztJQUNsQm9DLHVCQUF1QnVCLG1CQUFtQjNELEVBQUU1SCxZQUFZLEVBQUU7UUFDeER3TCxRQUFRekssT0FBT2QsYUFBYTtJQUM5QjtBQUNGO0FBQ0EwSztBQUNBLFNBQVNjLFVBQVVyRSxNQUFNLEVBQUVtQixPQUFPO0lBQ2hDLE9BQU8sQ0FBQzBCLFVBQVUsQ0FBQzdDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQ21CLFFBQVE7QUFDNUM7QUFDQSxTQUFTbUQsV0FBV3RFLE1BQU0sRUFBRXVFLFFBQVE7SUFDbEMsT0FBTyxDQUFDekIsV0FBVyxDQUFDOUMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDdUUsU0FBUztBQUM5QztBQUNBLFNBQVNDLFFBQVF4RSxNQUFNLEVBQUUyRCxLQUFLO0lBQzVCLE9BQU8sQ0FBQ1YsUUFBUSxDQUFDakQsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDMkQsTUFBTTtBQUN4QztBQUNBLFNBQVNjLFVBQVVsVixJQUFJO0lBQ3JCLE9BQU93VCxVQUFVLENBQUN4VCxLQUFLLElBQUk7UUFDekJ5USxRQUFRO1FBQ1JDLFVBQVU7SUFDWjtBQUNGO0FBQ0EsU0FBU3lFLGFBQWF2RCxPQUFPO0lBQzNCLElBQUl3RCxhQUFhM0IsYUFBYSxDQUFDN0IsUUFBUTtJQUN2QyxJQUFJeUQsYUFBYVAsVUFBVSxPQUFPbEQ7SUFDbEMsT0FBT3dELGNBQWVDLENBQUFBLGFBQWE7UUFDakM1RSxRQUFRO1FBQ1JDLFVBQVUyRTtJQUNaLElBQUksSUFBRyxLQUFNO1FBQ1g1RSxRQUFRO1FBQ1JDLFVBQVU7SUFDWjtBQUNGO0FBQ0EsU0FBUzRFO0lBQ1AsT0FBT2pDO0FBQ1Q7QUFDQSxJQUFJa0MscUJBQXFCLFNBQVNBO0lBQ2hDLE9BQU87UUFDTDlFLFFBQVE7UUFDUkMsVUFBVTtRQUNWOEUsTUFBTSxFQUFFO0lBQ1Y7QUFDRjtBQUNBLFNBQVNaLG1CQUFtQmEsYUFBYTtJQUN2QyxJQUFJbkQsU0FBU3RVLFVBQVVDLE1BQU0sR0FBRyxLQUFLRCxTQUFTLENBQUMsRUFBRSxLQUFLbUwsWUFBWW5MLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztJQUNsRixJQUFJMFgsaUJBQWlCcEQsT0FBT3VDLE1BQU0sRUFDOUJBLFNBQVNhLG1CQUFtQixLQUFLLElBQUkvTyxpQkFBaUIrTztJQUMxRCxJQUFJdkssUUFBUWxFLGVBQWUsQ0FBQzROLE9BQU8sQ0FBQ1ksY0FBYztJQUNsRCxJQUFJaEYsU0FBU3ZKLGVBQWUsQ0FBQzJOLE9BQU8sQ0FBQ1ksY0FBYyxJQUFJdk8sZUFBZSxDQUFDMk4sT0FBTyxDQUFDMUosTUFBTTtJQUNyRixJQUFJd0ssVUFBVUYsaUJBQWlCbkcsVUFBVXZDLE1BQU0sR0FBRzBJLGdCQUFnQjtJQUNsRSxPQUFPaEYsVUFBVWtGLFdBQVc7QUFDOUI7QUFDQSxJQUFJQyxzQkFBdUIxQyxDQUFBQSx1QkFBdUIsQ0FBQyxHQUFHN1UsZ0JBQWdCNlUsc0JBQXNCdk0sZ0JBQWdCdkosT0FBT0QsSUFBSSxDQUFDZ0ssb0JBQW9CLENBQUNSLGVBQWUsSUFBSXRJLGdCQUFnQjZVLHNCQUFzQnRNLGNBQWN4SixPQUFPRCxJQUFJLENBQUNnSyxvQkFBb0IsQ0FBQ1AsYUFBYSxJQUFJc00sb0JBQW1CO0FBQ3pSLFNBQVMyQyxpQkFBaUJ6QyxNQUFNO0lBQzlCLElBQUkwQztJQUVKLElBQUl4RCxTQUFTdFUsVUFBVUMsTUFBTSxHQUFHLEtBQUtELFNBQVMsQ0FBQyxFQUFFLEtBQUttTCxZQUFZbkwsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO0lBQ2xGLElBQUkrWCxzQkFBc0J6RCxPQUFPMEQsV0FBVyxFQUN4Q0EsY0FBY0Qsd0JBQXdCLEtBQUssSUFBSSxRQUFRQTtJQUMzRCxJQUFJRSxXQUFZSCxDQUFBQSxZQUFZLENBQUMsR0FBR3pYLGdCQUFnQnlYLFdBQVduUCxnQkFBZ0IsR0FBR2dCLE1BQU0sQ0FBQ3lDLE9BQU9iLFNBQVMsRUFBRSxLQUFLNUIsTUFBTSxDQUFDaEIsa0JBQWtCdEksZ0JBQWdCeVgsV0FBV2xQLGNBQWMsR0FBR2UsTUFBTSxDQUFDeUMsT0FBT2IsU0FBUyxFQUFFLEtBQUs1QixNQUFNLENBQUNmLGdCQUFnQmtQLFNBQVE7SUFDOU8sSUFBSUksY0FBYztJQUNsQixJQUFJckIsU0FBU2xPO0lBRWIsSUFBSXlNLE9BQU8rQyxRQUFRLENBQUNGLFFBQVEsQ0FBQ3RQLGVBQWUsS0FBS3lNLE9BQU9nRCxJQUFJLENBQUMsU0FBVUMsQ0FBQztRQUN0RSxPQUFPVCxtQkFBbUIsQ0FBQ2pQLGVBQWUsQ0FBQ3dQLFFBQVEsQ0FBQ0U7SUFDdEQsSUFBSTtRQUNGeEIsU0FBU2xPO0lBQ1g7SUFFQSxJQUFJeU0sT0FBTytDLFFBQVEsQ0FBQ0YsUUFBUSxDQUFDclAsYUFBYSxLQUFLd00sT0FBT2dELElBQUksQ0FBQyxTQUFVQyxDQUFDO1FBQ3BFLE9BQU9ULG1CQUFtQixDQUFDaFAsYUFBYSxDQUFDdVAsUUFBUSxDQUFDRTtJQUNwRCxJQUFJO1FBQ0Z4QixTQUFTak87SUFDWDtJQUVBLElBQUkwUCxZQUFZbEQsT0FBT3JULE1BQU0sQ0FBQyxTQUFVNE0sR0FBRyxFQUFFbUgsR0FBRztRQUM5QyxJQUFJcEQsV0FBV21ELFlBQVl6SixPQUFPYixTQUFTLEVBQUV1SztRQUU3QyxJQUFJL0csTUFBTSxDQUFDK0csSUFBSSxFQUFFO1lBQ2ZBLE1BQU1YLFVBQVUsQ0FBQzBCLE9BQU8sQ0FBQ3NCLFFBQVEsQ0FBQ3JDLE9BQU8xTSxvQkFBb0IsQ0FBQ3lOLE9BQU8sQ0FBQ2YsSUFBSSxHQUFHQTtZQUM3RW9DLGNBQWNwQztZQUNkbkgsSUFBSThELE1BQU0sR0FBR3FEO1FBQ2YsT0FBTyxJQUFJSCxRQUFRLENBQUNrQixPQUFPLENBQUN0UCxPQUFPLENBQUN1TyxPQUFPLENBQUMsR0FBRztZQUM3Q29DLGNBQWNwQztZQUNkbkgsSUFBSThELE1BQU0sR0FBR21FLG1CQUFtQmQsS0FBSztnQkFDbkNlLFFBQVFBO1lBQ1Y7UUFDRixPQUFPLElBQUluRSxVQUFVO1lBQ25CL0QsSUFBSStELFFBQVEsR0FBR0E7UUFDakIsT0FBTyxJQUFJb0QsUUFBUTFKLE9BQU9aLGdCQUFnQixJQUFJc0ssUUFBUW1DLFFBQVEsQ0FBQ3RQLGVBQWUsSUFBSW1OLFFBQVFtQyxRQUFRLENBQUNyUCxhQUFhLEVBQUU7WUFDaEgrRixJQUFJNkksSUFBSSxDQUFDN1gsSUFBSSxDQUFDbVc7UUFDaEI7UUFFQSxJQUFJLENBQUNrQyxlQUFlckosSUFBSThELE1BQU0sSUFBSTlELElBQUkrRCxRQUFRLEVBQUU7WUFDOUMsSUFBSThELE9BQU8wQixnQkFBZ0IsT0FBT2hCLFVBQVV2SSxJQUFJK0QsUUFBUSxJQUFJLENBQUM7WUFDN0QsSUFBSTZGLGdCQUFnQnRCLFFBQVF0SSxJQUFJOEQsTUFBTSxFQUFFOUQsSUFBSStELFFBQVE7WUFFcEQsSUFBSThELEtBQUsvRCxNQUFNLEVBQUU7Z0JBQ2Z5RixjQUFjO1lBQ2hCO1lBRUF2SixJQUFJK0QsUUFBUSxHQUFHOEQsS0FBSzlELFFBQVEsSUFBSTZGLGlCQUFpQjVKLElBQUkrRCxRQUFRO1lBQzdEL0QsSUFBSThELE1BQU0sR0FBRytELEtBQUsvRCxNQUFNLElBQUk5RCxJQUFJOEQsTUFBTTtZQUV0QyxJQUFJOUQsSUFBSThELE1BQU0sS0FBSyxTQUFTLENBQUMxRCxNQUFNLENBQUMsTUFBTSxJQUFJQSxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMzQyxPQUFPa0ssWUFBWSxFQUFFO2dCQUNuRiwrRUFBK0U7Z0JBQy9FLDJDQUEyQztnQkFDM0MzSCxJQUFJOEQsTUFBTSxHQUFHO1lBQ2Y7UUFDRjtRQUVBLE9BQU85RDtJQUNULEdBQUc0STtJQUVILElBQUluQyxPQUFPK0MsUUFBUSxDQUFDLGdCQUFnQi9DLE9BQU8rQyxRQUFRLENBQUMsUUFBUTtRQUMxREcsVUFBVTdGLE1BQU0sR0FBRztJQUNyQjtJQUVBLElBQUkyQyxPQUFPK0MsUUFBUSxDQUFDLGlCQUFpQi9DLE9BQU8rQyxRQUFRLENBQUMsUUFBUTtRQUMzREcsVUFBVTdGLE1BQU0sR0FBRztJQUNyQjtJQUVBLElBQUksQ0FBQzZGLFVBQVU3RixNQUFNLElBQUlvRSxXQUFXak8sZ0JBQWlCbUcsQ0FBQUEsTUFBTSxDQUFDLE9BQU8sSUFBSTNDLE9BQU9rSyxZQUFZLEdBQUc7UUFDM0ZnQyxVQUFVN0YsTUFBTSxHQUFHO1FBQ25CNkYsVUFBVTVGLFFBQVEsR0FBR3VFLFFBQVFxQixVQUFVN0YsTUFBTSxFQUFFNkYsVUFBVTVGLFFBQVEsS0FBSzRGLFVBQVU1RixRQUFRO0lBQzFGO0lBRUEsSUFBSTRGLFVBQVU3RixNQUFNLEtBQUssUUFBUXlGLGdCQUFnQixNQUFNO1FBQ3JELGdGQUFnRjtRQUNoRiwwQ0FBMEM7UUFDMUNJLFVBQVU3RixNQUFNLEdBQUc2RSw0QkFBNEI7SUFDakQ7SUFFQSxPQUFPZ0I7QUFDVDtBQUVBLElBQUlFLFVBQVUsV0FBVyxHQUFFO0lBQ3pCLFNBQVNBO1FBQ1A3VixnQkFBZ0IsSUFBSSxFQUFFNlY7UUFFdEIsSUFBSSxDQUFDQyxXQUFXLEdBQUcsQ0FBQztJQUN0QjtJQUVBclYsYUFBYW9WLFNBQVM7UUFBQztZQUNyQnBZLEtBQUs7WUFDTG1ELE9BQU8sU0FBUzhHO2dCQUNkLElBQUk3SSxRQUFRLElBQUk7Z0JBRWhCLElBQUssSUFBSWtYLE9BQU8xWSxVQUFVQyxNQUFNLEVBQUV3WSxjQUFjLElBQUlqVSxNQUFNa1UsT0FBT0MsT0FBTyxHQUFHQSxPQUFPRCxNQUFNQyxPQUFRO29CQUM5RkYsV0FBVyxDQUFDRSxLQUFLLEdBQUczWSxTQUFTLENBQUMyWSxLQUFLO2dCQUNyQztnQkFFQSxJQUFJQyxZQUFZSCxZQUFZMVcsTUFBTSxDQUFDLElBQUksQ0FBQzhXLGdCQUFnQixFQUFFLENBQUM7Z0JBQzNEelosT0FBT0QsSUFBSSxDQUFDeVosV0FBV3pZLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO29CQUMxQ29CLE1BQU1pWCxXQUFXLENBQUNyWSxJQUFJLEdBQUdQLGVBQWVBLGVBQWUsQ0FBQyxHQUFHMkIsTUFBTWlYLFdBQVcsQ0FBQ3JZLElBQUksSUFBSSxDQUFDLElBQUl3WSxTQUFTLENBQUN4WSxJQUFJO29CQUN4R2lVLFlBQVlqVSxLQUFLd1ksU0FBUyxDQUFDeFksSUFBSSxHQUFHLGdIQUFnSDtvQkFFbEosSUFBSTBZLGFBQWEzUCxvQkFBb0IsQ0FBQ1IsZUFBZSxDQUFDdkksSUFBSTtvQkFDMUQsSUFBSTBZLFlBQVl6RSxZQUFZeUUsWUFBWUYsU0FBUyxDQUFDeFksSUFBSTtvQkFDdEQ0VjtnQkFDRjtZQUNGO1FBQ0Y7UUFBRztZQUNENVYsS0FBSztZQUNMbUQsT0FBTyxTQUFTd1Y7Z0JBQ2QsSUFBSSxDQUFDTixXQUFXLEdBQUcsQ0FBQztZQUN0QjtRQUNGO1FBQUc7WUFDRHJZLEtBQUs7WUFDTG1ELE9BQU8sU0FBU3NWLGlCQUFpQkQsU0FBUyxFQUFFSSxVQUFVO2dCQUNwRCxJQUFJdkUsYUFBYXVFLFdBQVd2RyxNQUFNLElBQUl1RyxXQUFXdEcsUUFBUSxJQUFJc0csV0FBV3JHLElBQUksR0FBRztvQkFDN0UsR0FBR3FHO2dCQUNMLElBQUlBO2dCQUNKNVosT0FBT0QsSUFBSSxDQUFDc1YsWUFBWXJLLEdBQUcsQ0FBQyxTQUFVaEssR0FBRztvQkFDdkMsSUFBSTZZLGtCQUFrQnhFLFVBQVUsQ0FBQ3JVLElBQUksRUFDakNxUyxTQUFTd0csZ0JBQWdCeEcsTUFBTSxFQUMvQkMsV0FBV3VHLGdCQUFnQnZHLFFBQVEsRUFDbkNDLE9BQU9zRyxnQkFBZ0J0RyxJQUFJO29CQUMvQixJQUFJd0QsVUFBVXhELElBQUksQ0FBQyxFQUFFO29CQUNyQixJQUFJLENBQUNpRyxTQUFTLENBQUNuRyxPQUFPLEVBQUVtRyxTQUFTLENBQUNuRyxPQUFPLEdBQUcsQ0FBQztvQkFFN0MsSUFBSTBELFFBQVFsVyxNQUFNLEdBQUcsR0FBRzt3QkFDdEJrVyxRQUFRaFcsT0FBTyxDQUFDLFNBQVVpVyxLQUFLOzRCQUM3QixJQUFJLE9BQU9BLFVBQVUsVUFBVTtnQ0FDN0J3QyxTQUFTLENBQUNuRyxPQUFPLENBQUMyRCxNQUFNLEdBQUd6RDs0QkFDN0I7d0JBQ0Y7b0JBQ0Y7b0JBRUFpRyxTQUFTLENBQUNuRyxPQUFPLENBQUNDLFNBQVMsR0FBR0M7Z0JBQ2hDO2dCQUNBLE9BQU9pRztZQUNUO1FBQ0Y7S0FBRTtJQUVGLE9BQU9KO0FBQ1Q7QUFFQSxJQUFJVSxXQUFXLEVBQUU7QUFDakIsSUFBSUMsU0FBUyxDQUFDO0FBQ2QsSUFBSUMsWUFBWSxDQUFDO0FBQ2pCLElBQUlDLHNCQUFzQmphLE9BQU9ELElBQUksQ0FBQ2lhO0FBQ3RDLFNBQVNFLGdCQUFnQkMsV0FBVyxFQUFFL1MsSUFBSTtJQUN4QyxJQUFJOUYsTUFBTThGLEtBQUtnVCxTQUFTO0lBQ3hCTixXQUFXSztJQUNYSixTQUFTLENBQUM7SUFDVi9aLE9BQU9ELElBQUksQ0FBQ2lhLFdBQVdqWixPQUFPLENBQUMsU0FBVXNaLENBQUM7UUFDeEMsSUFBSUosb0JBQW9COVIsT0FBTyxDQUFDa1MsT0FBTyxDQUFDLEdBQUc7WUFDekMsT0FBT0wsU0FBUyxDQUFDSyxFQUFFO1FBQ3JCO0lBQ0Y7SUFFQVAsU0FBUy9ZLE9BQU8sQ0FBQyxTQUFVdVosTUFBTTtRQUMvQixJQUFJM0ksU0FBUzJJLE9BQU8zSSxNQUFNLEdBQUcySSxPQUFPM0ksTUFBTSxLQUFLLENBQUM7UUFDaEQzUixPQUFPRCxJQUFJLENBQUM0UixRQUFRNVEsT0FBTyxDQUFDLFNBQVV3WixFQUFFO1lBQ3RDLElBQUksT0FBTzVJLE1BQU0sQ0FBQzRJLEdBQUcsS0FBSyxZQUFZO2dCQUNwQ2paLEdBQUcsQ0FBQ2laLEdBQUcsR0FBRzVJLE1BQU0sQ0FBQzRJLEdBQUc7WUFDdEI7WUFFQSxJQUFJbFosUUFBUXNRLE1BQU0sQ0FBQzRJLEdBQUcsTUFBTSxVQUFVO2dCQUNwQ3ZhLE9BQU9ELElBQUksQ0FBQzRSLE1BQU0sQ0FBQzRJLEdBQUcsRUFBRXhaLE9BQU8sQ0FBQyxTQUFVeVosRUFBRTtvQkFDMUMsSUFBSSxDQUFDbFosR0FBRyxDQUFDaVosR0FBRyxFQUFFO3dCQUNaalosR0FBRyxDQUFDaVosR0FBRyxHQUFHLENBQUM7b0JBQ2I7b0JBRUFqWixHQUFHLENBQUNpWixHQUFHLENBQUNDLEdBQUcsR0FBRzdJLE1BQU0sQ0FBQzRJLEdBQUcsQ0FBQ0MsR0FBRztnQkFDOUI7WUFDRjtRQUNGO1FBRUEsSUFBSUYsT0FBT3pJLEtBQUssRUFBRTtZQUNoQixJQUFJQSxRQUFReUksT0FBT3pJLEtBQUs7WUFDeEI3UixPQUFPRCxJQUFJLENBQUM4UixPQUFPOVEsT0FBTyxDQUFDLFNBQVUwWixJQUFJO2dCQUN2QyxJQUFJLENBQUNWLE1BQU0sQ0FBQ1UsS0FBSyxFQUFFO29CQUNqQlYsTUFBTSxDQUFDVSxLQUFLLEdBQUcsRUFBRTtnQkFDbkI7Z0JBRUFWLE1BQU0sQ0FBQ1UsS0FBSyxDQUFDbGEsSUFBSSxDQUFDc1IsS0FBSyxDQUFDNEksS0FBSztZQUMvQjtRQUNGO1FBRUEsSUFBSUgsT0FBT0ksUUFBUSxFQUFFO1lBQ25CSixPQUFPSSxRQUFRLENBQUNWO1FBQ2xCO0lBQ0Y7SUFFQSxPQUFPMVk7QUFDVDtBQUNBLFNBQVNxWixXQUFXRixJQUFJLEVBQUVHLFdBQVc7SUFDbkMsSUFBSyxJQUFJdEIsT0FBTzFZLFVBQVVDLE1BQU0sRUFBRXdDLE9BQU8sSUFBSStCLE1BQU1rVSxPQUFPLElBQUlBLE9BQU8sSUFBSSxJQUFJQyxPQUFPLEdBQUdBLE9BQU9ELE1BQU1DLE9BQVE7UUFDMUdsVyxJQUFJLENBQUNrVyxPQUFPLEVBQUUsR0FBRzNZLFNBQVMsQ0FBQzJZLEtBQUs7SUFDbEM7SUFFQSxJQUFJc0IsVUFBVWQsTUFBTSxDQUFDVSxLQUFLLElBQUksRUFBRTtJQUNoQ0ksUUFBUTlaLE9BQU8sQ0FBQyxTQUFVK1osTUFBTTtRQUM5QkYsY0FBY0UsT0FBT3RhLEtBQUssQ0FBQyxNQUFNO1lBQUNvYTtTQUFZLENBQUNyUSxNQUFNLENBQUNsSCxRQUFRLHNDQUFzQztJQUN0RztJQUNBLE9BQU91WDtBQUNUO0FBQ0EsU0FBU0csVUFBVU4sSUFBSTtJQUNyQixJQUFLLElBQUlPLFFBQVFwYSxVQUFVQyxNQUFNLEVBQUV3QyxPQUFPLElBQUkrQixNQUFNNFYsUUFBUSxJQUFJQSxRQUFRLElBQUksSUFBSUMsUUFBUSxHQUFHQSxRQUFRRCxPQUFPQyxRQUFTO1FBQ2pINVgsSUFBSSxDQUFDNFgsUUFBUSxFQUFFLEdBQUdyYSxTQUFTLENBQUNxYSxNQUFNO0lBQ3BDO0lBRUEsSUFBSUosVUFBVWQsTUFBTSxDQUFDVSxLQUFLLElBQUksRUFBRTtJQUNoQ0ksUUFBUTlaLE9BQU8sQ0FBQyxTQUFVK1osTUFBTTtRQUM5QkEsT0FBT3RhLEtBQUssQ0FBQyxNQUFNNkM7SUFDckI7SUFDQSxPQUFPMEk7QUFDVDtBQUNBLFNBQVNtUDtJQUNQLElBQUlULE9BQU83WixTQUFTLENBQUMsRUFBRTtJQUN2QixJQUFJeUMsT0FBTytCLE1BQU0xRCxTQUFTLENBQUM0QixLQUFLLENBQUNMLElBQUksQ0FBQ3JDLFdBQVc7SUFDakQsT0FBT29aLFNBQVMsQ0FBQ1MsS0FBSyxHQUFHVCxTQUFTLENBQUNTLEtBQUssQ0FBQ2phLEtBQUssQ0FBQyxNQUFNNkMsUUFBUTBJO0FBQy9EO0FBRUEsU0FBU29QLG1CQUFtQkMsVUFBVTtJQUNwQyxJQUFJQSxXQUFXL0gsTUFBTSxLQUFLLE1BQU07UUFDOUIrSCxXQUFXL0gsTUFBTSxHQUFHO0lBQ3RCO0lBRUEsSUFBSUMsV0FBVzhILFdBQVc5SCxRQUFRO0lBQ2xDLElBQUlELFNBQVMrSCxXQUFXL0gsTUFBTSxJQUFJNkU7SUFDbEMsSUFBSSxDQUFDNUUsVUFBVTtJQUNmQSxXQUFXdUUsUUFBUXhFLFFBQVFDLGFBQWFBO0lBQ3hDLE9BQU9ILGdCQUFnQmtJLFFBQVFoQyxXQUFXLEVBQUVoRyxRQUFRQyxhQUFhSCxnQkFBZ0JqQixVQUFVdkMsTUFBTSxFQUFFMEQsUUFBUUM7QUFDN0c7QUFDQSxJQUFJK0gsVUFBVSxJQUFJakM7QUFDbEIsSUFBSWtDLFNBQVMsU0FBU0E7SUFDcEJ0TyxPQUFPWCxjQUFjLEdBQUc7SUFDeEJXLE9BQU9QLGdCQUFnQixHQUFHO0lBQzFCc08sVUFBVTtBQUNaO0FBQ0EsSUFBSW5KLE1BQU07SUFDUjJKLE9BQU8sU0FBU0E7UUFDZCxJQUFJckcsU0FBU3RVLFVBQVVDLE1BQU0sR0FBRyxLQUFLRCxTQUFTLENBQUMsRUFBRSxLQUFLbUwsWUFBWW5MLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUVsRixJQUFJaUgsUUFBUTtZQUNWa1QsVUFBVSxlQUFlN0Y7WUFDekJnRyxhQUFhLHNCQUFzQmhHO1lBQ25DLE9BQU9nRyxhQUFhLFNBQVNoRztRQUMvQixPQUFPO1lBQ0wsT0FBT3NHLFFBQVFDLE1BQU0sQ0FBQztRQUN4QjtJQUNGO0lBQ0FDLE9BQU8sU0FBU0E7UUFDZCxJQUFJeEcsU0FBU3RVLFVBQVVDLE1BQU0sR0FBRyxLQUFLRCxTQUFTLENBQUMsRUFBRSxLQUFLbUwsWUFBWW5MLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUNsRixJQUFJK2EscUJBQXFCekcsT0FBT3lHLGtCQUFrQjtRQUVsRCxJQUFJM08sT0FBT1gsY0FBYyxLQUFLLE9BQU87WUFDbkNXLE9BQU9YLGNBQWMsR0FBRztRQUMxQjtRQUVBVyxPQUFPUCxnQkFBZ0IsR0FBRztRQUMxQmlHLFNBQVM7WUFDUGtKLFlBQVk7Z0JBQ1ZELG9CQUFvQkE7WUFDdEI7WUFDQVosVUFBVSxTQUFTN0Y7UUFDckI7SUFDRjtBQUNGO0FBQ0EsSUFBSTJHLFFBQVE7SUFDVnRJLE1BQU0sU0FBU0EsS0FBS3VJLEtBQUs7UUFDdkIsSUFBSUEsVUFBVSxNQUFNO1lBQ2xCLE9BQU87UUFDVDtRQUVBLElBQUl6YSxRQUFReWEsV0FBVyxZQUFZQSxNQUFNekksTUFBTSxJQUFJeUksTUFBTXhJLFFBQVEsRUFBRTtZQUNqRSxPQUFPO2dCQUNMRCxRQUFReUksTUFBTXpJLE1BQU07Z0JBQ3BCQyxVQUFVdUUsUUFBUWlFLE1BQU16SSxNQUFNLEVBQUV5SSxNQUFNeEksUUFBUSxLQUFLd0ksTUFBTXhJLFFBQVE7WUFDbkU7UUFDRjtRQUVBLElBQUlsTyxNQUFNQyxPQUFPLENBQUN5VyxVQUFVQSxNQUFNamIsTUFBTSxLQUFLLEdBQUc7WUFDOUMsSUFBSXlTLFdBQVd3SSxLQUFLLENBQUMsRUFBRSxDQUFDM1QsT0FBTyxDQUFDLFdBQVcsSUFBSTJULEtBQUssQ0FBQyxFQUFFLENBQUN4WSxLQUFLLENBQUMsS0FBS3dZLEtBQUssQ0FBQyxFQUFFO1lBQzNFLElBQUl6SSxTQUFTbUUsbUJBQW1Cc0UsS0FBSyxDQUFDLEVBQUU7WUFDeEMsT0FBTztnQkFDTHpJLFFBQVFBO2dCQUNSQyxVQUFVdUUsUUFBUXhFLFFBQVFDLGFBQWFBO1lBQ3pDO1FBQ0Y7UUFFQSxJQUFJLE9BQU93SSxVQUFVLFlBQWFBLENBQUFBLE1BQU0zVCxPQUFPLENBQUMsR0FBR29DLE1BQU0sQ0FBQ3lDLE9BQU9iLFNBQVMsRUFBRSxRQUFRLENBQUMsS0FBSzJQLE1BQU1DLEtBQUssQ0FBQzlSLDhCQUE2QixHQUFJO1lBQ3JJLElBQUkrUixnQkFBZ0J2RCxpQkFBaUJxRCxNQUFNM00sS0FBSyxDQUFDLE1BQU07Z0JBQ3JEeUosYUFBYTtZQUNmO1lBQ0EsT0FBTztnQkFDTHZGLFFBQVEySSxjQUFjM0ksTUFBTSxJQUFJNkU7Z0JBQ2hDNUUsVUFBVXVFLFFBQVFtRSxjQUFjM0ksTUFBTSxFQUFFMkksY0FBYzFJLFFBQVEsS0FBSzBJLGNBQWMxSSxRQUFRO1lBQzNGO1FBQ0Y7UUFFQSxJQUFJLE9BQU93SSxVQUFVLFVBQVU7WUFDN0IsSUFBSUcsVUFBVS9EO1lBRWQsT0FBTztnQkFDTDdFLFFBQVE0STtnQkFDUjNJLFVBQVV1RSxRQUFRb0UsU0FBU0gsVUFBVUE7WUFDdkM7UUFDRjtJQUNGO0FBQ0Y7QUFDQSxJQUFJSSxNQUFNO0lBQ1JaLFFBQVFBO0lBQ1J0TyxRQUFRQTtJQUNSNEUsS0FBS0E7SUFDTGlLLE9BQU9BO0lBQ1BSLFNBQVNBO0lBQ1RGLG9CQUFvQkE7SUFDcEJ2SSxRQUFRQTtBQUNWO0FBRUEsSUFBSWdKLGNBQWMsU0FBU0E7SUFDekIsSUFBSTFHLFNBQVN0VSxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS21MLFlBQVluTCxTQUFTLENBQUMsRUFBRSxHQUFHLENBQUM7SUFDbEYsSUFBSXViLHdCQUF3QmpILE9BQU95RyxrQkFBa0IsRUFDakRBLHFCQUFxQlEsMEJBQTBCLEtBQUssSUFBSTFVLFdBQVcwVTtJQUN2RSxJQUFJLENBQUNuYyxPQUFPRCxJQUFJLENBQUNtUyxVQUFVdkMsTUFBTSxFQUFFOU8sTUFBTSxHQUFHLEtBQUttTSxPQUFPa0ssWUFBWSxLQUFLclAsVUFBVW1GLE9BQU9YLGNBQWMsRUFBRTZQLElBQUl0SyxHQUFHLENBQUMySixLQUFLLENBQUM7UUFDdEh0TSxNQUFNME07SUFDUjtBQUNGO0FBRUEsU0FBU1MsWUFBWXhRLEdBQUcsRUFBRXlRLGVBQWU7SUFDdkNyYyxPQUFPb0IsY0FBYyxDQUFDd0ssS0FBSyxZQUFZO1FBQ3JDdEosS0FBSytaO0lBQ1A7SUFDQXJjLE9BQU9vQixjQUFjLENBQUN3SyxLQUFLLFFBQVE7UUFDakN0SixLQUFLLFNBQVNBO1lBQ1osT0FBT3NKLElBQUkwUSxRQUFRLENBQUN0UixHQUFHLENBQUMsU0FBVTJJLENBQUM7Z0JBQ2pDLE9BQU9mLE9BQU9lO1lBQ2hCO1FBQ0Y7SUFDRjtJQUNBM1QsT0FBT29CLGNBQWMsQ0FBQ3dLLEtBQUssUUFBUTtRQUNqQ3RKLEtBQUssU0FBU0E7WUFDWixJQUFJLENBQUN1RixRQUFRO1lBQ2IsSUFBSTBVLFlBQVk5VSxTQUFTUSxhQUFhLENBQUM7WUFDdkNzVSxVQUFVdE8sU0FBUyxHQUFHckMsSUFBSTRRLElBQUk7WUFDOUIsT0FBT0QsVUFBVXRKLFFBQVE7UUFDM0I7SUFDRjtJQUNBLE9BQU9ySDtBQUNUO0FBRUEsU0FBUzZRLE9BQVFyVixJQUFJO0lBQ25CLElBQUk2TCxXQUFXN0wsS0FBSzZMLFFBQVEsRUFDeEJ5SixPQUFPdFYsS0FBS3NWLElBQUksRUFDaEJDLE9BQU92VixLQUFLdVYsSUFBSSxFQUNoQnJOLGFBQWFsSSxLQUFLa0ksVUFBVSxFQUM1QkssU0FBU3ZJLEtBQUt1SSxNQUFNLEVBQ3BCRyxZQUFZMUksS0FBSzBJLFNBQVM7SUFFOUIsSUFBSUQsc0JBQXNCQyxjQUFjNE0sS0FBS0UsS0FBSyxJQUFJLENBQUNELEtBQUtDLEtBQUssRUFBRTtRQUNqRSxJQUFJbE0sUUFBUWdNLEtBQUtoTSxLQUFLLEVBQ2xCRSxTQUFTOEwsS0FBSzlMLE1BQU07UUFDeEIsSUFBSWlNLFNBQVM7WUFDWHJQLEdBQUdrRCxRQUFRRSxTQUFTO1lBQ3BCbkQsR0FBRztRQUNMO1FBQ0E2QixVQUFVLENBQUMsUUFBUSxHQUFHSSxXQUFXalAsZUFBZUEsZUFBZSxDQUFDLEdBQUdrUCxTQUFTLENBQUMsR0FBRztZQUM5RSxvQkFBb0IsR0FBR3BGLE1BQU0sQ0FBQ3NTLE9BQU9yUCxDQUFDLEdBQUdzQyxVQUFVdEMsQ0FBQyxHQUFHLElBQUksT0FBT2pELE1BQU0sQ0FBQ3NTLE9BQU9wUCxDQUFDLEdBQUdxQyxVQUFVckMsQ0FBQyxHQUFHLElBQUk7UUFDeEc7SUFDRjtJQUVBLE9BQU87UUFBQztZQUNOcUYsS0FBSztZQUNMeEQsWUFBWUE7WUFDWjJELFVBQVVBO1FBQ1o7S0FBRTtBQUNKO0FBRUEsU0FBUzZKLFNBQVUxVixJQUFJO0lBQ3JCLElBQUlpTSxTQUFTak0sS0FBS2lNLE1BQU0sRUFDcEJDLFdBQVdsTSxLQUFLa00sUUFBUSxFQUN4QkwsV0FBVzdMLEtBQUs2TCxRQUFRLEVBQ3hCM0QsYUFBYWxJLEtBQUtrSSxVQUFVLEVBQzVCeU4sU0FBUzNWLEtBQUsyVixNQUFNO0lBQ3hCLElBQUlwTyxLQUFLb08sV0FBVyxPQUFPLEdBQUd4UyxNQUFNLENBQUM4SSxRQUFRLEtBQUs5SSxNQUFNLENBQUN5QyxPQUFPYixTQUFTLEVBQUUsS0FBSzVCLE1BQU0sQ0FBQytJLFlBQVl5SjtJQUNuRyxPQUFPO1FBQUM7WUFDTmpLLEtBQUs7WUFDTHhELFlBQVk7Z0JBQ1Z2QixPQUFPO1lBQ1Q7WUFDQWtGLFVBQVU7Z0JBQUM7b0JBQ1RILEtBQUs7b0JBQ0x4RCxZQUFZN08sZUFBZUEsZUFBZSxDQUFDLEdBQUc2TyxhQUFhLENBQUMsR0FBRzt3QkFDN0RYLElBQUlBO29CQUNOO29CQUNBc0UsVUFBVUE7Z0JBQ1o7YUFBRTtRQUNKO0tBQUU7QUFDSjtBQUVBLFNBQVMrSixzQkFBc0I5SCxNQUFNO0lBQ25DLElBQUkrSCxnQkFBZ0IvSCxPQUFPSCxLQUFLLEVBQzVCMkgsT0FBT08sY0FBY1AsSUFBSSxFQUN6QkMsT0FBT00sY0FBY04sSUFBSSxFQUN6QnRKLFNBQVM2QixPQUFPN0IsTUFBTSxFQUN0QkMsV0FBVzRCLE9BQU81QixRQUFRLEVBQzFCeEQsWUFBWW9GLE9BQU9wRixTQUFTLEVBQzVCaU4sU0FBUzdILE9BQU82SCxNQUFNLEVBQ3RCRyxRQUFRaEksT0FBT2dJLEtBQUssRUFDcEJDLFNBQVNqSSxPQUFPaUksTUFBTSxFQUN0QkMsVUFBVWxJLE9BQU9rSSxPQUFPLEVBQ3hCOUksUUFBUVksT0FBT1osS0FBSyxFQUNwQitJLG9CQUFvQm5JLE9BQU9vSSxTQUFTLEVBQ3BDQSxZQUFZRCxzQkFBc0IsS0FBSyxJQUFJLFFBQVFBO0lBRXZELElBQUlqVyxPQUFPdVYsS0FBS0MsS0FBSyxHQUFHRCxPQUFPRCxNQUMzQmhNLFFBQVF0SixLQUFLc0osS0FBSyxFQUNsQkUsU0FBU3hKLEtBQUt3SixNQUFNO0lBRXhCLElBQUkyTSxpQkFBaUJsSyxXQUFXO0lBQ2hDLElBQUltSyxZQUFZO1FBQUN4USxPQUFPWixnQkFBZ0I7UUFBRWtILFdBQVcsR0FBRy9JLE1BQU0sQ0FBQ3lDLE9BQU9iLFNBQVMsRUFBRSxLQUFLNUIsTUFBTSxDQUFDK0ksWUFBWTtLQUFHLENBQUNuVCxNQUFNLENBQUMsU0FBVTBULENBQUM7UUFDN0gsT0FBT1MsTUFBTW1KLE9BQU8sQ0FBQ3RWLE9BQU8sQ0FBQzBMLE9BQU8sQ0FBQztJQUN2QyxHQUFHMVQsTUFBTSxDQUFDLFNBQVUwVCxDQUFDO1FBQ25CLE9BQU9BLE1BQU0sTUFBTSxDQUFDLENBQUNBO0lBQ3ZCLEdBQUd0SixNQUFNLENBQUMrSixNQUFNbUosT0FBTyxFQUFFdkssSUFBSSxDQUFDO0lBQzlCLElBQUl3SyxVQUFVO1FBQ1p6SyxVQUFVLEVBQUU7UUFDWjNELFlBQVk3TyxlQUFlQSxlQUFlLENBQUMsR0FBRzZULE1BQU1oRixVQUFVLEdBQUcsQ0FBQyxHQUFHO1lBQ25FLGVBQWUrRDtZQUNmLGFBQWFDO1lBQ2IsU0FBU2tLO1lBQ1QsUUFBUWxKLE1BQU1oRixVQUFVLENBQUNxTyxJQUFJLElBQUk7WUFDakMsU0FBUztZQUNULFdBQVcsT0FBT3BULE1BQU0sQ0FBQ21HLE9BQU8sS0FBS25HLE1BQU0sQ0FBQ3FHO1FBQzlDO0lBQ0Y7SUFDQSxJQUFJZ04seUJBQXlCTCxrQkFBa0IsQ0FBQyxDQUFDakosTUFBTW1KLE9BQU8sQ0FBQ3RWLE9BQU8sQ0FBQyxXQUFXO1FBQ2hGdUksT0FBTyxHQUFHbkcsTUFBTSxDQUFDbUcsUUFBUUUsU0FBUyxLQUFLLFFBQVE7SUFDakQsSUFBSSxDQUFDO0lBRUwsSUFBSTBNLFdBQVc7UUFDYkksUUFBUXBPLFVBQVUsQ0FBQ3pHLGNBQWMsR0FBRztJQUN0QztJQUVBLElBQUlxVSxPQUFPO1FBQ1RRLFFBQVF6SyxRQUFRLENBQUMxUyxJQUFJLENBQUM7WUFDcEJ1UyxLQUFLO1lBQ0x4RCxZQUFZO2dCQUNWWCxJQUFJK08sUUFBUXBPLFVBQVUsQ0FBQyxrQkFBa0IsSUFBSSxTQUFTL0UsTUFBTSxDQUFDNlMsV0FBVzFPO1lBQzFFO1lBQ0F1RSxVQUFVO2dCQUFDaUs7YUFBTTtRQUNuQjtRQUNBLE9BQU9RLFFBQVFwTyxVQUFVLENBQUM0TixLQUFLO0lBQ2pDO0lBRUEsSUFBSTdaLE9BQU81QyxlQUFlQSxlQUFlLENBQUMsR0FBR2lkLFVBQVUsQ0FBQyxHQUFHO1FBQ3pEckssUUFBUUE7UUFDUkMsVUFBVUE7UUFDVm9KLE1BQU1BO1FBQ05DLE1BQU1BO1FBQ05RLFFBQVFBO1FBQ1JyTixXQUFXQTtRQUNYaU4sUUFBUUE7UUFDUnBOLFFBQVFsUCxlQUFlQSxlQUFlLENBQUMsR0FBR21kLHlCQUF5QnRKLE1BQU0zRSxNQUFNO0lBQ2pGO0lBRUEsSUFBSTdELFFBQVE2USxLQUFLQyxLQUFLLElBQUlGLEtBQUtFLEtBQUssR0FBRzFCLGFBQWEsd0JBQXdCN1gsU0FBUztRQUNuRjRQLFVBQVUsRUFBRTtRQUNaM0QsWUFBWSxDQUFDO0lBQ2YsSUFBSTRMLGFBQWEsd0JBQXdCN1gsU0FBUztRQUNoRDRQLFVBQVUsRUFBRTtRQUNaM0QsWUFBWSxDQUFDO0lBQ2YsR0FDSTJELFdBQVduSCxNQUFNbUgsUUFBUSxFQUN6QjNELGFBQWF4RCxNQUFNd0QsVUFBVTtJQUVqQ2pNLEtBQUs0UCxRQUFRLEdBQUdBO0lBQ2hCNVAsS0FBS2lNLFVBQVUsR0FBR0E7SUFFbEIsSUFBSXlOLFFBQVE7UUFDVixPQUFPRCxTQUFTelo7SUFDbEIsT0FBTztRQUNMLE9BQU9vWixPQUFPcFo7SUFDaEI7QUFDRjtBQUNBLFNBQVN3YSx1QkFBdUIzSSxNQUFNO0lBQ3BDLElBQUl3SSxVQUFVeEksT0FBT3dJLE9BQU8sRUFDeEJoTixRQUFRd0UsT0FBT3hFLEtBQUssRUFDcEJFLFNBQVNzRSxPQUFPdEUsTUFBTSxFQUN0QmQsWUFBWW9GLE9BQU9wRixTQUFTLEVBQzVCb04sUUFBUWhJLE9BQU9nSSxLQUFLLEVBQ3BCNUksUUFBUVksT0FBT1osS0FBSyxFQUNwQndKLHFCQUFxQjVJLE9BQU9vSSxTQUFTLEVBQ3JDQSxZQUFZUSx1QkFBdUIsS0FBSyxJQUFJLFFBQVFBO0lBRXhELElBQUl4TyxhQUFhN08sZUFBZUEsZUFBZUEsZUFBZSxDQUFDLEdBQUc2VCxNQUFNaEYsVUFBVSxHQUFHNE4sUUFBUTtRQUMzRixTQUFTQTtJQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRztRQUNYLFNBQVM1SSxNQUFNbUosT0FBTyxDQUFDdkssSUFBSSxDQUFDO0lBQzlCO0lBRUEsSUFBSW9LLFdBQVc7UUFDYmhPLFVBQVUsQ0FBQ3pHLGNBQWMsR0FBRztJQUM5QjtJQUVBLElBQUk4RyxTQUFTbFAsZUFBZSxDQUFDLEdBQUc2VCxNQUFNM0UsTUFBTTtJQUU1QyxJQUFJRSxzQkFBc0JDLFlBQVk7UUFDcENILE1BQU0sQ0FBQyxZQUFZLEdBQUdhLGdCQUFnQjtZQUNwQ1YsV0FBV0E7WUFDWGdCLGVBQWU7WUFDZkosT0FBT0E7WUFDUEUsUUFBUUE7UUFDVjtRQUNBakIsTUFBTSxDQUFDLG9CQUFvQixHQUFHQSxNQUFNLENBQUMsWUFBWTtJQUNuRDtJQUVBLElBQUlvTyxjQUFjck8sV0FBV0M7SUFFN0IsSUFBSW9PLFlBQVlsZCxNQUFNLEdBQUcsR0FBRztRQUMxQnlPLFVBQVUsQ0FBQyxRQUFRLEdBQUd5TztJQUN4QjtJQUVBLElBQUluUyxNQUFNLEVBQUU7SUFDWkEsSUFBSXJMLElBQUksQ0FBQztRQUNQdVMsS0FBSztRQUNMeEQsWUFBWUE7UUFDWjJELFVBQVU7WUFBQ3lLO1NBQVE7SUFDckI7SUFFQSxJQUFJUixPQUFPO1FBQ1R0UixJQUFJckwsSUFBSSxDQUFDO1lBQ1B1UyxLQUFLO1lBQ0x4RCxZQUFZO2dCQUNWME8sT0FBTztZQUNUO1lBQ0EvSyxVQUFVO2dCQUFDaUs7YUFBTTtRQUNuQjtJQUNGO0lBRUEsT0FBT3RSO0FBQ1Q7QUFDQSxTQUFTcVMsMEJBQTBCL0ksTUFBTTtJQUN2QyxJQUFJd0ksVUFBVXhJLE9BQU93SSxPQUFPLEVBQ3hCUixRQUFRaEksT0FBT2dJLEtBQUssRUFDcEI1SSxRQUFRWSxPQUFPWixLQUFLO0lBRXhCLElBQUloRixhQUFhN08sZUFBZUEsZUFBZUEsZUFBZSxDQUFDLEdBQUc2VCxNQUFNaEYsVUFBVSxHQUFHNE4sUUFBUTtRQUMzRixTQUFTQTtJQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRztRQUNYLFNBQVM1SSxNQUFNbUosT0FBTyxDQUFDdkssSUFBSSxDQUFDO0lBQzlCO0lBRUEsSUFBSTZLLGNBQWNyTyxXQUFXNEUsTUFBTTNFLE1BQU07SUFFekMsSUFBSW9PLFlBQVlsZCxNQUFNLEdBQUcsR0FBRztRQUMxQnlPLFVBQVUsQ0FBQyxRQUFRLEdBQUd5TztJQUN4QjtJQUVBLElBQUluUyxNQUFNLEVBQUU7SUFDWkEsSUFBSXJMLElBQUksQ0FBQztRQUNQdVMsS0FBSztRQUNMeEQsWUFBWUE7UUFDWjJELFVBQVU7WUFBQ3lLO1NBQVE7SUFDckI7SUFFQSxJQUFJUixPQUFPO1FBQ1R0UixJQUFJckwsSUFBSSxDQUFDO1lBQ1B1UyxLQUFLO1lBQ0x4RCxZQUFZO2dCQUNWME8sT0FBTztZQUNUO1lBQ0EvSyxVQUFVO2dCQUFDaUs7YUFBTTtRQUNuQjtJQUNGO0lBRUEsT0FBT3RSO0FBQ1Q7QUFFQSxJQUFJc1MsV0FBV2hNLFVBQVV2QyxNQUFNO0FBQy9CLFNBQVN3TyxZQUFZNUssSUFBSTtJQUN2QixJQUFJN0MsUUFBUTZDLElBQUksQ0FBQyxFQUFFO0lBQ25CLElBQUkzQyxTQUFTMkMsSUFBSSxDQUFDLEVBQUU7SUFFcEIsSUFBSTZLLGNBQWM3SyxLQUFLalEsS0FBSyxDQUFDLElBQ3pCK2EsZUFBZTNaLGVBQWUwWixhQUFhLElBQzNDRSxhQUFhRCxZQUFZLENBQUMsRUFBRTtJQUVoQyxJQUFJN1MsVUFBVTtJQUVkLElBQUlwRyxNQUFNQyxPQUFPLENBQUNpWixhQUFhO1FBQzdCOVMsVUFBVTtZQUNSc0gsS0FBSztZQUNMeEQsWUFBWTtnQkFDVjBPLE9BQU8sR0FBR3pULE1BQU0sQ0FBQ3lDLE9BQU9iLFNBQVMsRUFBRSxLQUFLNUIsTUFBTSxDQUFDRSxnQkFBZ0JDLEtBQUs7WUFDdEU7WUFDQXVJLFVBQVU7Z0JBQUM7b0JBQ1RILEtBQUs7b0JBQ0x4RCxZQUFZO3dCQUNWME8sT0FBTyxHQUFHelQsTUFBTSxDQUFDeUMsT0FBT2IsU0FBUyxFQUFFLEtBQUs1QixNQUFNLENBQUNFLGdCQUFnQkksU0FBUzt3QkFDeEUwVCxNQUFNO3dCQUNObFIsR0FBR2lSLFVBQVUsQ0FBQyxFQUFFO29CQUNsQjtnQkFDRjtnQkFBRztvQkFDRHhMLEtBQUs7b0JBQ0x4RCxZQUFZO3dCQUNWME8sT0FBTyxHQUFHelQsTUFBTSxDQUFDeUMsT0FBT2IsU0FBUyxFQUFFLEtBQUs1QixNQUFNLENBQUNFLGdCQUFnQkcsT0FBTzt3QkFDdEUyVCxNQUFNO3dCQUNObFIsR0FBR2lSLFVBQVUsQ0FBQyxFQUFFO29CQUNsQjtnQkFDRjthQUFFO1FBQ0o7SUFDRixPQUFPO1FBQ0w5UyxVQUFVO1lBQ1JzSCxLQUFLO1lBQ0x4RCxZQUFZO2dCQUNWaVAsTUFBTTtnQkFDTmxSLEdBQUdpUjtZQUNMO1FBQ0Y7SUFDRjtJQUVBLE9BQU87UUFDTDFCLE9BQU87UUFDUGxNLE9BQU9BO1FBQ1BFLFFBQVFBO1FBQ1IyQyxNQUFNL0g7SUFDUjtBQUNGO0FBQ0EsSUFBSWdULDZCQUE2QjtJQUMvQjVCLE9BQU87SUFDUGxNLE9BQU87SUFDUEUsUUFBUTtBQUNWO0FBRUEsU0FBUzZOLG1CQUFtQm5MLFFBQVEsRUFBRUQsTUFBTTtJQUMxQyxJQUFJLENBQUNoSyxjQUFjLENBQUMyRCxPQUFPSCxnQkFBZ0IsSUFBSXlHLFVBQVU7UUFDdkRvTCxRQUFRQyxLQUFLLENBQUMsbUJBQW9CcFUsTUFBTSxDQUFDK0ksVUFBVSxrQkFBb0IvSSxNQUFNLENBQUM4SSxRQUFRO0lBQ3hGO0FBQ0Y7QUFFQSxTQUFTdUwsU0FBU3RMLFFBQVEsRUFBRUQsTUFBTTtJQUNoQyxJQUFJeUYsY0FBY3pGO0lBRWxCLElBQUlBLFdBQVcsUUFBUXJHLE9BQU9mLFlBQVksS0FBSyxNQUFNO1FBQ25Eb0gsU0FBUzZFO0lBQ1g7SUFFQSxPQUFPLElBQUlzRCxRQUFRLFNBQVVxRCxPQUFPLEVBQUVwRCxNQUFNO1FBQzFDLElBQUk3UCxNQUFNO1lBQ1JnUixPQUFPO1lBQ1BsTSxPQUFPO1lBQ1BFLFFBQVE7WUFDUjJDLE1BQU0ySCxhQUFhLDBCQUEwQixDQUFDO1FBQ2hEO1FBRUEsSUFBSXBDLGdCQUFnQixNQUFNO1lBQ3hCLElBQUkxQixPQUFPVSxVQUFVeEUsYUFBYSxDQUFDO1lBQ25DQSxXQUFXOEQsS0FBSzlELFFBQVEsSUFBSUE7WUFDNUJELFNBQVMrRCxLQUFLL0QsTUFBTSxJQUFJQTtRQUMxQjtRQUVBLElBQUlDLFlBQVlELFVBQVU2SyxRQUFRLENBQUM3SyxPQUFPLElBQUk2SyxRQUFRLENBQUM3SyxPQUFPLENBQUNDLFNBQVMsRUFBRTtZQUN4RSxJQUFJQyxPQUFPMkssUUFBUSxDQUFDN0ssT0FBTyxDQUFDQyxTQUFTO1lBQ3JDLE9BQU91TCxRQUFRVixZQUFZNUs7UUFDN0I7UUFFQWtMLG1CQUFtQm5MLFVBQVVEO1FBQzdCd0wsUUFBUXBlLGVBQWVBLGVBQWUsQ0FBQyxHQUFHK2QsNkJBQTZCLENBQUMsR0FBRztZQUN6RWpMLE1BQU12RyxPQUFPSCxnQkFBZ0IsSUFBSXlHLFdBQVc0SCxhQUFhLDBCQUEwQixDQUFDLElBQUksQ0FBQztRQUMzRjtJQUNGO0FBQ0Y7QUFFQSxJQUFJNEQsU0FBUyxTQUFTdFksUUFBUTtBQUU5QixJQUFJakMsSUFBSXlJLE9BQU9KLGtCQUFrQixJQUFJakYsZUFBZUEsWUFBWWQsSUFBSSxJQUFJYyxZQUFZYixPQUFPLEdBQUdhLGNBQWM7SUFDMUdkLE1BQU1pWTtJQUNOaFksU0FBU2dZO0FBQ1g7QUFDQSxJQUFJQyxXQUFXO0FBRWYsSUFBSUMsUUFBUSxTQUFTQSxNQUFNcGMsSUFBSTtJQUM3QjJCLEVBQUVzQyxJQUFJLENBQUMsR0FBRzBELE1BQU0sQ0FBQ3dVLFVBQVUsS0FBS3hVLE1BQU0sQ0FBQzNILE1BQU07SUFDN0MsT0FBTztRQUNMLE9BQU9xYyxJQUFJcmM7SUFDYjtBQUNGO0FBRUEsSUFBSXFjLE1BQU0sU0FBU0EsSUFBSXJjLElBQUk7SUFDekIyQixFQUFFc0MsSUFBSSxDQUFDLEdBQUcwRCxNQUFNLENBQUN3VSxVQUFVLEtBQUt4VSxNQUFNLENBQUMzSCxNQUFNO0lBQzdDMkIsRUFBRXVDLE9BQU8sQ0FBQyxHQUFHeUQsTUFBTSxDQUFDd1UsVUFBVSxLQUFLeFUsTUFBTSxDQUFDM0gsT0FBTyxHQUFHMkgsTUFBTSxDQUFDd1UsVUFBVSxLQUFLeFUsTUFBTSxDQUFDM0gsTUFBTSxZQUFZLEdBQUcySCxNQUFNLENBQUN3VSxVQUFVLEtBQUt4VSxNQUFNLENBQUMzSCxNQUFNO0FBQzNJO0FBRUEsSUFBSXNjLE9BQU87SUFDVEYsT0FBT0E7SUFDUEMsS0FBS0E7QUFDUDtBQUVBLElBQUlFLFNBQVMsU0FBUzNZLFFBQVE7QUFFOUIsU0FBUzRZLFVBQVVuUSxJQUFJO0lBQ3JCLElBQUlzTSxRQUFRdE0sS0FBS3ZELFlBQVksR0FBR3VELEtBQUt2RCxZQUFZLENBQUM3QyxpQkFBaUI7SUFDbkUsT0FBTyxPQUFPMFMsVUFBVTtBQUMxQjtBQUVBLFNBQVM4RCxpQkFBaUJwUSxJQUFJO0lBQzVCLElBQUlvRSxTQUFTcEUsS0FBS3ZELFlBQVksR0FBR3VELEtBQUt2RCxZQUFZLENBQUMxQyxlQUFlO0lBQ2xFLElBQUl1SyxPQUFPdEUsS0FBS3ZELFlBQVksR0FBR3VELEtBQUt2RCxZQUFZLENBQUN6QyxhQUFhO0lBQzlELE9BQU9vSyxVQUFVRTtBQUNuQjtBQUVBLFNBQVMrTCxnQkFBZ0JyUSxJQUFJO0lBQzNCLE9BQU9BLFFBQVFBLEtBQUtDLFNBQVMsSUFBSUQsS0FBS0MsU0FBUyxDQUFDcVEsUUFBUSxJQUFJdFEsS0FBS0MsU0FBUyxDQUFDcVEsUUFBUSxDQUFDdlMsT0FBT1osZ0JBQWdCO0FBQzdHO0FBRUEsU0FBU29UO0lBQ1AsSUFBSXhTLE9BQU9YLGNBQWMsS0FBSyxNQUFNO1FBQ2xDLE9BQU9vVCxTQUFTdmMsT0FBTztJQUN6QjtJQUVBLElBQUl3YyxVQUFVRCxRQUFRLENBQUN6UyxPQUFPWCxjQUFjLENBQUM7SUFDN0MsT0FBT3FULFdBQVdELFNBQVN2YyxPQUFPO0FBQ3BDO0FBRUEsU0FBU3ljLGdCQUFnQjdNLEdBQUc7SUFDMUIsT0FBT3JMLFNBQVNrWSxlQUFlLENBQUMsOEJBQThCN007QUFDaEU7QUFFQSxTQUFTN0ssY0FBYzZLLEdBQUc7SUFDeEIsT0FBT3JMLFNBQVNRLGFBQWEsQ0FBQzZLO0FBQ2hDO0FBRUEsU0FBUzhNLFdBQVdDLFdBQVc7SUFDN0IsSUFBSTNLLFNBQVN0VSxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS21MLFlBQVluTCxTQUFTLENBQUMsRUFBRSxHQUFHLENBQUM7SUFDbEYsSUFBSWtmLGVBQWU1SyxPQUFPNkssSUFBSSxFQUMxQkEsT0FBT0QsaUJBQWlCLEtBQUssSUFBSUQsWUFBWS9NLEdBQUcsS0FBSyxRQUFRNk0sa0JBQWtCMVgsZ0JBQWdCNlg7SUFFbkcsSUFBSSxPQUFPRCxnQkFBZ0IsVUFBVTtRQUNuQyxPQUFPcFksU0FBU3VZLGNBQWMsQ0FBQ0g7SUFDakM7SUFFQSxJQUFJL00sTUFBTWlOLEtBQUtGLFlBQVkvTSxHQUFHO0lBQzlCOVMsT0FBT0QsSUFBSSxDQUFDOGYsWUFBWXZRLFVBQVUsSUFBSSxFQUFFLEVBQUV2TyxPQUFPLENBQUMsU0FBVUMsR0FBRztRQUM3RDhSLElBQUk5RSxZQUFZLENBQUNoTixLQUFLNmUsWUFBWXZRLFVBQVUsQ0FBQ3RPLElBQUk7SUFDbkQ7SUFDQSxJQUFJaVMsV0FBVzRNLFlBQVk1TSxRQUFRLElBQUksRUFBRTtJQUN6Q0EsU0FBU2xTLE9BQU8sQ0FBQyxTQUFVc04sS0FBSztRQUM5QnlFLElBQUltTixXQUFXLENBQUNMLFdBQVd2UixPQUFPO1lBQ2hDMFIsTUFBTUE7UUFDUjtJQUNGO0lBQ0EsT0FBT2pOO0FBQ1Q7QUFFQSxTQUFTb04sY0FBY2pSLElBQUk7SUFDekIsSUFBSWtSLFVBQVUsSUFBSTVWLE1BQU0sQ0FBQzBFLEtBQUttUixTQUFTLEVBQUU7SUFDekMscUJBQXFCLEdBRXJCRCxVQUFVLEdBQUc1VixNQUFNLENBQUM0VixTQUFTO0lBQzdCLG1CQUFtQixHQUVuQixPQUFPQTtBQUNUO0FBRUEsSUFBSVYsV0FBVztJQUNidmMsU0FBUyxTQUFTQSxRQUFRbWQsUUFBUTtRQUNoQyxJQUFJcFIsT0FBT29SLFFBQVEsQ0FBQyxFQUFFO1FBRXRCLElBQUlwUixLQUFLcVIsVUFBVSxFQUFFO1lBQ25CRCxRQUFRLENBQUMsRUFBRSxDQUFDdGYsT0FBTyxDQUFDLFNBQVV3ZixTQUFTO2dCQUNyQ3RSLEtBQUtxUixVQUFVLENBQUM5UixZQUFZLENBQUNvUixXQUFXVyxZQUFZdFI7WUFDdEQ7WUFFQSxJQUFJQSxLQUFLdkQsWUFBWSxDQUFDN0MsbUJBQW1CLFFBQVFtRSxPQUFPTCxrQkFBa0IsRUFBRTtnQkFDMUUsSUFBSXdULFVBQVUxWSxTQUFTK1ksYUFBYSxDQUFDTixjQUFjalI7Z0JBQ25EQSxLQUFLcVIsVUFBVSxDQUFDRyxZQUFZLENBQUNOLFNBQVNsUjtZQUN4QyxPQUFPO2dCQUNMQSxLQUFLeVIsTUFBTTtZQUNiO1FBQ0Y7SUFDRjtJQUNBQyxNQUFNLFNBQVNBLEtBQUtOLFFBQVE7UUFDMUIsSUFBSXBSLE9BQU9vUixRQUFRLENBQUMsRUFBRTtRQUN0QixJQUFJTyxhQUFhUCxRQUFRLENBQUMsRUFBRSxFQUFFLG1GQUFtRjtRQUNqSCw0Q0FBNEM7UUFFNUMsSUFBSSxDQUFDclIsV0FBV0MsTUFBTTlHLE9BQU8sQ0FBQzZFLE9BQU9aLGdCQUFnQixHQUFHO1lBQ3RELE9BQU9xVCxTQUFTdmMsT0FBTyxDQUFDbWQ7UUFDMUI7UUFFQSxJQUFJUSxTQUFTLElBQUk3ZSxPQUFPLEdBQUd1SSxNQUFNLENBQUN5QyxPQUFPYixTQUFTLEVBQUU7UUFDcEQsT0FBT3lVLFVBQVUsQ0FBQyxFQUFFLENBQUN0UixVQUFVLENBQUNYLEVBQUU7UUFFbEMsSUFBSWlTLFVBQVUsQ0FBQyxFQUFFLENBQUN0UixVQUFVLENBQUMwTyxLQUFLLEVBQUU7WUFDbEMsSUFBSThDLGVBQWVGLFVBQVUsQ0FBQyxFQUFFLENBQUN0UixVQUFVLENBQUMwTyxLQUFLLENBQUM3TyxLQUFLLENBQUMsS0FBS3hNLE1BQU0sQ0FBQyxTQUFVNE0sR0FBRyxFQUFFbUgsR0FBRztnQkFDcEYsSUFBSUEsUUFBUTFKLE9BQU9aLGdCQUFnQixJQUFJc0ssSUFBSXFGLEtBQUssQ0FBQzhFLFNBQVM7b0JBQ3hEdFIsSUFBSXdSLEtBQUssQ0FBQ3hnQixJQUFJLENBQUNtVztnQkFDakIsT0FBTztvQkFDTG5ILElBQUl5UixNQUFNLENBQUN6Z0IsSUFBSSxDQUFDbVc7Z0JBQ2xCO2dCQUVBLE9BQU9uSDtZQUNULEdBQUc7Z0JBQ0R5UixRQUFRLEVBQUU7Z0JBQ1ZELE9BQU8sRUFBRTtZQUNYO1lBRUFILFVBQVUsQ0FBQyxFQUFFLENBQUN0UixVQUFVLENBQUMwTyxLQUFLLEdBQUc4QyxhQUFhQyxLQUFLLENBQUM3TixJQUFJLENBQUM7WUFFekQsSUFBSTROLGFBQWFFLE1BQU0sQ0FBQ25nQixNQUFNLEtBQUssR0FBRztnQkFDcENvTyxLQUFLZ1MsZUFBZSxDQUFDO1lBQ3ZCLE9BQU87Z0JBQ0xoUyxLQUFLakIsWUFBWSxDQUFDLFNBQVM4UyxhQUFhRSxNQUFNLENBQUM5TixJQUFJLENBQUM7WUFDdEQ7UUFDRjtRQUVBLElBQUlnTyxlQUFlTixXQUFXNVYsR0FBRyxDQUFDLFNBQVUySSxDQUFDO1lBQzNDLE9BQU9mLE9BQU9lO1FBQ2hCLEdBQUdULElBQUksQ0FBQztRQUVSakUsS0FBS2pCLFlBQVksQ0FBQ25GLGVBQWU7UUFDakNvRyxLQUFLaEIsU0FBUyxHQUFHaVQ7SUFDbkI7QUFDRjtBQUVBLFNBQVNDLHFCQUFxQkMsRUFBRTtJQUM5QkE7QUFDRjtBQUVBLFNBQVNDLFFBQVFDLFNBQVMsRUFBRUMsUUFBUTtJQUNsQyxJQUFJQyxtQkFBbUIsT0FBT0QsYUFBYSxhQUFhQSxXQUFXcEM7SUFFbkUsSUFBSW1DLFVBQVV6Z0IsTUFBTSxLQUFLLEdBQUc7UUFDMUIyZ0I7SUFDRixPQUFPO1FBQ0wsSUFBSUMsUUFBUU47UUFFWixJQUFJblUsT0FBT04sY0FBYyxLQUFLdkQseUJBQXlCO1lBQ3JEc1ksUUFBUWphLE9BQU9rYSxxQkFBcUIsSUFBSVA7UUFDMUM7UUFFQU0sTUFBTTtZQUNKLElBQUkvQixVQUFVRjtZQUNkLElBQUkzWSxPQUFPcVksS0FBS0YsS0FBSyxDQUFDO1lBQ3RCc0MsVUFBVXRXLEdBQUcsQ0FBQzBVO1lBQ2Q3WTtZQUNBMmE7UUFDRjtJQUNGO0FBQ0Y7QUFDQSxJQUFJRyxXQUFXO0FBQ2YsU0FBU0M7SUFDUEQsV0FBVztBQUNiO0FBQ0EsU0FBU0U7SUFDUEYsV0FBVztBQUNiO0FBQ0EsSUFBSUcsS0FBSztBQUNULFNBQVNDLFFBQVFDLE9BQU87SUFDdEIsSUFBSSxDQUFDdGEsbUJBQW1CO1FBQ3RCO0lBQ0Y7SUFFQSxJQUFJLENBQUNzRixPQUFPUCxnQkFBZ0IsRUFBRTtRQUM1QjtJQUNGO0lBRUEsSUFBSXdWLHdCQUF3QkQsUUFBUUUsWUFBWSxFQUM1Q0EsZUFBZUQsMEJBQTBCLEtBQUssSUFBSTlDLFNBQVM4Qyx1QkFDM0RFLHdCQUF3QkgsUUFBUUksWUFBWSxFQUM1Q0EsZUFBZUQsMEJBQTBCLEtBQUssSUFBSWhELFNBQVNnRCx1QkFDM0RFLHdCQUF3QkwsUUFBUU0sc0JBQXNCLEVBQ3REQSx5QkFBeUJELDBCQUEwQixLQUFLLElBQUlsRCxTQUFTa0QsdUJBQ3JFRSx3QkFBd0JQLFFBQVFRLG9CQUFvQixFQUNwREEsdUJBQXVCRCwwQkFBMEIsS0FBSyxJQUFJOWEsV0FBVzhhO0lBQ3pFVCxLQUFLLElBQUlwYSxrQkFBa0IsU0FBVSthLE9BQU87UUFDMUMsSUFBSWQsVUFBVTtRQUNkLElBQUllLGdCQUFnQnhLO1FBQ3BCcEosUUFBUTJULFNBQVMxaEIsT0FBTyxDQUFDLFNBQVU0aEIsY0FBYztZQUMvQyxJQUFJQSxlQUFlQyxJQUFJLEtBQUssZUFBZUQsZUFBZUUsVUFBVSxDQUFDaGlCLE1BQU0sR0FBRyxLQUFLLENBQUN1ZSxVQUFVdUQsZUFBZUUsVUFBVSxDQUFDLEVBQUUsR0FBRztnQkFDM0gsSUFBSTdWLE9BQU9SLG9CQUFvQixFQUFFO29CQUMvQjhWLHVCQUF1QkssZUFBZWppQixNQUFNO2dCQUM5QztnQkFFQXdoQixhQUFhUyxlQUFlamlCLE1BQU07WUFDcEM7WUFFQSxJQUFJaWlCLGVBQWVDLElBQUksS0FBSyxnQkFBZ0JELGVBQWVqaUIsTUFBTSxDQUFDNGYsVUFBVSxJQUFJdFQsT0FBT1Isb0JBQW9CLEVBQUU7Z0JBQzNHOFYsdUJBQXVCSyxlQUFlamlCLE1BQU0sQ0FBQzRmLFVBQVU7WUFDekQ7WUFFQSxJQUFJcUMsZUFBZUMsSUFBSSxLQUFLLGdCQUFnQnhELFVBQVV1RCxlQUFlamlCLE1BQU0sS0FBSyxDQUFDOEosZ0NBQWdDckMsT0FBTyxDQUFDd2EsZUFBZW5ULGFBQWEsR0FBRztnQkFDdEosSUFBSW1ULGVBQWVuVCxhQUFhLEtBQUssV0FBVzZQLGlCQUFpQnNELGVBQWVqaUIsTUFBTSxHQUFHO29CQUN2RixJQUFJb2lCLG9CQUFvQnJLLGlCQUFpQnpKLFdBQVcyVCxlQUFlamlCLE1BQU0sSUFDckUyUyxTQUFTeVAsa0JBQWtCelAsTUFBTSxFQUNqQ0MsV0FBV3dQLGtCQUFrQnhQLFFBQVE7b0JBRXpDcVAsZUFBZWppQixNQUFNLENBQUNzTixZQUFZLENBQUNoRixhQUFhcUssVUFBVXFQO29CQUMxRCxJQUFJcFAsVUFBVXFQLGVBQWVqaUIsTUFBTSxDQUFDc04sWUFBWSxDQUFDL0UsV0FBV3FLO2dCQUM5RCxPQUFPLElBQUlnTSxnQkFBZ0JxRCxlQUFlamlCLE1BQU0sR0FBRztvQkFDakQwaEIsYUFBYU8sZUFBZWppQixNQUFNO2dCQUNwQztZQUNGO1FBQ0Y7SUFDRjtJQUNBLElBQUksQ0FBQ21ILFFBQVE7SUFDYmlhLEdBQUdDLE9BQU8sQ0FBQ1Msc0JBQXNCO1FBQy9CTyxXQUFXO1FBQ1h6VCxZQUFZO1FBQ1owVCxlQUFlO1FBQ2ZDLFNBQVM7SUFDWDtBQUNGO0FBQ0EsU0FBU0M7SUFDUCxJQUFJLENBQUNwQixJQUFJO0lBQ1RBLEdBQUdvQixVQUFVO0FBQ2Y7QUFFQSxTQUFTQyxZQUFhbFUsSUFBSTtJQUN4QixJQUFJbEIsUUFBUWtCLEtBQUt2RCxZQUFZLENBQUM7SUFDOUIsSUFBSUUsTUFBTSxFQUFFO0lBRVosSUFBSW1DLE9BQU87UUFDVG5DLE1BQU1tQyxNQUFNb0IsS0FBSyxDQUFDLEtBQUt4TSxNQUFNLENBQUMsU0FBVTRNLEdBQUcsRUFBRXhCLEtBQUs7WUFDaEQsSUFBSTRCLFNBQVM1QixNQUFNb0IsS0FBSyxDQUFDO1lBQ3pCLElBQUl2RixPQUFPK0YsTUFBTSxDQUFDLEVBQUU7WUFDcEIsSUFBSXhMLFFBQVF3TCxPQUFPck0sS0FBSyxDQUFDO1lBRXpCLElBQUlzRyxRQUFRekYsTUFBTXRELE1BQU0sR0FBRyxHQUFHO2dCQUM1QjBPLEdBQUcsQ0FBQzNGLEtBQUssR0FBR3pGLE1BQU0rTyxJQUFJLENBQUMsS0FBS3pELElBQUk7WUFDbEM7WUFFQSxPQUFPRjtRQUNULEdBQUcsQ0FBQztJQUNOO0lBRUEsT0FBTzNEO0FBQ1Q7QUFFQSxTQUFTd1gsWUFBYW5VLElBQUk7SUFDeEIsSUFBSW9VLGlCQUFpQnBVLEtBQUt2RCxZQUFZLENBQUM7SUFDdkMsSUFBSTRYLG1CQUFtQnJVLEtBQUt2RCxZQUFZLENBQUM7SUFDekMsSUFBSTZYLFlBQVl0VSxLQUFLc1UsU0FBUyxLQUFLeFgsWUFBWWtELEtBQUtzVSxTQUFTLENBQUM5VCxJQUFJLEtBQUs7SUFDdkUsSUFBSTdELE1BQU02TSxpQkFBaUJ6SixXQUFXQztJQUV0QyxJQUFJLENBQUNyRCxJQUFJeUgsTUFBTSxFQUFFO1FBQ2Z6SCxJQUFJeUgsTUFBTSxHQUFHNkU7SUFDZjtJQUVBLElBQUltTCxrQkFBa0JDLGtCQUFrQjtRQUN0QzFYLElBQUl5SCxNQUFNLEdBQUdnUTtRQUNielgsSUFBSTBILFFBQVEsR0FBR2dRO0lBQ2pCO0lBRUEsSUFBSTFYLElBQUkwSCxRQUFRLElBQUkxSCxJQUFJeUgsTUFBTSxFQUFFO1FBQzlCLE9BQU96SDtJQUNUO0lBRUEsSUFBSUEsSUFBSXlILE1BQU0sSUFBSWtRLFVBQVUxaUIsTUFBTSxHQUFHLEdBQUc7UUFDdEMrSyxJQUFJMEgsUUFBUSxHQUFHcUUsV0FBVy9MLElBQUl5SCxNQUFNLEVBQUVwRSxLQUFLc1UsU0FBUyxLQUFLN0wsVUFBVTlMLElBQUl5SCxNQUFNLEVBQUVrQixNQUFNdEYsS0FBS3NVLFNBQVM7SUFDckc7SUFFQSxJQUFJLENBQUMzWCxJQUFJMEgsUUFBUSxJQUFJdEcsT0FBT2tLLFlBQVksSUFBSWpJLEtBQUt1VSxVQUFVLElBQUl2VSxLQUFLdVUsVUFBVSxDQUFDQyxRQUFRLEtBQUtDLEtBQUtDLFNBQVMsRUFBRTtRQUMxRy9YLElBQUkwSCxRQUFRLEdBQUdyRSxLQUFLdVUsVUFBVSxDQUFDSSxJQUFJO0lBQ3JDO0lBRUEsT0FBT2hZO0FBQ1Q7QUFFQSxTQUFTaVksaUJBQWtCNVUsSUFBSTtJQUM3QixJQUFJNlUsa0JBQWtCaFYsUUFBUUcsS0FBS0ssVUFBVSxFQUFFM00sTUFBTSxDQUFDLFNBQVU0TSxHQUFHLEVBQUVoRSxJQUFJO1FBQ3ZFLElBQUlnRSxJQUFJM00sSUFBSSxLQUFLLFdBQVcyTSxJQUFJM00sSUFBSSxLQUFLLFNBQVM7WUFDaEQyTSxHQUFHLENBQUNoRSxLQUFLM0ksSUFBSSxDQUFDLEdBQUcySSxLQUFLcEgsS0FBSztRQUM3QjtRQUVBLE9BQU9vTDtJQUNULEdBQUcsQ0FBQztJQUNKLElBQUkyTixRQUFRak8sS0FBS3ZELFlBQVksQ0FBQztJQUM5QixJQUFJMFIsVUFBVW5PLEtBQUt2RCxZQUFZLENBQUM7SUFFaEMsSUFBSXNCLE9BQU9ULFFBQVEsRUFBRTtRQUNuQixJQUFJMlEsT0FBTztZQUNUNEcsZUFBZSxDQUFDLGtCQUFrQixHQUFHLEdBQUd2WixNQUFNLENBQUN5QyxPQUFPWixnQkFBZ0IsRUFBRSxXQUFXN0IsTUFBTSxDQUFDNlMsV0FBVzFPO1FBQ3ZHLE9BQU87WUFDTG9WLGVBQWUsQ0FBQyxjQUFjLEdBQUc7WUFDakNBLGVBQWUsQ0FBQyxZQUFZLEdBQUc7UUFDakM7SUFDRjtJQUVBLE9BQU9BO0FBQ1Q7QUFFQSxTQUFTQztJQUNQLE9BQU87UUFDTHpRLFVBQVU7UUFDVjRKLE9BQU87UUFDUEUsU0FBUztRQUNUL0osUUFBUTtRQUNSdkQsV0FBV3hDO1FBQ1h5UCxRQUFRO1FBQ1JKLE1BQU07WUFDSnJKLFVBQVU7WUFDVkQsUUFBUTtZQUNSK0UsTUFBTSxFQUFFO1FBQ1Y7UUFDQStFLFFBQVE7UUFDUjdJLE9BQU87WUFDTG1KLFNBQVMsRUFBRTtZQUNYOU4sUUFBUSxDQUFDO1lBQ1RMLFlBQVksQ0FBQztRQUNmO0lBQ0Y7QUFDRjtBQUNBLFNBQVMwVSxVQUFVL1UsSUFBSTtJQUNyQixJQUFJZ1YsU0FBU3JqQixVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS21MLFlBQVluTCxTQUFTLENBQUMsRUFBRSxHQUFHO1FBQy9FdWlCLGFBQWE7SUFDZjtJQUVBLElBQUllLGVBQWVkLFlBQVluVSxPQUMzQnFFLFdBQVc0USxhQUFhNVEsUUFBUSxFQUNoQ0QsU0FBUzZRLGFBQWE3USxNQUFNLEVBQzVCOFEsZUFBZUQsYUFBYTlMLElBQUk7SUFFcEMsSUFBSTBMLGtCQUFrQkQsaUJBQWlCNVU7SUFDdkMsSUFBSW1WLGFBQWF6SixXQUFXLHVCQUF1QixDQUFDLEdBQUcxTDtJQUN2RCxJQUFJb1YsY0FBY0osT0FBT2QsV0FBVyxHQUFHQSxZQUFZbFUsUUFBUSxFQUFFO0lBQzdELE9BQU94TyxlQUFlO1FBQ3BCNlMsVUFBVUE7UUFDVjRKLE9BQU9qTyxLQUFLdkQsWUFBWSxDQUFDO1FBQ3pCMFIsU0FBU25PLEtBQUt2RCxZQUFZLENBQUM7UUFDM0IySCxRQUFRQTtRQUNSdkQsV0FBV3hDO1FBQ1hxUCxNQUFNO1lBQ0pySixVQUFVO1lBQ1ZELFFBQVE7WUFDUitFLE1BQU0sRUFBRTtRQUNWO1FBQ0ErRSxRQUFRO1FBQ1JKLFFBQVE7UUFDUnpJLE9BQU87WUFDTG1KLFNBQVMwRztZQUNUeFUsUUFBUTBVO1lBQ1IvVSxZQUFZd1U7UUFDZDtJQUNGLEdBQUdNO0FBQ0w7QUFFQSxJQUFJRSxXQUFXcFMsVUFBVXZDLE1BQU07QUFFL0IsU0FBUzRVLGlCQUFpQnRWLElBQUk7SUFDNUIsSUFBSXVWLFdBQVd4WCxPQUFPWCxjQUFjLEtBQUssU0FBUzJYLFVBQVUvVSxNQUFNO1FBQ2hFa1UsYUFBYTtJQUNmLEtBQUthLFVBQVUvVTtJQUVmLElBQUksQ0FBQ3VWLFNBQVNsUSxLQUFLLENBQUNtSixPQUFPLENBQUN0VixPQUFPLENBQUMrQix3QkFBd0I7UUFDMUQsT0FBT2dSLGFBQWEsc0JBQXNCak0sTUFBTXVWO0lBQ2xELE9BQU87UUFDTCxPQUFPdEosYUFBYSxrQ0FBa0NqTSxNQUFNdVY7SUFDOUQ7QUFDRjtBQUVBLElBQUlDLGdCQUFnQixJQUFJMVo7QUFDeEJ0QixTQUFTdUIsR0FBRyxDQUFDLFNBQVV5TSxNQUFNO0lBQzNCZ04sY0FBY3haLEdBQUcsQ0FBQyxNQUFNVixNQUFNLENBQUNrTjtBQUNqQztBQUNBelgsT0FBT0QsSUFBSSxDQUFDOEosZUFBZSxDQUFDTixlQUFlLEVBQUV5QixHQUFHLENBQUN5WixjQUFjeFosR0FBRyxDQUFDQyxJQUFJLENBQUN1WjtBQUN4RXprQixPQUFPRCxJQUFJLENBQUM4SixlQUFlLENBQUNMLGFBQWEsRUFBRXdCLEdBQUcsQ0FBQ3laLGNBQWN4WixHQUFHLENBQUNDLElBQUksQ0FBQ3VaO0FBQ3RFQSxnQkFBZ0J6ZixtQkFBbUJ5ZjtBQUVuQyxTQUFTQyxPQUFPQyxJQUFJO0lBQ2xCLElBQUlwRCxXQUFXM2dCLFVBQVVDLE1BQU0sR0FBRyxLQUFLRCxTQUFTLENBQUMsRUFBRSxLQUFLbUwsWUFBWW5MLFNBQVMsQ0FBQyxFQUFFLEdBQUc7SUFDbkYsSUFBSSxDQUFDaUgsUUFBUSxPQUFPMlQsUUFBUXFELE9BQU87SUFDbkMsSUFBSStGLGdCQUFnQm5kLFNBQVNLLGVBQWUsQ0FBQ29ILFNBQVM7SUFFdEQsSUFBSTJWLFNBQVMsU0FBU0EsT0FBT0MsTUFBTTtRQUNqQyxPQUFPRixjQUFjM1osR0FBRyxDQUFDLEdBQUdWLE1BQU0sQ0FBQ3JCLDZCQUE2QixLQUFLcUIsTUFBTSxDQUFDdWE7SUFDOUU7SUFFQSxJQUFJQyxZQUFZLFNBQVNBLFVBQVVELE1BQU07UUFDdkMsT0FBT0YsY0FBY2xFLE1BQU0sQ0FBQyxHQUFHblcsTUFBTSxDQUFDckIsNkJBQTZCLEtBQUtxQixNQUFNLENBQUN1YTtJQUNqRjtJQUVBLElBQUloYSxXQUFXa0MsT0FBT2tLLFlBQVksR0FBR3VOLGdCQUFnQmhiLFNBQVN1QixHQUFHLENBQUMsU0FBVWdhLENBQUM7UUFDM0UsT0FBTyxNQUFNemEsTUFBTSxDQUFDeWE7SUFDdEIsR0FBR3phLE1BQU0sQ0FBQ3ZLLE9BQU9ELElBQUksQ0FBQ3VrQjtJQUV0QixJQUFJLENBQUN4WixTQUFTaU8sUUFBUSxDQUFDLE9BQU87UUFDNUJqTyxTQUFTdkssSUFBSSxDQUFDO0lBQ2hCO0lBRUEsSUFBSTBrQixtQkFBbUI7UUFBQyxJQUFJMWEsTUFBTSxDQUFDTCx1QkFBdUIsVUFBVUssTUFBTSxDQUFDMUIsZUFBZTtLQUFNLENBQUMwQixNQUFNLENBQUNPLFNBQVNFLEdBQUcsQ0FBQyxTQUFVekcsQ0FBQztRQUM5SCxPQUFPLElBQUlnRyxNQUFNLENBQUNoRyxHQUFHLFVBQVVnRyxNQUFNLENBQUMxQixlQUFlO0lBQ3ZELElBQUlxSyxJQUFJLENBQUM7SUFFVCxJQUFJK1IsaUJBQWlCcGtCLE1BQU0sS0FBSyxHQUFHO1FBQ2pDLE9BQU8yYSxRQUFRcUQsT0FBTztJQUN4QjtJQUVBLElBQUlxRyxhQUFhLEVBQUU7SUFFbkIsSUFBSTtRQUNGQSxhQUFhcFcsUUFBUTZWLEtBQUtRLGdCQUFnQixDQUFDRjtJQUM3QyxFQUFFLE9BQU85ZCxHQUFHLENBQ1o7SUFFQSxJQUFJK2QsV0FBV3JrQixNQUFNLEdBQUcsR0FBRztRQUN6QmdrQixPQUFPO1FBQ1BFLFVBQVU7SUFDWixPQUFPO1FBQ0wsT0FBT3ZKLFFBQVFxRCxPQUFPO0lBQ3hCO0lBRUEsSUFBSWhZLE9BQU9xWSxLQUFLRixLQUFLLENBQUM7SUFDdEIsSUFBSXNDLFlBQVk0RCxXQUFXdmlCLE1BQU0sQ0FBQyxTQUFVNE0sR0FBRyxFQUFFTixJQUFJO1FBQ25ELElBQUk7WUFDRixJQUFJb1IsV0FBV2tFLGlCQUFpQnRWO1lBRWhDLElBQUlvUixVQUFVO2dCQUNaOVEsSUFBSWhQLElBQUksQ0FBQzhmO1lBQ1g7UUFDRixFQUFFLE9BQU9sWixHQUFHO1lBQ1YsSUFBSSxDQUFDa0MsWUFBWTtnQkFDZixJQUFJbEMsRUFBRXZFLElBQUksS0FBSyxlQUFlO29CQUM1QjhiLFFBQVFDLEtBQUssQ0FBQ3hYO2dCQUNoQjtZQUNGO1FBQ0Y7UUFFQSxPQUFPb0k7SUFDVCxHQUFHLEVBQUU7SUFDTCxPQUFPLElBQUlpTSxRQUFRLFNBQVVxRCxPQUFPLEVBQUVwRCxNQUFNO1FBQzFDRCxRQUFRNEosR0FBRyxDQUFDOUQsV0FBVytELElBQUksQ0FBQyxTQUFVQyxpQkFBaUI7WUFDckRqRSxRQUFRaUUsbUJBQW1CO2dCQUN6QlQsT0FBTztnQkFDUEEsT0FBTztnQkFDUEUsVUFBVTtnQkFDVixJQUFJLE9BQU94RCxhQUFhLFlBQVlBO2dCQUNwQzFhO2dCQUNBZ1k7WUFDRjtRQUNGLEdBQUcwRyxLQUFLLENBQUMsU0FBVXBlLENBQUM7WUFDbEJOO1lBQ0E0VSxPQUFPdFU7UUFDVDtJQUNGO0FBQ0Y7QUFFQSxTQUFTcWUsT0FBT3ZXLElBQUk7SUFDbEIsSUFBSXNTLFdBQVczZ0IsVUFBVUMsTUFBTSxHQUFHLEtBQUtELFNBQVMsQ0FBQyxFQUFFLEtBQUttTCxZQUFZbkwsU0FBUyxDQUFDLEVBQUUsR0FBRztJQUNuRjJqQixpQkFBaUJ0VixNQUFNb1csSUFBSSxDQUFDLFNBQVVoRixRQUFRO1FBQzVDLElBQUlBLFVBQVU7WUFDWmdCLFFBQVE7Z0JBQUNoQjthQUFTLEVBQUVrQjtRQUN0QjtJQUNGO0FBQ0Y7QUFFQSxTQUFTa0UsYUFBYTFmLElBQUk7SUFDeEIsT0FBTyxTQUFVMmYsbUJBQW1CO1FBQ2xDLElBQUl4USxTQUFTdFUsVUFBVUMsTUFBTSxHQUFHLEtBQUtELFNBQVMsQ0FBQyxFQUFFLEtBQUttTCxZQUFZbkwsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO1FBQ2xGLElBQUkra0IsaUJBQWlCLENBQUNELHVCQUF1QixDQUFDLEdBQUduUyxJQUFJLEdBQUdtUyxzQkFBc0J2SyxtQkFBbUJ1Syx1QkFBdUIsQ0FBQztRQUN6SCxJQUFJL0ksT0FBT3pILE9BQU95SCxJQUFJO1FBRXRCLElBQUlBLE1BQU07WUFDUkEsT0FBTyxDQUFDQSxRQUFRLENBQUMsR0FBR3BKLElBQUksR0FBR29KLE9BQU94QixtQkFBbUJ3QixRQUFRLENBQUM7UUFDaEU7UUFFQSxPQUFPNVcsS0FBSzRmLGdCQUFnQmxsQixlQUFlQSxlQUFlLENBQUMsR0FBR3lVLFNBQVMsQ0FBQyxHQUFHO1lBQ3pFeUgsTUFBTUE7UUFDUjtJQUNGO0FBQ0Y7QUFFQSxJQUFJaUosU0FBUyxTQUFTQSxPQUFPRCxjQUFjO0lBQ3pDLElBQUl6USxTQUFTdFUsVUFBVUMsTUFBTSxHQUFHLEtBQUtELFNBQVMsQ0FBQyxFQUFFLEtBQUttTCxZQUFZbkwsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO0lBQ2xGLElBQUlpbEIsb0JBQW9CM1EsT0FBT3BGLFNBQVMsRUFDcENBLFlBQVkrVixzQkFBc0IsS0FBSyxJQUFJdlksdUJBQXVCdVksbUJBQ2xFQyxpQkFBaUI1USxPQUFPNkgsTUFBTSxFQUM5QkEsU0FBUytJLG1CQUFtQixLQUFLLElBQUksUUFBUUEsZ0JBQzdDQyxlQUFlN1EsT0FBT3lILElBQUksRUFDMUJBLE9BQU9vSixpQkFBaUIsS0FBSyxJQUFJLE9BQU9BLGNBQ3hDQyxpQkFBaUI5USxPQUFPaUksTUFBTSxFQUM5QkEsU0FBUzZJLG1CQUFtQixLQUFLLElBQUksT0FBT0EsZ0JBQzVDQyxnQkFBZ0IvUSxPQUFPZ0ksS0FBSyxFQUM1QkEsUUFBUStJLGtCQUFrQixLQUFLLElBQUksT0FBT0EsZUFDMUNDLGtCQUFrQmhSLE9BQU9rSSxPQUFPLEVBQ2hDQSxVQUFVOEksb0JBQW9CLEtBQUssSUFBSSxPQUFPQSxpQkFDOUNDLGtCQUFrQmpSLE9BQU91SSxPQUFPLEVBQ2hDQSxVQUFVMEksb0JBQW9CLEtBQUssSUFBSSxFQUFFLEdBQUdBLGlCQUM1Q0MscUJBQXFCbFIsT0FBTzVGLFVBQVUsRUFDdENBLGFBQWE4Vyx1QkFBdUIsS0FBSyxJQUFJLENBQUMsSUFBSUEsb0JBQ2xEQyxpQkFBaUJuUixPQUFPdkYsTUFBTSxFQUM5QkEsU0FBUzBXLG1CQUFtQixLQUFLLElBQUksQ0FBQyxJQUFJQTtJQUM5QyxJQUFJLENBQUNWLGdCQUFnQjtJQUNyQixJQUFJdFMsU0FBU3NTLGVBQWV0UyxNQUFNLEVBQzlCQyxXQUFXcVMsZUFBZXJTLFFBQVEsRUFDbENDLE9BQU9vUyxlQUFlcFMsSUFBSTtJQUM5QixPQUFPNkksWUFBWTNiLGVBQWU7UUFDaENtaUIsTUFBTTtJQUNSLEdBQUcrQyxpQkFBaUI7UUFDbEI1SyxVQUFVLDRCQUE0QjtZQUNwQzRLLGdCQUFnQkE7WUFDaEJ6USxRQUFRQTtRQUNWO1FBRUEsSUFBSWxJLE9BQU9ULFFBQVEsRUFBRTtZQUNuQixJQUFJMlEsT0FBTztnQkFDVDVOLFVBQVUsQ0FBQyxrQkFBa0IsR0FBRyxHQUFHL0UsTUFBTSxDQUFDeUMsT0FBT1osZ0JBQWdCLEVBQUUsV0FBVzdCLE1BQU0sQ0FBQzZTLFdBQVcxTztZQUNsRyxPQUFPO2dCQUNMWSxVQUFVLENBQUMsY0FBYyxHQUFHO2dCQUM1QkEsVUFBVSxDQUFDLFlBQVksR0FBRztZQUM1QjtRQUNGO1FBRUEsT0FBTzBOLHNCQUFzQjtZQUMzQmpJLE9BQU87Z0JBQ0wySCxNQUFNeUIsWUFBWTVLO2dCQUNsQm9KLE1BQU1BLE9BQU93QixZQUFZeEIsS0FBS3BKLElBQUksSUFBSTtvQkFDcENxSixPQUFPO29CQUNQbE0sT0FBTztvQkFDUEUsUUFBUTtvQkFDUjJDLE1BQU0sQ0FBQztnQkFDVDtZQUNGO1lBQ0FGLFFBQVFBO1lBQ1JDLFVBQVVBO1lBQ1Z4RCxXQUFXclAsZUFBZUEsZUFBZSxDQUFDLEdBQUc2TSx1QkFBdUJ3QztZQUNwRWlOLFFBQVFBO1lBQ1JHLE9BQU9BO1lBQ1BDLFFBQVFBO1lBQ1JDLFNBQVNBO1lBQ1Q5SSxPQUFPO2dCQUNMaEYsWUFBWUE7Z0JBQ1pLLFFBQVFBO2dCQUNSOE4sU0FBU0E7WUFDWDtRQUNGO0lBQ0Y7QUFDRjtBQUNBLElBQUk2SSxrQkFBa0I7SUFDcEIzVSxRQUFRLFNBQVNBO1FBQ2YsT0FBTztZQUNMNEIsTUFBTWtTLGFBQWFHO1FBQ3JCO0lBQ0Y7SUFDQS9ULE9BQU8sU0FBU0E7UUFDZCxPQUFPO1lBQ0wwVSwyQkFBMkIsU0FBU0EsMEJBQTBCM0wsV0FBVztnQkFDdkVBLFlBQVlzSCxZQUFZLEdBQUd3QztnQkFDM0I5SixZQUFZd0gsWUFBWSxHQUFHb0Q7Z0JBQzNCLE9BQU81SztZQUNUO1FBQ0Y7SUFDRjtJQUNBRixVQUFVLFNBQVNBLFNBQVM4TCxZQUFZO1FBQ3RDQSxhQUFhakwsS0FBSyxHQUFHLFNBQVVyRyxNQUFNO1lBQ25DLElBQUl1UixlQUFldlIsT0FBT2pHLElBQUksRUFDMUJBLE9BQU93WCxpQkFBaUIsS0FBSyxJQUFJaGYsV0FBV2dmLGNBQzVDQyxtQkFBbUJ4UixPQUFPcU0sUUFBUSxFQUNsQ0EsV0FBV21GLHFCQUFxQixLQUFLLElBQUksWUFBYSxJQUFJQTtZQUM5RCxPQUFPaEMsT0FBT3pWLE1BQU1zUztRQUN0QjtRQUVBaUYsYUFBYUcsOEJBQThCLEdBQUcsU0FBVTFYLElBQUksRUFBRXVWLFFBQVE7WUFDcEUsSUFBSWxSLFdBQVdrUixTQUFTbFIsUUFBUSxFQUM1QjRKLFFBQVFzSCxTQUFTdEgsS0FBSyxFQUN0QkUsVUFBVW9ILFNBQVNwSCxPQUFPLEVBQzFCL0osU0FBU21SLFNBQVNuUixNQUFNLEVBQ3hCdkQsWUFBWTBVLFNBQVMxVSxTQUFTLEVBQzlCaU4sU0FBU3lILFNBQVN6SCxNQUFNLEVBQ3hCSixPQUFPNkgsU0FBUzdILElBQUksRUFDcEJRLFNBQVNxSCxTQUFTckgsTUFBTSxFQUN4QjdJLFFBQVFrUSxTQUFTbFEsS0FBSztZQUMxQixPQUFPLElBQUlrSCxRQUFRLFNBQVVxRCxPQUFPLEVBQUVwRCxNQUFNO2dCQUMxQ0QsUUFBUTRKLEdBQUcsQ0FBQztvQkFBQ3hHLFNBQVN0TCxVQUFVRDtvQkFBU3NKLEtBQUtySixRQUFRLEdBQUdzTCxTQUFTakMsS0FBS3JKLFFBQVEsRUFBRXFKLEtBQUt0SixNQUFNLElBQUltSSxRQUFRcUQsT0FBTyxDQUFDO3dCQUM5R2pDLE9BQU87d0JBQ1BsTSxPQUFPO3dCQUNQRSxRQUFRO3dCQUNSMkMsTUFBTSxDQUFDO29CQUNUO2lCQUFHLEVBQUU4UixJQUFJLENBQUMsU0FBVWplLElBQUk7b0JBQ3RCLElBQUkwRSxRQUFRcEgsZUFBZTBDLE1BQU0sSUFDN0JzVixPQUFPNVEsS0FBSyxDQUFDLEVBQUUsRUFDZjZRLE9BQU83USxLQUFLLENBQUMsRUFBRTtvQkFFbkIrUyxRQUFRO3dCQUFDNVA7d0JBQU0rTixzQkFBc0I7NEJBQ25DakksT0FBTztnQ0FDTDJILE1BQU1BO2dDQUNOQyxNQUFNQTs0QkFDUjs0QkFDQXRKLFFBQVFBOzRCQUNSQyxVQUFVQTs0QkFDVnhELFdBQVdBOzRCQUNYaU4sUUFBUUE7NEJBQ1JJLFFBQVFBOzRCQUNSRCxPQUFPQTs0QkFDUEUsU0FBU0E7NEJBQ1Q5SSxPQUFPQTs0QkFDUGdKLFdBQVc7d0JBQ2I7cUJBQUc7Z0JBQ0wsR0FBR2lJLEtBQUssQ0FBQzlKO1lBQ1g7UUFDRjtRQUVBK0ssYUFBYUksb0JBQW9CLEdBQUcsU0FBVUMsS0FBSztZQUNqRCxJQUFJNVQsV0FBVzRULE1BQU01VCxRQUFRLEVBQ3pCM0QsYUFBYXVYLE1BQU12WCxVQUFVLEVBQzdCb04sT0FBT21LLE1BQU1uSyxJQUFJLEVBQ2pCNU0sWUFBWStXLE1BQU0vVyxTQUFTLEVBQzNCSCxTQUFTa1gsTUFBTWxYLE1BQU07WUFDekIsSUFBSW9PLGNBQWNyTyxXQUFXQztZQUU3QixJQUFJb08sWUFBWWxkLE1BQU0sR0FBRyxHQUFHO2dCQUMxQnlPLFVBQVUsQ0FBQyxRQUFRLEdBQUd5TztZQUN4QjtZQUVBLElBQUkrSTtZQUVKLElBQUlqWCxzQkFBc0JDLFlBQVk7Z0JBQ3BDZ1gsWUFBWTVMLGFBQWEscUNBQXFDO29CQUM1RHdCLE1BQU1BO29CQUNONU0sV0FBV0E7b0JBQ1hFLGdCQUFnQjBNLEtBQUtoTSxLQUFLO29CQUMxQlQsV0FBV3lNLEtBQUtoTSxLQUFLO2dCQUN2QjtZQUNGO1lBRUF1QyxTQUFTMVMsSUFBSSxDQUFDdW1CLGFBQWFwSyxLQUFLbkosSUFBSTtZQUNwQyxPQUFPO2dCQUNMTixVQUFVQTtnQkFDVjNELFlBQVlBO1lBQ2Q7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxJQUFJeVgsU0FBUztJQUNYcFYsUUFBUSxTQUFTQTtRQUNmLE9BQU87WUFDTHFWLE9BQU8sU0FBU0EsTUFBTUMsU0FBUztnQkFDN0IsSUFBSS9SLFNBQVN0VSxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS21MLFlBQVluTCxTQUFTLENBQUMsRUFBRSxHQUFHLENBQUM7Z0JBQ2xGLElBQUl1bEIsa0JBQWtCalIsT0FBT3VJLE9BQU8sRUFDaENBLFVBQVUwSSxvQkFBb0IsS0FBSyxJQUFJLEVBQUUsR0FBR0E7Z0JBQ2hELE9BQU8vSixZQUFZO29CQUNqQndHLE1BQU07Z0JBQ1IsR0FBRztvQkFDRDdILFVBQVUsNEJBQTRCO3dCQUNwQ2tNLFdBQVdBO3dCQUNYL1IsUUFBUUE7b0JBQ1Y7b0JBQ0EsSUFBSWpDLFdBQVcsRUFBRTtvQkFDakJnVSxVQUFVLFNBQVU1akIsSUFBSTt3QkFDdEIrQixNQUFNQyxPQUFPLENBQUNoQyxRQUFRQSxLQUFLMkgsR0FBRyxDQUFDLFNBQVUySSxDQUFDOzRCQUN4Q1YsV0FBV0EsU0FBUzFJLE1BQU0sQ0FBQ29KLEVBQUUySSxRQUFRO3dCQUN2QyxLQUFLckosV0FBV0EsU0FBUzFJLE1BQU0sQ0FBQ2xILEtBQUtpWixRQUFRO29CQUMvQztvQkFDQSxPQUFPO3dCQUFDOzRCQUNOeEosS0FBSzs0QkFDTHhELFlBQVk7Z0NBQ1YwTyxPQUFPO29DQUFDLEdBQUd6VCxNQUFNLENBQUN5QyxPQUFPYixTQUFTLEVBQUU7aUNBQVcsQ0FBQzVCLE1BQU0sQ0FBQ3ZGLG1CQUFtQnlZLFVBQVV2SyxJQUFJLENBQUM7NEJBQzNGOzRCQUNBRCxVQUFVQTt3QkFDWjtxQkFBRTtnQkFDSjtZQUNGO1FBQ0Y7SUFDRjtBQUNGO0FBRUEsSUFBSWlVLGdCQUFnQjtJQUNsQnZWLFFBQVEsU0FBU0E7UUFDZixPQUFPO1lBQ0x5QyxTQUFTLFNBQVNBLFFBQVFzSixPQUFPO2dCQUMvQixJQUFJeEksU0FBU3RVLFVBQVVDLE1BQU0sR0FBRyxLQUFLRCxTQUFTLENBQUMsRUFBRSxLQUFLbUwsWUFBWW5MLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztnQkFDbEYsSUFBSXFsQixnQkFBZ0IvUSxPQUFPZ0ksS0FBSyxFQUM1QkEsUUFBUStJLGtCQUFrQixLQUFLLElBQUksT0FBT0EsZUFDMUNFLGtCQUFrQmpSLE9BQU91SSxPQUFPLEVBQ2hDQSxVQUFVMEksb0JBQW9CLEtBQUssSUFBSSxFQUFFLEdBQUdBLGlCQUM1Q0MscUJBQXFCbFIsT0FBTzVGLFVBQVUsRUFDdENBLGFBQWE4Vyx1QkFBdUIsS0FBSyxJQUFJLENBQUMsSUFBSUEsb0JBQ2xEQyxpQkFBaUJuUixPQUFPdkYsTUFBTSxFQUM5QkEsU0FBUzBXLG1CQUFtQixLQUFLLElBQUksQ0FBQyxJQUFJQTtnQkFDOUMsT0FBT2pLLFlBQVk7b0JBQ2pCd0csTUFBTTtvQkFDTmxGLFNBQVNBO2dCQUNYLEdBQUc7b0JBQ0QzQyxVQUFVLDRCQUE0Qjt3QkFDcEMyQyxTQUFTQTt3QkFDVHhJLFFBQVFBO29CQUNWO29CQUNBLE9BQU8rSSwwQkFBMEI7d0JBQy9CUCxTQUFTQSxRQUFRdFgsUUFBUTt3QkFDekI4VyxPQUFPQTt3QkFDUDVJLE9BQU87NEJBQ0xoRixZQUFZQTs0QkFDWkssUUFBUUE7NEJBQ1I4TixTQUFTO2dDQUFDLEdBQUdsVCxNQUFNLENBQUN5QyxPQUFPYixTQUFTLEVBQUU7NkJBQW1CLENBQUM1QixNQUFNLENBQUN2RixtQkFBbUJ5WTt3QkFDdEY7b0JBQ0Y7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7QUFDRjtBQUVBLElBQUkwSixhQUFhO0lBQ2Z4VixRQUFRLFNBQVNBO1FBQ2YsT0FBTztZQUNMeVYsTUFBTSxTQUFTQSxLQUFLMUosT0FBTztnQkFDekIsSUFBSXhJLFNBQVN0VSxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS21MLFlBQVluTCxTQUFTLENBQUMsRUFBRSxHQUFHLENBQUM7Z0JBQ2xGLElBQUlpbEIsb0JBQW9CM1EsT0FBT3BGLFNBQVMsRUFDcENBLFlBQVkrVixzQkFBc0IsS0FBSyxJQUFJdlksdUJBQXVCdVksbUJBQ2xFSSxnQkFBZ0IvUSxPQUFPZ0ksS0FBSyxFQUM1QkEsUUFBUStJLGtCQUFrQixLQUFLLElBQUksT0FBT0EsZUFDMUNFLGtCQUFrQmpSLE9BQU91SSxPQUFPLEVBQ2hDQSxVQUFVMEksb0JBQW9CLEtBQUssSUFBSSxFQUFFLEdBQUdBLGlCQUM1Q0MscUJBQXFCbFIsT0FBTzVGLFVBQVUsRUFDdENBLGFBQWE4Vyx1QkFBdUIsS0FBSyxJQUFJLENBQUMsSUFBSUEsb0JBQ2xEQyxpQkFBaUJuUixPQUFPdkYsTUFBTSxFQUM5QkEsU0FBUzBXLG1CQUFtQixLQUFLLElBQUksQ0FBQyxJQUFJQTtnQkFDOUMsT0FBT2pLLFlBQVk7b0JBQ2pCd0csTUFBTTtvQkFDTmxGLFNBQVNBO2dCQUNYLEdBQUc7b0JBQ0QzQyxVQUFVLDRCQUE0Qjt3QkFDcEMyQyxTQUFTQTt3QkFDVHhJLFFBQVFBO29CQUNWO29CQUNBLE9BQU8ySSx1QkFBdUI7d0JBQzVCSCxTQUFTQTt3QkFDVDVOLFdBQVdyUCxlQUFlQSxlQUFlLENBQUMsR0FBRzZNLHVCQUF1QndDO3dCQUNwRW9OLE9BQU9BO3dCQUNQNUksT0FBTzs0QkFDTGhGLFlBQVlBOzRCQUNaSyxRQUFRQTs0QkFDUjhOLFNBQVM7Z0NBQUMsR0FBR2xULE1BQU0sQ0FBQ3lDLE9BQU9iLFNBQVMsRUFBRTs2QkFBZ0IsQ0FBQzVCLE1BQU0sQ0FBQ3ZGLG1CQUFtQnlZO3dCQUNuRjtvQkFDRjtnQkFDRjtZQUNGO1FBQ0Y7SUFDRjtJQUNBL0MsVUFBVSxTQUFTQSxTQUFTOEwsWUFBWTtRQUN0Q0EsYUFBYWEsa0JBQWtCLEdBQUcsU0FBVXBZLElBQUksRUFBRXVWLFFBQVE7WUFDeEQsSUFBSXRILFFBQVFzSCxTQUFTdEgsS0FBSyxFQUN0QnBOLFlBQVkwVSxTQUFTMVUsU0FBUyxFQUM5QndFLFFBQVFrUSxTQUFTbFEsS0FBSztZQUMxQixJQUFJNUQsUUFBUTtZQUNaLElBQUlFLFNBQVM7WUFFYixJQUFJMUksT0FBTztnQkFDVCxJQUFJb2YsbUJBQW1CQyxTQUFTQyxpQkFBaUJ2WSxNQUFNd1ksUUFBUSxFQUFFO2dCQUNqRSxJQUFJQyxxQkFBcUJ6WSxLQUFLMFkscUJBQXFCO2dCQUNuRGpYLFFBQVFnWCxtQkFBbUJoWCxLQUFLLEdBQUc0VztnQkFDbkMxVyxTQUFTOFcsbUJBQW1COVcsTUFBTSxHQUFHMFc7WUFDdkM7WUFFQSxJQUFJdGEsT0FBT1QsUUFBUSxJQUFJLENBQUMyUSxPQUFPO2dCQUM3QjVJLE1BQU1oRixVQUFVLENBQUMsY0FBYyxHQUFHO1lBQ3BDO1lBRUEsT0FBT2tNLFFBQVFxRCxPQUFPLENBQUM7Z0JBQUM1UDtnQkFBTTRPLHVCQUF1QjtvQkFDbkRILFNBQVN6TyxLQUFLaEIsU0FBUztvQkFDdkJ5QyxPQUFPQTtvQkFDUEUsUUFBUUE7b0JBQ1JkLFdBQVdBO29CQUNYb04sT0FBT0E7b0JBQ1A1SSxPQUFPQTtvQkFDUGdKLFdBQVc7Z0JBQ2I7YUFBRztRQUNMO0lBQ0Y7QUFDRjtBQUVBLElBQUlzSyx3QkFBd0IsSUFBSTVsQixPQUFPLEtBQU07QUFDN0MsSUFBSTZsQiwwQkFBMEI7SUFBQztJQUFTO0NBQVE7QUFDaEQsU0FBU0Msb0JBQW9CcEssT0FBTztJQUNsQyxJQUFJcUssVUFBVXJLLFFBQVF4YSxPQUFPLENBQUMwa0IsdUJBQXVCO0lBQ3JELElBQUlJLFlBQVl0VCxZQUFZcVQsU0FBUztJQUNyQyxJQUFJRSxlQUFlRCxhQUFhSCx1QkFBdUIsQ0FBQyxFQUFFLElBQUlHLGFBQWFILHVCQUF1QixDQUFDLEVBQUU7SUFDckcsSUFBSUssWUFBWUgsUUFBUWxuQixNQUFNLEtBQUssSUFBSWtuQixPQUFPLENBQUMsRUFBRSxLQUFLQSxPQUFPLENBQUMsRUFBRSxHQUFHO0lBQ25FLE9BQU87UUFDTDVqQixPQUFPK2pCLFlBQVkzVCxNQUFNd1QsT0FBTyxDQUFDLEVBQUUsSUFBSXhULE1BQU13VDtRQUM3Q0ksYUFBYUYsZ0JBQWdCQztJQUMvQjtBQUNGO0FBRUEsU0FBU0UsbUJBQW1CblosSUFBSSxFQUFFb1osUUFBUTtJQUN4QyxJQUFJQyxtQkFBbUIsR0FBRy9kLE1BQU0sQ0FBQ3hCLGdDQUFnQ3dCLE1BQU0sQ0FBQzhkLFNBQVNubEIsT0FBTyxDQUFDLEtBQUs7SUFDOUYsT0FBTyxJQUFJc1ksUUFBUSxTQUFVcUQsT0FBTyxFQUFFcEQsTUFBTTtRQUMxQyxJQUFJeE0sS0FBS3ZELFlBQVksQ0FBQzRjLHNCQUFzQixNQUFNO1lBQ2hELHVDQUF1QztZQUN2QyxPQUFPeko7UUFDVDtRQUVBLElBQUk1TCxXQUFXbkUsUUFBUUcsS0FBS2dFLFFBQVE7UUFDcEMsSUFBSXNWLGdDQUFnQ3RWLFNBQVM5UyxNQUFNLENBQUMsU0FBVTBULENBQUM7WUFDN0QsT0FBT0EsRUFBRW5JLFlBQVksQ0FBQzVDLDRCQUE0QnVmO1FBQ3BELEVBQUUsQ0FBQyxFQUFFO1FBQ0wsSUFBSTFZLFNBQVNuSSxPQUFPZ2dCLGdCQUFnQixDQUFDdlksTUFBTW9aO1FBQzNDLElBQUlHLGFBQWE3WSxPQUFPOFksZ0JBQWdCLENBQUMsZUFBZTFNLEtBQUssQ0FBQzVSO1FBQzlELElBQUl1ZSxhQUFhL1ksT0FBTzhZLGdCQUFnQixDQUFDO1FBQ3pDLElBQUkvSyxVQUFVL04sT0FBTzhZLGdCQUFnQixDQUFDO1FBRXRDLElBQUlGLGlDQUFpQyxDQUFDQyxZQUFZO1lBQ2hELGlHQUFpRztZQUNqRyw4RkFBOEY7WUFDOUYsNkNBQTZDO1lBQzdDdlosS0FBSzBaLFdBQVcsQ0FBQ0o7WUFDakIsT0FBTzFKO1FBQ1QsT0FBTyxJQUFJMkosY0FBYzlLLFlBQVksVUFBVUEsWUFBWSxJQUFJO1lBQzdELElBQUlrTCxXQUFXalosT0FBTzhZLGdCQUFnQixDQUFDO1lBRXZDLElBQUloUixTQUFTLENBQUM7Z0JBQUM7YUFBUSxDQUFDdFAsT0FBTyxDQUFDcWdCLFVBQVUsQ0FBQyxFQUFFLElBQUloZixlQUFlRDtZQUNoRSxJQUFJOEosU0FBUyxDQUFDO2dCQUFDO2dCQUFTO2dCQUFXO2dCQUFTO2dCQUFRO2dCQUFXO2dCQUFVO2FBQU0sQ0FBQ2xMLE9BQU8sQ0FBQ3FnQixVQUFVLENBQUMsRUFBRSxJQUFJMWUsZUFBZSxDQUFDMk4sT0FBTyxDQUFDK1EsVUFBVSxDQUFDLEVBQUUsQ0FBQ0ssV0FBVyxHQUFHLEdBQUd6ZSxxQkFBcUIsQ0FBQ3FOLE9BQU8sQ0FBQ2lSLFdBQVc7WUFFek0sSUFBSUksdUJBQXVCaEIsb0JBQW9CYyxXQUMzQ0csV0FBV0QscUJBQXFCM2tCLEtBQUssRUFDckNna0IsY0FBY1cscUJBQXFCWCxXQUFXO1lBRWxELElBQUlhLE9BQU9SLFVBQVUsQ0FBQyxFQUFFLENBQUNTLFVBQVUsQ0FBQztZQUNwQyxJQUFJM1YsV0FBV29FLFVBQVVyRSxRQUFRMFY7WUFDakMsSUFBSUcsaUJBQWlCNVY7WUFFckIsSUFBSTBWLE1BQU07Z0JBQ1IsSUFBSUcsWUFBWXBSLGFBQWFnUjtnQkFFN0IsSUFBSUksVUFBVTdWLFFBQVEsSUFBSTZWLFVBQVU5VixNQUFNLEVBQUU7b0JBQzFDQyxXQUFXNlYsVUFBVTdWLFFBQVE7b0JBQzdCRCxTQUFTOFYsVUFBVTlWLE1BQU07Z0JBQzNCO1lBQ0YsRUFBRSwrRkFBK0Y7WUFDakcsb0RBQW9EO1lBR3BELElBQUlDLFlBQVksQ0FBQzZVLGVBQWdCLEVBQUNJLGlDQUFpQ0EsOEJBQThCN2MsWUFBWSxDQUFDMUMsaUJBQWlCcUssVUFBVWtWLDhCQUE4QjdjLFlBQVksQ0FBQ3pDLGVBQWVpZ0IsY0FBYSxHQUFJO2dCQUNsTmphLEtBQUtqQixZQUFZLENBQUNzYSxrQkFBa0JZO2dCQUVwQyxJQUFJWCwrQkFBK0I7b0JBQ2pDLDhEQUE4RDtvQkFDOUR0WixLQUFLMFosV0FBVyxDQUFDSjtnQkFDbkI7Z0JBRUEsSUFBSWEsT0FBT3JGO2dCQUNYLElBQUl6UCxRQUFROFUsS0FBSzlVLEtBQUs7Z0JBQ3RCQSxNQUFNaEYsVUFBVSxDQUFDeEcsdUJBQXVCLEdBQUd1ZjtnQkFDM0N6SixTQUFTdEwsVUFBVUQsUUFBUWdTLElBQUksQ0FBQyxTQUFVM0ksSUFBSTtvQkFDNUMsSUFBSTZELFlBQVl2RCxzQkFBc0J2YyxlQUFlQSxlQUFlLENBQUMsR0FBRzJvQixPQUFPLENBQUMsR0FBRzt3QkFDakZyVSxPQUFPOzRCQUNMMkgsTUFBTUE7NEJBQ05DLE1BQU14RTt3QkFDUjt3QkFDQTlFLFFBQVFBO3dCQUNSQyxVQUFVNFY7d0JBQ1Y1VSxPQUFPQTt3QkFDUGdKLFdBQVc7b0JBQ2I7b0JBRUEsSUFBSTlSLFVBQVUvRCxTQUFTa1ksZUFBZSxDQUFDLDhCQUE4QjtvQkFFckUsSUFBSTBJLGFBQWEsWUFBWTt3QkFDM0JwWixLQUFLVCxZQUFZLENBQUNoRCxTQUFTeUQsS0FBS3VVLFVBQVU7b0JBQzVDLE9BQU87d0JBQ0x2VSxLQUFLZ1IsV0FBVyxDQUFDelU7b0JBQ25CO29CQUVBQSxRQUFRNFUsU0FBUyxHQUFHRyxVQUFVdlYsR0FBRyxDQUFDLFNBQVUySSxDQUFDO3dCQUMzQyxPQUFPZixPQUFPZTtvQkFDaEIsR0FBR1QsSUFBSSxDQUFDO29CQUNSakUsS0FBS2dTLGVBQWUsQ0FBQ3FIO29CQUNyQnpKO2dCQUNGLEdBQUcwRyxLQUFLLENBQUM5SjtZQUNYLE9BQU87Z0JBQ0xvRDtZQUNGO1FBQ0YsT0FBTztZQUNMQTtRQUNGO0lBQ0Y7QUFDRjtBQUVBLFNBQVMzYixRQUFRK0wsSUFBSTtJQUNuQixPQUFPdU0sUUFBUTRKLEdBQUcsQ0FBQztRQUFDZ0QsbUJBQW1CblosTUFBTTtRQUFhbVosbUJBQW1CblosTUFBTTtLQUFXO0FBQ2hHO0FBRUEsU0FBU29hLFlBQVlwYSxJQUFJO0lBQ3ZCLE9BQU9BLEtBQUtxUixVQUFVLEtBQUt0WixTQUFTZSxJQUFJLElBQUksQ0FBQyxDQUFDcUIsb0NBQW9DakIsT0FBTyxDQUFDOEcsS0FBS1gsT0FBTyxDQUFDQyxXQUFXLE9BQU8sQ0FBQ1UsS0FBS3ZELFlBQVksQ0FBQzVDLDJCQUE0QixFQUFDbUcsS0FBS3FSLFVBQVUsSUFBSXJSLEtBQUtxUixVQUFVLENBQUNoUyxPQUFPLEtBQUssS0FBSTtBQUM5TjtBQUVBLFNBQVM5QixxQkFBcUJtWSxJQUFJO0lBQ2hDLElBQUksQ0FBQzljLFFBQVE7SUFDYixPQUFPLElBQUkyVCxRQUFRLFNBQVVxRCxPQUFPLEVBQUVwRCxNQUFNO1FBQzFDLElBQUk2TixhQUFheGEsUUFBUTZWLEtBQUtRLGdCQUFnQixDQUFDLE1BQU1obEIsTUFBTSxDQUFDa3BCLGFBQWFyZSxHQUFHLENBQUM5SDtRQUM3RSxJQUFJK2IsTUFBTUMsS0FBS0YsS0FBSyxDQUFDO1FBQ3JCNEM7UUFDQXBHLFFBQVE0SixHQUFHLENBQUNrRSxZQUFZakUsSUFBSSxDQUFDO1lBQzNCcEc7WUFDQTRDO1lBQ0FoRDtRQUNGLEdBQUcwRyxLQUFLLENBQUM7WUFDUHRHO1lBQ0E0QztZQUNBcEc7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxJQUFJOE4saUJBQWlCO0lBQ25CMVgsT0FBTyxTQUFTQTtRQUNkLE9BQU87WUFDTDBVLDJCQUEyQixTQUFTQSwwQkFBMEIzTCxXQUFXO2dCQUN2RUEsWUFBWTBILHNCQUFzQixHQUFHOVY7Z0JBQ3JDLE9BQU9vTztZQUNUO1FBQ0Y7SUFDRjtJQUNBRixVQUFVLFNBQVNBLFNBQVM4TCxZQUFZO1FBQ3RDQSxhQUFhZ0Qsa0JBQWtCLEdBQUcsU0FBVXRVLE1BQU07WUFDaEQsSUFBSXVSLGVBQWV2UixPQUFPakcsSUFBSSxFQUMxQkEsT0FBT3dYLGlCQUFpQixLQUFLLElBQUloZixXQUFXZ2Y7WUFFaEQsSUFBSXpaLE9BQU9SLG9CQUFvQixFQUFFO2dCQUMvQkEscUJBQXFCeUM7WUFDdkI7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxJQUFJd2EsYUFBYTtBQUNqQixJQUFJQyxxQkFBcUI7SUFDdkIvWCxRQUFRLFNBQVNBO1FBQ2YsT0FBTztZQUNMQyxLQUFLO2dCQUNIK1gsU0FBUyxTQUFTQTtvQkFDaEIvSDtvQkFDQTZILGFBQWE7Z0JBQ2Y7WUFDRjtRQUNGO0lBQ0Y7SUFDQTVYLE9BQU8sU0FBU0E7UUFDZCxPQUFPO1lBQ0wrWCxXQUFXLFNBQVNBO2dCQUNsQjdILFFBQVFwSCxXQUFXLDZCQUE2QixDQUFDO1lBQ25EO1lBQ0FXLFFBQVEsU0FBU0E7Z0JBQ2Y0SDtZQUNGO1lBQ0F4SCxPQUFPLFNBQVNBLE1BQU14RyxNQUFNO2dCQUMxQixJQUFJc04sdUJBQXVCdE4sT0FBT3NOLG9CQUFvQjtnQkFFdEQsSUFBSWlILFlBQVk7b0JBQ2Q1SDtnQkFDRixPQUFPO29CQUNMRSxRQUFRcEgsV0FBVyw2QkFBNkI7d0JBQzlDNkgsc0JBQXNCQTtvQkFDeEI7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7QUFDRjtBQUVBLElBQUlxSCx1QkFBdUIsU0FBU0EscUJBQXFCQyxlQUFlO0lBQ3RFLElBQUloYSxZQUFZO1FBQ2R2QyxNQUFNO1FBQ05DLEdBQUc7UUFDSEMsR0FBRztRQUNIRSxPQUFPO1FBQ1BDLE9BQU87UUFDUEYsUUFBUTtJQUNWO0lBQ0EsT0FBT29jLGdCQUFnQmpCLFdBQVcsR0FBRzFaLEtBQUssQ0FBQyxLQUFLeE0sTUFBTSxDQUFDLFNBQVU0TSxHQUFHLEVBQUVwSixDQUFDO1FBQ3JFLElBQUl3USxRQUFReFEsRUFBRTBpQixXQUFXLEdBQUcxWixLQUFLLENBQUM7UUFDbEMsSUFBSXlGLFFBQVErQixLQUFLLENBQUMsRUFBRTtRQUNwQixJQUFJeUIsT0FBT3pCLE1BQU1yVCxLQUFLLENBQUMsR0FBRzRQLElBQUksQ0FBQztRQUUvQixJQUFJMEIsU0FBU3dELFNBQVMsS0FBSztZQUN6QjdJLElBQUk1QixLQUFLLEdBQUc7WUFDWixPQUFPNEI7UUFDVDtRQUVBLElBQUlxRixTQUFTd0QsU0FBUyxLQUFLO1lBQ3pCN0ksSUFBSTNCLEtBQUssR0FBRztZQUNaLE9BQU8yQjtRQUNUO1FBRUE2SSxPQUFPMlIsV0FBVzNSO1FBRWxCLElBQUk0UixNQUFNNVIsT0FBTztZQUNmLE9BQU83STtRQUNUO1FBRUEsT0FBUXFGO1lBQ04sS0FBSztnQkFDSHJGLElBQUloQyxJQUFJLEdBQUdnQyxJQUFJaEMsSUFBSSxHQUFHNks7Z0JBQ3RCO1lBRUYsS0FBSztnQkFDSDdJLElBQUloQyxJQUFJLEdBQUdnQyxJQUFJaEMsSUFBSSxHQUFHNks7Z0JBQ3RCO1lBRUYsS0FBSztnQkFDSDdJLElBQUkvQixDQUFDLEdBQUcrQixJQUFJL0IsQ0FBQyxHQUFHNEs7Z0JBQ2hCO1lBRUYsS0FBSztnQkFDSDdJLElBQUkvQixDQUFDLEdBQUcrQixJQUFJL0IsQ0FBQyxHQUFHNEs7Z0JBQ2hCO1lBRUYsS0FBSztnQkFDSDdJLElBQUk5QixDQUFDLEdBQUc4QixJQUFJOUIsQ0FBQyxHQUFHMks7Z0JBQ2hCO1lBRUYsS0FBSztnQkFDSDdJLElBQUk5QixDQUFDLEdBQUc4QixJQUFJOUIsQ0FBQyxHQUFHMks7Z0JBQ2hCO1lBRUYsS0FBSztnQkFDSDdJLElBQUk3QixNQUFNLEdBQUc2QixJQUFJN0IsTUFBTSxHQUFHMEs7Z0JBQzFCO1FBQ0o7UUFFQSxPQUFPN0k7SUFDVCxHQUFHTztBQUNMO0FBQ0EsSUFBSW1hLGtCQUFrQjtJQUNwQnRZLFFBQVEsU0FBU0E7UUFDZixPQUFPO1lBQ0xrSyxPQUFPO2dCQUNML0wsV0FBVyxTQUFTQSxVQUFVZ2EsZUFBZTtvQkFDM0MsT0FBT0QscUJBQXFCQztnQkFDOUI7WUFDRjtRQUNGO0lBQ0Y7SUFDQWpZLE9BQU8sU0FBU0E7UUFDZCxPQUFPO1lBQ0xxWSxxQkFBcUIsU0FBU0Esb0JBQW9CdFAsV0FBVyxFQUFFM0wsSUFBSTtnQkFDakUsSUFBSTZhLGtCQUFrQjdhLEtBQUt2RCxZQUFZLENBQUM7Z0JBRXhDLElBQUlvZSxpQkFBaUI7b0JBQ25CbFAsWUFBWTlLLFNBQVMsR0FBRytaLHFCQUFxQkM7Z0JBQy9DO2dCQUVBLE9BQU9sUDtZQUNUO1FBQ0Y7SUFDRjtJQUNBRixVQUFVLFNBQVNBLFNBQVNWLFNBQVM7UUFDbkNBLFVBQVVtUSxpQ0FBaUMsR0FBRyxTQUFVL2lCLElBQUk7WUFDMUQsSUFBSXNWLE9BQU90VixLQUFLc1YsSUFBSSxFQUNoQjVNLFlBQVkxSSxLQUFLMEksU0FBUyxFQUMxQkUsaUJBQWlCNUksS0FBSzRJLGNBQWMsRUFDcENDLFlBQVk3SSxLQUFLNkksU0FBUztZQUM5QixJQUFJQyxRQUFRO2dCQUNWSixXQUFXLGFBQWF2RixNQUFNLENBQUN5RixpQkFBaUIsR0FBRztZQUNyRDtZQUNBLElBQUlHLGlCQUFpQixhQUFhNUYsTUFBTSxDQUFDdUYsVUFBVXRDLENBQUMsR0FBRyxJQUFJLE1BQU1qRCxNQUFNLENBQUN1RixVQUFVckMsQ0FBQyxHQUFHLElBQUk7WUFDMUYsSUFBSTJDLGFBQWEsU0FBUzdGLE1BQU0sQ0FBQ3VGLFVBQVV2QyxJQUFJLEdBQUcsS0FBTXVDLENBQUFBLFVBQVVuQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLElBQUksTUFBTXBELE1BQU0sQ0FBQ3VGLFVBQVV2QyxJQUFJLEdBQUcsS0FBTXVDLENBQUFBLFVBQVVsQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLElBQUk7WUFDbEosSUFBSXlDLGNBQWMsVUFBVTlGLE1BQU0sQ0FBQ3VGLFVBQVVwQyxNQUFNLEVBQUU7WUFDckQsSUFBSTRDLFFBQVE7Z0JBQ1ZSLFdBQVcsR0FBR3ZGLE1BQU0sQ0FBQzRGLGdCQUFnQixLQUFLNUYsTUFBTSxDQUFDNkYsWUFBWSxLQUFLN0YsTUFBTSxDQUFDOEY7WUFDM0U7WUFDQSxJQUFJRSxPQUFPO2dCQUNUVCxXQUFXLGFBQWF2RixNQUFNLENBQUMwRixZQUFZLElBQUksQ0FBQyxHQUFHO1lBQ3JEO1lBQ0EsSUFBSXFaLGFBQWE7Z0JBQ2ZwWixPQUFPQTtnQkFDUEksT0FBT0E7Z0JBQ1BDLE1BQU1BO1lBQ1I7WUFDQSxPQUFPO2dCQUNMdUMsS0FBSztnQkFDTHhELFlBQVk3TyxlQUFlLENBQUMsR0FBRzZvQixXQUFXcFosS0FBSztnQkFDL0MrQyxVQUFVO29CQUFDO3dCQUNUSCxLQUFLO3dCQUNMeEQsWUFBWTdPLGVBQWUsQ0FBQyxHQUFHNm9CLFdBQVdoWixLQUFLO3dCQUMvQzJDLFVBQVU7NEJBQUM7Z0NBQ1RILEtBQUs0SixLQUFLbkosSUFBSSxDQUFDVCxHQUFHO2dDQUNsQkcsVUFBVXlKLEtBQUtuSixJQUFJLENBQUNOLFFBQVE7Z0NBQzVCM0QsWUFBWTdPLGVBQWVBLGVBQWUsQ0FBQyxHQUFHaWMsS0FBS25KLElBQUksQ0FBQ2pFLFVBQVUsR0FBR2dhLFdBQVcvWSxJQUFJOzRCQUN0Rjt5QkFBRTtvQkFDSjtpQkFBRTtZQUNKO1FBQ0Y7SUFDRjtBQUNGO0FBRUEsSUFBSTZaLFlBQVk7SUFDZDVjLEdBQUc7SUFDSEMsR0FBRztJQUNIaUQsT0FBTztJQUNQRSxRQUFRO0FBQ1Y7QUFFQSxTQUFTeVosVUFBVTlKLFNBQVM7SUFDMUIsSUFBSStKLFFBQVExcEIsVUFBVUMsTUFBTSxHQUFHLEtBQUtELFNBQVMsQ0FBQyxFQUFFLEtBQUttTCxZQUFZbkwsU0FBUyxDQUFDLEVBQUUsR0FBRztJQUVoRixJQUFJMmYsVUFBVWpSLFVBQVUsSUFBS2lSLENBQUFBLFVBQVVqUixVQUFVLENBQUNpUCxJQUFJLElBQUkrTCxLQUFJLEdBQUk7UUFDaEUvSixVQUFValIsVUFBVSxDQUFDaVAsSUFBSSxHQUFHO0lBQzlCO0lBRUEsT0FBT2dDO0FBQ1Q7QUFFQSxTQUFTZ0ssUUFBUTNKLFVBQVU7SUFDekIsSUFBSUEsV0FBVzlOLEdBQUcsS0FBSyxLQUFLO1FBQzFCLE9BQU84TixXQUFXM04sUUFBUTtJQUM1QixPQUFPO1FBQ0wsT0FBTztZQUFDMk47U0FBVztJQUNyQjtBQUNGO0FBRUEsSUFBSTRKLFFBQVE7SUFDVjNZLE9BQU8sU0FBU0E7UUFDZCxPQUFPO1lBQ0xxWSxxQkFBcUIsU0FBU0Esb0JBQW9CdFAsV0FBVyxFQUFFM0wsSUFBSTtnQkFDakUsSUFBSXdiLFdBQVd4YixLQUFLdkQsWUFBWSxDQUFDO2dCQUNqQyxJQUFJaVIsT0FBTyxDQUFDOE4sV0FBV3RTLHVCQUF1Qk0saUJBQWlCZ1MsU0FBU3RiLEtBQUssQ0FBQyxLQUFLbkUsR0FBRyxDQUFDLFNBQVVySyxDQUFDO29CQUNoRyxPQUFPQSxFQUFFOE8sSUFBSTtnQkFDZjtnQkFFQSxJQUFJLENBQUNrTixLQUFLdEosTUFBTSxFQUFFO29CQUNoQnNKLEtBQUt0SixNQUFNLEdBQUc2RTtnQkFDaEI7Z0JBRUEwQyxZQUFZK0IsSUFBSSxHQUFHQTtnQkFDbkIvQixZQUFZdUMsTUFBTSxHQUFHbE8sS0FBS3ZELFlBQVksQ0FBQztnQkFDdkMsT0FBT2tQO1lBQ1Q7UUFDRjtJQUNGO0lBQ0FGLFVBQVUsU0FBU0EsU0FBU1YsU0FBUztRQUNuQ0EsVUFBVTBRLG9CQUFvQixHQUFHLFNBQVV0akIsSUFBSTtZQUM3QyxJQUFJNkwsV0FBVzdMLEtBQUs2TCxRQUFRLEVBQ3hCM0QsYUFBYWxJLEtBQUtrSSxVQUFVLEVBQzVCb04sT0FBT3RWLEtBQUtzVixJQUFJLEVBQ2hCQyxPQUFPdlYsS0FBS3VWLElBQUksRUFDaEJnTyxpQkFBaUJ2akIsS0FBSytWLE1BQU0sRUFDNUJyTixZQUFZMUksS0FBSzBJLFNBQVM7WUFDOUIsSUFBSThhLFlBQVlsTyxLQUFLaE0sS0FBSyxFQUN0Qm1hLFdBQVduTyxLQUFLbkosSUFBSTtZQUN4QixJQUFJdVgsWUFBWW5PLEtBQUtqTSxLQUFLLEVBQ3RCcWEsV0FBV3BPLEtBQUtwSixJQUFJO1lBQ3hCLElBQUl5WCxRQUFRamIsZ0JBQWdCO2dCQUMxQkQsV0FBV0E7Z0JBQ1hFLGdCQUFnQjhhO2dCQUNoQjdhLFdBQVcyYTtZQUNiO1lBQ0EsSUFBSUssV0FBVztnQkFDYm5ZLEtBQUs7Z0JBQ0x4RCxZQUFZN08sZUFBZUEsZUFBZSxDQUFDLEdBQUcycEIsWUFBWSxDQUFDLEdBQUc7b0JBQzVEN0wsTUFBTTtnQkFDUjtZQUNGO1lBQ0EsSUFBSTJNLDhCQUE4QkwsU0FBUzVYLFFBQVEsR0FBRztnQkFDcERBLFVBQVU0WCxTQUFTNVgsUUFBUSxDQUFDakksR0FBRyxDQUFDcWY7WUFDbEMsSUFBSSxDQUFDO1lBQ0wsSUFBSWMsaUJBQWlCO2dCQUNuQnJZLEtBQUs7Z0JBQ0x4RCxZQUFZN08sZUFBZSxDQUFDLEdBQUd1cUIsTUFBTTFhLEtBQUs7Z0JBQzFDMkMsVUFBVTtvQkFBQ29YLFVBQVU1cEIsZUFBZTt3QkFDbENxUyxLQUFLK1gsU0FBUy9YLEdBQUc7d0JBQ2pCeEQsWUFBWTdPLGVBQWVBLGVBQWUsQ0FBQyxHQUFHb3FCLFNBQVN2YixVQUFVLEdBQUcwYixNQUFNemEsSUFBSTtvQkFDaEYsR0FBRzJhO2lCQUE4QjtZQUNuQztZQUNBLElBQUlFLGlCQUFpQjtnQkFDbkJ0WSxLQUFLO2dCQUNMeEQsWUFBWTdPLGVBQWUsQ0FBQyxHQUFHdXFCLE1BQU05YSxLQUFLO2dCQUMxQytDLFVBQVU7b0JBQUNrWTtpQkFBZTtZQUM1QjtZQUNBLElBQUloTyxTQUFTLFFBQVE1UyxNQUFNLENBQUNvZ0Isa0JBQWtCamM7WUFDOUMsSUFBSTJjLFNBQVMsUUFBUTlnQixNQUFNLENBQUNvZ0Isa0JBQWtCamM7WUFDOUMsSUFBSTRjLFVBQVU7Z0JBQ1p4WSxLQUFLO2dCQUNMeEQsWUFBWTdPLGVBQWVBLGVBQWUsQ0FBQyxHQUFHMnBCLFlBQVksQ0FBQyxHQUFHO29CQUM1RHpiLElBQUl3TztvQkFDSm9PLFdBQVc7b0JBQ1hDLGtCQUFrQjtnQkFDcEI7Z0JBQ0F2WSxVQUFVO29CQUFDZ1k7b0JBQVVHO2lCQUFlO1lBQ3RDO1lBQ0EsSUFBSUssT0FBTztnQkFDVDNZLEtBQUs7Z0JBQ0xHLFVBQVU7b0JBQUM7d0JBQ1RILEtBQUs7d0JBQ0x4RCxZQUFZOzRCQUNWWCxJQUFJMGM7d0JBQ047d0JBQ0FwWSxVQUFVc1gsUUFBUVE7b0JBQ3BCO29CQUFHTztpQkFBUTtZQUNiO1lBQ0FyWSxTQUFTMVMsSUFBSSxDQUFDa3JCLE1BQU07Z0JBQ2xCM1ksS0FBSztnQkFDTHhELFlBQVk3TyxlQUFlO29CQUN6QjhkLE1BQU07b0JBQ04sYUFBYSxRQUFRaFUsTUFBTSxDQUFDOGdCLFFBQVE7b0JBQ3BDMU8sTUFBTSxRQUFRcFMsTUFBTSxDQUFDNFMsUUFBUTtnQkFDL0IsR0FBR2lOO1lBQ0w7WUFDQSxPQUFPO2dCQUNMblgsVUFBVUE7Z0JBQ1YzRCxZQUFZQTtZQUNkO1FBQ0Y7SUFDRjtBQUNGO0FBRUEsSUFBSW9jLHVCQUF1QjtJQUN6QmhSLFVBQVUsU0FBU0EsU0FBU1YsU0FBUztRQUNuQyxJQUFJMlIsZUFBZTtRQUVuQixJQUFJbmtCLE9BQU9va0IsVUFBVSxFQUFFO1lBQ3JCRCxlQUFlbmtCLE9BQU9va0IsVUFBVSxDQUFDLG9DQUFvQ0MsT0FBTztRQUM5RTtRQUVBN1IsVUFBVThSLG1CQUFtQixHQUFHO1lBQzlCLElBQUlDLFlBQVksRUFBRTtZQUNsQixJQUFJQyxPQUFPO2dCQUNUek4sTUFBTTtZQUNSO1lBQ0EsSUFBSTBOLGlCQUFpQjtnQkFDbkJDLGVBQWU7Z0JBQ2ZDLGFBQWE7Z0JBQ2JDLEtBQUs7WUFDUCxHQUFHLE9BQU87WUFFVkwsVUFBVXhyQixJQUFJLENBQUM7Z0JBQ2J1UyxLQUFLO2dCQUNMeEQsWUFBWTdPLGVBQWVBLGVBQWUsQ0FBQyxHQUFHdXJCLE9BQU8sQ0FBQyxHQUFHO29CQUN2RDNlLEdBQUc7Z0JBQ0w7WUFDRjtZQUVBLElBQUlnZixrQkFBa0I1ckIsZUFBZUEsZUFBZSxDQUFDLEdBQUd3ckIsaUJBQWlCLENBQUMsR0FBRztnQkFDM0V6YyxlQUFlO1lBQ2pCO1lBRUEsSUFBSThjLE1BQU07Z0JBQ1J4WixLQUFLO2dCQUNMeEQsWUFBWTdPLGVBQWVBLGVBQWUsQ0FBQyxHQUFHdXJCLE9BQU8sQ0FBQyxHQUFHO29CQUN2RE8sSUFBSTtvQkFDSkMsSUFBSTtvQkFDSkMsR0FBRztnQkFDTDtnQkFDQXhaLFVBQVUsRUFBRTtZQUNkO1lBRUEsSUFBSSxDQUFDMFksY0FBYztnQkFDakJXLElBQUlyWixRQUFRLENBQUMxUyxJQUFJLENBQUM7b0JBQ2hCdVMsS0FBSztvQkFDTHhELFlBQVk3TyxlQUFlQSxlQUFlLENBQUMsR0FBR3dyQixpQkFBaUIsQ0FBQyxHQUFHO3dCQUNqRXpjLGVBQWU7d0JBQ2Z3RyxRQUFRO29CQUNWO2dCQUNGLEdBQUc7b0JBQ0RsRCxLQUFLO29CQUNMeEQsWUFBWTdPLGVBQWVBLGVBQWUsQ0FBQyxHQUFHNHJCLGtCQUFrQixDQUFDLEdBQUc7d0JBQ2xFclcsUUFBUTtvQkFDVjtnQkFDRjtZQUNGO1lBRUErVixVQUFVeHJCLElBQUksQ0FBQytyQjtZQUNmUCxVQUFVeHJCLElBQUksQ0FBQztnQkFDYnVTLEtBQUs7Z0JBQ0x4RCxZQUFZN08sZUFBZUEsZUFBZSxDQUFDLEdBQUd1ckIsT0FBTyxDQUFDLEdBQUc7b0JBQ3ZEVSxTQUFTO29CQUNUcmYsR0FBRztnQkFDTDtnQkFDQTRGLFVBQVUwWSxlQUFlLEVBQUUsR0FBRztvQkFBQzt3QkFDN0I3WSxLQUFLO3dCQUNMeEQsWUFBWTdPLGVBQWVBLGVBQWUsQ0FBQyxHQUFHNHJCLGtCQUFrQixDQUFDLEdBQUc7NEJBQ2xFclcsUUFBUTt3QkFDVjtvQkFDRjtpQkFBRTtZQUNKO1lBRUEsSUFBSSxDQUFDMlYsY0FBYztnQkFDakIsY0FBYztnQkFDZEksVUFBVXhyQixJQUFJLENBQUM7b0JBQ2J1UyxLQUFLO29CQUNMeEQsWUFBWTdPLGVBQWVBLGVBQWUsQ0FBQyxHQUFHdXJCLE9BQU8sQ0FBQyxHQUFHO3dCQUN2RFUsU0FBUzt3QkFDVHJmLEdBQUc7b0JBQ0w7b0JBQ0E0RixVQUFVO3dCQUFDOzRCQUNUSCxLQUFLOzRCQUNMeEQsWUFBWTdPLGVBQWVBLGVBQWUsQ0FBQyxHQUFHNHJCLGtCQUFrQixDQUFDLEdBQUc7Z0NBQ2xFclcsUUFBUTs0QkFDVjt3QkFDRjtxQkFBRTtnQkFDSjtZQUNGO1lBRUEsT0FBTztnQkFDTGxELEtBQUs7Z0JBQ0x4RCxZQUFZO29CQUNWLFNBQVM7Z0JBQ1g7Z0JBQ0EyRCxVQUFVOFk7WUFDWjtRQUNGO0lBQ0Y7QUFDRjtBQUVBLElBQUlZLGFBQWE7SUFDZjlhLE9BQU8sU0FBU0E7UUFDZCxPQUFPO1lBQ0xxWSxxQkFBcUIsU0FBU0Esb0JBQW9CdFAsV0FBVyxFQUFFM0wsSUFBSTtnQkFDakUsSUFBSTJkLGFBQWEzZCxLQUFLdkQsWUFBWSxDQUFDO2dCQUNuQyxJQUFJcVIsU0FBUzZQLGVBQWUsT0FBTyxRQUFRQSxlQUFlLEtBQUssT0FBT0E7Z0JBQ3RFaFMsV0FBVyxDQUFDLFNBQVMsR0FBR21DO2dCQUN4QixPQUFPbkM7WUFDVDtRQUNGO0lBQ0Y7QUFDRjtBQUVBLElBQUlpUyxVQUFVO0lBQUNuYjtJQUFXNFU7SUFBaUJTO0lBQVFHO0lBQWVDO0lBQVlvQztJQUFnQkc7SUFBb0JPO0lBQWlCTztJQUFPa0I7SUFBc0JpQjtDQUFXO0FBRTNLelMsZ0JBQWdCMlMsU0FBUztJQUN2QnpTLFdBQVc4QjtBQUNiO0FBQ0EsSUFBSTRRLFdBQVc1USxJQUFJWixNQUFNO0FBQ3pCLElBQUl5UixXQUFXN1EsSUFBSWxQLE1BQU07QUFDekIsSUFBSWdnQixZQUFZOVEsSUFBSWIsT0FBTztBQUMzQixJQUFJNFIsUUFBUS9RLElBQUl0SyxHQUFHO0FBQ25CLElBQUlzYixVQUFVaFIsSUFBSUwsS0FBSztBQUN2QixJQUFJc1IsdUJBQXVCalIsSUFBSWYsa0JBQWtCO0FBQ2pELElBQUlpUyxXQUFXbFIsSUFBSXRKLE1BQU07QUFDekIsSUFBSVcsT0FBTzJJLElBQUkzSSxJQUFJO0FBQ25CLElBQUl5VCxRQUFROUssSUFBSThLLEtBQUs7QUFDckIsSUFBSUksT0FBT2xMLElBQUlrTCxJQUFJO0FBQ25CLElBQUloVCxVQUFVOEgsSUFBSTlILE9BQU87QUFFZ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wbGF0YW5rYXdlYi8uL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtc3ZnLWNvcmUvaW5kZXgubWpzPzQwMGQiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgIGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgfSwgX3R5cGVvZihvYmopO1xufVxuXG5mdW5jdGlvbiBfd3JhcFJlZ0V4cCgpIHtcbiAgX3dyYXBSZWdFeHAgPSBmdW5jdGlvbiAocmUsIGdyb3Vwcykge1xuICAgIHJldHVybiBuZXcgQmFiZWxSZWdFeHAocmUsIHZvaWQgMCwgZ3JvdXBzKTtcbiAgfTtcblxuICB2YXIgX3N1cGVyID0gUmVnRXhwLnByb3RvdHlwZSxcbiAgICAgIF9ncm91cHMgPSBuZXcgV2Vha01hcCgpO1xuXG4gIGZ1bmN0aW9uIEJhYmVsUmVnRXhwKHJlLCBmbGFncywgZ3JvdXBzKSB7XG4gICAgdmFyIF90aGlzID0gbmV3IFJlZ0V4cChyZSwgZmxhZ3MpO1xuXG4gICAgcmV0dXJuIF9ncm91cHMuc2V0KF90aGlzLCBncm91cHMgfHwgX2dyb3Vwcy5nZXQocmUpKSwgX3NldFByb3RvdHlwZU9mKF90aGlzLCBCYWJlbFJlZ0V4cC5wcm90b3R5cGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRHcm91cHMocmVzdWx0LCByZSkge1xuICAgIHZhciBnID0gX2dyb3Vwcy5nZXQocmUpO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGcpLnJlZHVjZShmdW5jdGlvbiAoZ3JvdXBzLCBuYW1lKSB7XG4gICAgICByZXR1cm4gZ3JvdXBzW25hbWVdID0gcmVzdWx0W2dbbmFtZV1dLCBncm91cHM7XG4gICAgfSwgT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gIH1cblxuICByZXR1cm4gX2luaGVyaXRzKEJhYmVsUmVnRXhwLCBSZWdFeHApLCBCYWJlbFJlZ0V4cC5wcm90b3R5cGUuZXhlYyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICB2YXIgcmVzdWx0ID0gX3N1cGVyLmV4ZWMuY2FsbCh0aGlzLCBzdHIpO1xuXG4gICAgcmV0dXJuIHJlc3VsdCAmJiAocmVzdWx0Lmdyb3VwcyA9IGJ1aWxkR3JvdXBzKHJlc3VsdCwgdGhpcykpLCByZXN1bHQ7XG4gIH0sIEJhYmVsUmVnRXhwLnByb3RvdHlwZVtTeW1ib2wucmVwbGFjZV0gPSBmdW5jdGlvbiAoc3RyLCBzdWJzdGl0dXRpb24pIHtcbiAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2Ygc3Vic3RpdHV0aW9uKSB7XG4gICAgICB2YXIgZ3JvdXBzID0gX2dyb3Vwcy5nZXQodGhpcyk7XG5cbiAgICAgIHJldHVybiBfc3VwZXJbU3ltYm9sLnJlcGxhY2VdLmNhbGwodGhpcywgc3RyLCBzdWJzdGl0dXRpb24ucmVwbGFjZSgvXFwkPChbXj5dKyk+L2csIGZ1bmN0aW9uIChfLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBcIiRcIiArIGdyb3Vwc1tuYW1lXTtcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBzdWJzdGl0dXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHJldHVybiBfc3VwZXJbU3ltYm9sLnJlcGxhY2VdLmNhbGwodGhpcywgc3RyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICByZXR1cm4gXCJvYmplY3RcIiAhPSB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdICYmIChhcmdzID0gW10uc2xpY2UuY2FsbChhcmdzKSkucHVzaChidWlsZEdyb3VwcyhhcmdzLCBfdGhpcykpLCBzdWJzdGl0dXRpb24uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3N1cGVyW1N5bWJvbC5yZXBsYWNlXS5jYWxsKHRoaXMsIHN0ciwgc3Vic3RpdHV0aW9uKTtcbiAgfSwgX3dyYXBSZWdFeHAuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTtcbn1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICB2YXIgX2kgPSBhcnIgPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07XG5cbiAgaWYgKF9pID09IG51bGwpIHJldHVybjtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG5cbiAgdmFyIF9zLCBfZTtcblxuICB0cnkge1xuICAgIGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTtcblxuICByZXR1cm4gYXJyMjtcbn1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbnZhciBfV0lORE9XID0ge307XG52YXIgX0RPQ1VNRU5UID0ge307XG52YXIgX01VVEFUSU9OX09CU0VSVkVSID0gbnVsbDtcbnZhciBfUEVSRk9STUFOQ0UgPSB7XG4gIG1hcms6IG5vb3AsXG4gIG1lYXN1cmU6IG5vb3Bcbn07XG5cbnRyeSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgX1dJTkRPVyA9IHdpbmRvdztcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIF9ET0NVTUVOVCA9IGRvY3VtZW50O1xuICBpZiAodHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnKSBfTVVUQVRJT05fT0JTRVJWRVIgPSBNdXRhdGlvbk9ic2VydmVyO1xuICBpZiAodHlwZW9mIHBlcmZvcm1hbmNlICE9PSAndW5kZWZpbmVkJykgX1BFUkZPUk1BTkNFID0gcGVyZm9ybWFuY2U7XG59IGNhdGNoIChlKSB7fVxuXG52YXIgX3JlZiA9IF9XSU5ET1cubmF2aWdhdG9yIHx8IHt9LFxuICAgIF9yZWYkdXNlckFnZW50ID0gX3JlZi51c2VyQWdlbnQsXG4gICAgdXNlckFnZW50ID0gX3JlZiR1c2VyQWdlbnQgPT09IHZvaWQgMCA/ICcnIDogX3JlZiR1c2VyQWdlbnQ7XG52YXIgV0lORE9XID0gX1dJTkRPVztcbnZhciBET0NVTUVOVCA9IF9ET0NVTUVOVDtcbnZhciBNVVRBVElPTl9PQlNFUlZFUiA9IF9NVVRBVElPTl9PQlNFUlZFUjtcbnZhciBQRVJGT1JNQU5DRSA9IF9QRVJGT1JNQU5DRTtcbnZhciBJU19CUk9XU0VSID0gISFXSU5ET1cuZG9jdW1lbnQ7XG52YXIgSVNfRE9NID0gISFET0NVTUVOVC5kb2N1bWVudEVsZW1lbnQgJiYgISFET0NVTUVOVC5oZWFkICYmIHR5cGVvZiBET0NVTUVOVC5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBET0NVTUVOVC5jcmVhdGVFbGVtZW50ID09PSAnZnVuY3Rpb24nO1xudmFyIElTX0lFID0gfnVzZXJBZ2VudC5pbmRleE9mKCdNU0lFJykgfHwgfnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50LycpO1xuXG52YXIgX2ZhbWlseVByb3h5LCBfZmFtaWx5UHJveHkyLCBfZmFtaWx5UHJveHkzLCBfZmFtaWx5UHJveHk0LCBfZmFtaWx5UHJveHk1O1xuXG52YXIgTkFNRVNQQUNFX0lERU5USUZJRVIgPSAnX19fRk9OVF9BV0VTT01FX19fJztcbnZhciBVTklUU19JTl9HUklEID0gMTY7XG52YXIgREVGQVVMVF9DU1NfUFJFRklYID0gJ2ZhJztcbnZhciBERUZBVUxUX1JFUExBQ0VNRU5UX0NMQVNTID0gJ3N2Zy1pbmxpbmUtLWZhJztcbnZhciBEQVRBX0ZBX0kyU1ZHID0gJ2RhdGEtZmEtaTJzdmcnO1xudmFyIERBVEFfRkFfUFNFVURPX0VMRU1FTlQgPSAnZGF0YS1mYS1wc2V1ZG8tZWxlbWVudCc7XG52YXIgREFUQV9GQV9QU0VVRE9fRUxFTUVOVF9QRU5ESU5HID0gJ2RhdGEtZmEtcHNldWRvLWVsZW1lbnQtcGVuZGluZyc7XG52YXIgREFUQV9QUkVGSVggPSAnZGF0YS1wcmVmaXgnO1xudmFyIERBVEFfSUNPTiA9ICdkYXRhLWljb24nO1xudmFyIEhUTUxfQ0xBU1NfSTJTVkdfQkFTRV9DTEFTUyA9ICdmb250YXdlc29tZS1pMnN2Zyc7XG52YXIgTVVUQVRJT05fQVBQUk9BQ0hfQVNZTkMgPSAnYXN5bmMnO1xudmFyIFRBR05BTUVTX1RPX1NLSVBfRk9SX1BTRVVET0VMRU1FTlRTID0gWydIVE1MJywgJ0hFQUQnLCAnU1RZTEUnLCAnU0NSSVBUJ107XG52YXIgUFJPRFVDVElPTiA9IGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufSgpO1xudmFyIEZBTUlMWV9DTEFTU0lDID0gJ2NsYXNzaWMnO1xudmFyIEZBTUlMWV9TSEFSUCA9ICdzaGFycCc7XG52YXIgRkFNSUxJRVMgPSBbRkFNSUxZX0NMQVNTSUMsIEZBTUlMWV9TSEFSUF07XG5cbmZ1bmN0aW9uIGZhbWlseVByb3h5KG9iaikge1xuICAvLyBEZWZhdWx0cyB0byB0aGUgY2xhc3NpYyBmYW1pbHkgaWYgZmFtaWx5IGlzIG5vdCBhdmFpbGFibGVcbiAgcmV0dXJuIG5ldyBQcm94eShvYmosIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgIHJldHVybiBwcm9wIGluIHRhcmdldCA/IHRhcmdldFtwcm9wXSA6IHRhcmdldFtGQU1JTFlfQ0xBU1NJQ107XG4gICAgfVxuICB9KTtcbn1cbnZhciBQUkVGSVhfVE9fU1RZTEUgPSBmYW1pbHlQcm94eSgoX2ZhbWlseVByb3h5ID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfZmFtaWx5UHJveHksIEZBTUlMWV9DTEFTU0lDLCB7XG4gICdmYSc6ICdzb2xpZCcsXG4gICdmYXMnOiAnc29saWQnLFxuICAnZmEtc29saWQnOiAnc29saWQnLFxuICAnZmFyJzogJ3JlZ3VsYXInLFxuICAnZmEtcmVndWxhcic6ICdyZWd1bGFyJyxcbiAgJ2ZhbCc6ICdsaWdodCcsXG4gICdmYS1saWdodCc6ICdsaWdodCcsXG4gICdmYXQnOiAndGhpbicsXG4gICdmYS10aGluJzogJ3RoaW4nLFxuICAnZmFkJzogJ2R1b3RvbmUnLFxuICAnZmEtZHVvdG9uZSc6ICdkdW90b25lJyxcbiAgJ2ZhYic6ICdicmFuZHMnLFxuICAnZmEtYnJhbmRzJzogJ2JyYW5kcycsXG4gICdmYWsnOiAna2l0JyxcbiAgJ2ZhLWtpdCc6ICdraXQnXG59KSwgX2RlZmluZVByb3BlcnR5KF9mYW1pbHlQcm94eSwgRkFNSUxZX1NIQVJQLCB7XG4gICdmYSc6ICdzb2xpZCcsXG4gICdmYXNzJzogJ3NvbGlkJyxcbiAgJ2ZhLXNvbGlkJzogJ3NvbGlkJyxcbiAgJ2Zhc3InOiAncmVndWxhcicsXG4gICdmYS1yZWd1bGFyJzogJ3JlZ3VsYXInLFxuICAnZmFzbCc6ICdsaWdodCcsXG4gICdmYS1saWdodCc6ICdsaWdodCdcbn0pLCBfZmFtaWx5UHJveHkpKTtcbnZhciBTVFlMRV9UT19QUkVGSVggPSBmYW1pbHlQcm94eSgoX2ZhbWlseVByb3h5MiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2ZhbWlseVByb3h5MiwgRkFNSUxZX0NMQVNTSUMsIHtcbiAgJ3NvbGlkJzogJ2ZhcycsXG4gICdyZWd1bGFyJzogJ2ZhcicsXG4gICdsaWdodCc6ICdmYWwnLFxuICAndGhpbic6ICdmYXQnLFxuICAnZHVvdG9uZSc6ICdmYWQnLFxuICAnYnJhbmRzJzogJ2ZhYicsXG4gICdraXQnOiAnZmFrJ1xufSksIF9kZWZpbmVQcm9wZXJ0eShfZmFtaWx5UHJveHkyLCBGQU1JTFlfU0hBUlAsIHtcbiAgJ3NvbGlkJzogJ2Zhc3MnLFxuICAncmVndWxhcic6ICdmYXNyJyxcbiAgJ2xpZ2h0JzogJ2Zhc2wnXG59KSwgX2ZhbWlseVByb3h5MikpO1xudmFyIFBSRUZJWF9UT19MT05HX1NUWUxFID0gZmFtaWx5UHJveHkoKF9mYW1pbHlQcm94eTMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9mYW1pbHlQcm94eTMsIEZBTUlMWV9DTEFTU0lDLCB7XG4gICdmYWInOiAnZmEtYnJhbmRzJyxcbiAgJ2ZhZCc6ICdmYS1kdW90b25lJyxcbiAgJ2Zhayc6ICdmYS1raXQnLFxuICAnZmFsJzogJ2ZhLWxpZ2h0JyxcbiAgJ2Zhcic6ICdmYS1yZWd1bGFyJyxcbiAgJ2Zhcyc6ICdmYS1zb2xpZCcsXG4gICdmYXQnOiAnZmEtdGhpbidcbn0pLCBfZGVmaW5lUHJvcGVydHkoX2ZhbWlseVByb3h5MywgRkFNSUxZX1NIQVJQLCB7XG4gICdmYXNzJzogJ2ZhLXNvbGlkJyxcbiAgJ2Zhc3InOiAnZmEtcmVndWxhcicsXG4gICdmYXNsJzogJ2ZhLWxpZ2h0J1xufSksIF9mYW1pbHlQcm94eTMpKTtcbnZhciBMT05HX1NUWUxFX1RPX1BSRUZJWCA9IGZhbWlseVByb3h5KChfZmFtaWx5UHJveHk0ID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfZmFtaWx5UHJveHk0LCBGQU1JTFlfQ0xBU1NJQywge1xuICAnZmEtYnJhbmRzJzogJ2ZhYicsXG4gICdmYS1kdW90b25lJzogJ2ZhZCcsXG4gICdmYS1raXQnOiAnZmFrJyxcbiAgJ2ZhLWxpZ2h0JzogJ2ZhbCcsXG4gICdmYS1yZWd1bGFyJzogJ2ZhcicsXG4gICdmYS1zb2xpZCc6ICdmYXMnLFxuICAnZmEtdGhpbic6ICdmYXQnXG59KSwgX2RlZmluZVByb3BlcnR5KF9mYW1pbHlQcm94eTQsIEZBTUlMWV9TSEFSUCwge1xuICAnZmEtc29saWQnOiAnZmFzcycsXG4gICdmYS1yZWd1bGFyJzogJ2Zhc3InLFxuICAnZmEtbGlnaHQnOiAnZmFzbCdcbn0pLCBfZmFtaWx5UHJveHk0KSk7XG52YXIgSUNPTl9TRUxFQ1RJT05fU1lOVEFYX1BBVFRFUk4gPSAvZmEoc3xyfGx8dHxkfGJ8a3xzc3xzcnxzbCk/W1xcLVxcIF0vOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG5cbnZhciBMQVlFUlNfVEVYVF9DTEFTU05BTUUgPSAnZmEtbGF5ZXJzLXRleHQnO1xudmFyIEZPTlRfRkFNSUxZX1BBVFRFUk4gPSAvRm9udCA/QXdlc29tZSA/KFs1NiBdKikoU29saWR8UmVndWxhcnxMaWdodHxUaGlufER1b3RvbmV8QnJhbmRzfEZyZWV8UHJvfFNoYXJwfEtpdCk/LiovaTtcbnZhciBGT05UX1dFSUdIVF9UT19QUkVGSVggPSBmYW1pbHlQcm94eSgoX2ZhbWlseVByb3h5NSA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2ZhbWlseVByb3h5NSwgRkFNSUxZX0NMQVNTSUMsIHtcbiAgJzkwMCc6ICdmYXMnLFxuICAnNDAwJzogJ2ZhcicsXG4gICdub3JtYWwnOiAnZmFyJyxcbiAgJzMwMCc6ICdmYWwnLFxuICAnMTAwJzogJ2ZhdCdcbn0pLCBfZGVmaW5lUHJvcGVydHkoX2ZhbWlseVByb3h5NSwgRkFNSUxZX1NIQVJQLCB7XG4gICc5MDAnOiAnZmFzcycsXG4gICc0MDAnOiAnZmFzcicsXG4gICczMDAnOiAnZmFzbCdcbn0pLCBfZmFtaWx5UHJveHk1KSk7XG52YXIgb25lVG9UZW4gPSBbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTBdO1xudmFyIG9uZVRvVHdlbnR5ID0gb25lVG9UZW4uY29uY2F0KFsxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5LCAyMF0pO1xudmFyIEFUVFJJQlVURVNfV0FUQ0hFRF9GT1JfTVVUQVRJT04gPSBbJ2NsYXNzJywgJ2RhdGEtcHJlZml4JywgJ2RhdGEtaWNvbicsICdkYXRhLWZhLXRyYW5zZm9ybScsICdkYXRhLWZhLW1hc2snXTtcbnZhciBEVU9UT05FX0NMQVNTRVMgPSB7XG4gIEdST1VQOiAnZHVvdG9uZS1ncm91cCcsXG4gIFNXQVBfT1BBQ0lUWTogJ3N3YXAtb3BhY2l0eScsXG4gIFBSSU1BUlk6ICdwcmltYXJ5JyxcbiAgU0VDT05EQVJZOiAnc2Vjb25kYXJ5J1xufTtcbnZhciBwcmVmaXhlcyA9IG5ldyBTZXQoKTtcbk9iamVjdC5rZXlzKFNUWUxFX1RPX1BSRUZJWFtGQU1JTFlfQ0xBU1NJQ10pLm1hcChwcmVmaXhlcy5hZGQuYmluZChwcmVmaXhlcykpO1xuT2JqZWN0LmtleXMoU1RZTEVfVE9fUFJFRklYW0ZBTUlMWV9TSEFSUF0pLm1hcChwcmVmaXhlcy5hZGQuYmluZChwcmVmaXhlcykpO1xudmFyIFJFU0VSVkVEX0NMQVNTRVMgPSBbXS5jb25jYXQoRkFNSUxJRVMsIF90b0NvbnN1bWFibGVBcnJheShwcmVmaXhlcyksIFsnMnhzJywgJ3hzJywgJ3NtJywgJ2xnJywgJ3hsJywgJzJ4bCcsICdiZWF0JywgJ2JvcmRlcicsICdmYWRlJywgJ2JlYXQtZmFkZScsICdib3VuY2UnLCAnZmxpcC1ib3RoJywgJ2ZsaXAtaG9yaXpvbnRhbCcsICdmbGlwLXZlcnRpY2FsJywgJ2ZsaXAnLCAnZncnLCAnaW52ZXJzZScsICdsYXllcnMtY291bnRlcicsICdsYXllcnMtdGV4dCcsICdsYXllcnMnLCAnbGknLCAncHVsbC1sZWZ0JywgJ3B1bGwtcmlnaHQnLCAncHVsc2UnLCAncm90YXRlLTE4MCcsICdyb3RhdGUtMjcwJywgJ3JvdGF0ZS05MCcsICdyb3RhdGUtYnknLCAnc2hha2UnLCAnc3Bpbi1wdWxzZScsICdzcGluLXJldmVyc2UnLCAnc3BpbicsICdzdGFjay0xeCcsICdzdGFjay0yeCcsICdzdGFjaycsICd1bCcsIERVT1RPTkVfQ0xBU1NFUy5HUk9VUCwgRFVPVE9ORV9DTEFTU0VTLlNXQVBfT1BBQ0lUWSwgRFVPVE9ORV9DTEFTU0VTLlBSSU1BUlksIERVT1RPTkVfQ0xBU1NFUy5TRUNPTkRBUlldKS5jb25jYXQob25lVG9UZW4ubWFwKGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBcIlwiLmNvbmNhdChuLCBcInhcIik7XG59KSkuY29uY2F0KG9uZVRvVHdlbnR5Lm1hcChmdW5jdGlvbiAobikge1xuICByZXR1cm4gXCJ3LVwiLmNvbmNhdChuKTtcbn0pKTtcblxudmFyIGluaXRpYWwgPSBXSU5ET1cuRm9udEF3ZXNvbWVDb25maWcgfHwge307XG5cbmZ1bmN0aW9uIGdldEF0dHJDb25maWcoYXR0cikge1xuICB2YXIgZWxlbWVudCA9IERPQ1VNRU5ULnF1ZXJ5U2VsZWN0b3IoJ3NjcmlwdFsnICsgYXR0ciArICddJyk7XG5cbiAgaWYgKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cik7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICAvLyBHZXR0aW5nIGFuIGVtcHR5IHN0cmluZyB3aWxsIG9jY3VyIGlmIHRoZSBhdHRyaWJ1dGUgaXMgc2V0IG9uIHRoZSBIVE1MIHRhZyBidXQgd2l0aG91dCBhIHZhbHVlXG4gIC8vIFdlJ2xsIGFzc3VtZSB0aGF0IHRoaXMgaXMgYW4gaW5kaWNhdGlvbiB0aGF0IGl0IHNob3VsZCBiZSB0b2dnbGVkIHRvIHRydWVcbiAgaWYgKHZhbCA9PT0gJycpIHJldHVybiB0cnVlO1xuICBpZiAodmFsID09PSAnZmFsc2UnKSByZXR1cm4gZmFsc2U7XG4gIGlmICh2YWwgPT09ICd0cnVlJykgcmV0dXJuIHRydWU7XG4gIHJldHVybiB2YWw7XG59XG5cbmlmIChET0NVTUVOVCAmJiB0eXBlb2YgRE9DVU1FTlQucXVlcnlTZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICB2YXIgYXR0cnMgPSBbWydkYXRhLWZhbWlseS1wcmVmaXgnLCAnZmFtaWx5UHJlZml4J10sIFsnZGF0YS1jc3MtcHJlZml4JywgJ2Nzc1ByZWZpeCddLCBbJ2RhdGEtZmFtaWx5LWRlZmF1bHQnLCAnZmFtaWx5RGVmYXVsdCddLCBbJ2RhdGEtc3R5bGUtZGVmYXVsdCcsICdzdHlsZURlZmF1bHQnXSwgWydkYXRhLXJlcGxhY2VtZW50LWNsYXNzJywgJ3JlcGxhY2VtZW50Q2xhc3MnXSwgWydkYXRhLWF1dG8tcmVwbGFjZS1zdmcnLCAnYXV0b1JlcGxhY2VTdmcnXSwgWydkYXRhLWF1dG8tYWRkLWNzcycsICdhdXRvQWRkQ3NzJ10sIFsnZGF0YS1hdXRvLWExMXknLCAnYXV0b0ExMXknXSwgWydkYXRhLXNlYXJjaC1wc2V1ZG8tZWxlbWVudHMnLCAnc2VhcmNoUHNldWRvRWxlbWVudHMnXSwgWydkYXRhLW9ic2VydmUtbXV0YXRpb25zJywgJ29ic2VydmVNdXRhdGlvbnMnXSwgWydkYXRhLW11dGF0ZS1hcHByb2FjaCcsICdtdXRhdGVBcHByb2FjaCddLCBbJ2RhdGEta2VlcC1vcmlnaW5hbC1zb3VyY2UnLCAna2VlcE9yaWdpbmFsU291cmNlJ10sIFsnZGF0YS1tZWFzdXJlLXBlcmZvcm1hbmNlJywgJ21lYXN1cmVQZXJmb3JtYW5jZSddLCBbJ2RhdGEtc2hvdy1taXNzaW5nLWljb25zJywgJ3Nob3dNaXNzaW5nSWNvbnMnXV07XG4gIGF0dHJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgYXR0ciA9IF9yZWYyWzBdLFxuICAgICAgICBrZXkgPSBfcmVmMlsxXTtcblxuICAgIHZhciB2YWwgPSBjb2VyY2UoZ2V0QXR0ckNvbmZpZyhhdHRyKSk7XG5cbiAgICBpZiAodmFsICE9PSB1bmRlZmluZWQgJiYgdmFsICE9PSBudWxsKSB7XG4gICAgICBpbml0aWFsW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIF9kZWZhdWx0ID0ge1xuICBzdHlsZURlZmF1bHQ6ICdzb2xpZCcsXG4gIGZhbWlseURlZmF1bHQ6ICdjbGFzc2ljJyxcbiAgY3NzUHJlZml4OiBERUZBVUxUX0NTU19QUkVGSVgsXG4gIHJlcGxhY2VtZW50Q2xhc3M6IERFRkFVTFRfUkVQTEFDRU1FTlRfQ0xBU1MsXG4gIGF1dG9SZXBsYWNlU3ZnOiB0cnVlLFxuICBhdXRvQWRkQ3NzOiB0cnVlLFxuICBhdXRvQTExeTogdHJ1ZSxcbiAgc2VhcmNoUHNldWRvRWxlbWVudHM6IGZhbHNlLFxuICBvYnNlcnZlTXV0YXRpb25zOiB0cnVlLFxuICBtdXRhdGVBcHByb2FjaDogJ2FzeW5jJyxcbiAga2VlcE9yaWdpbmFsU291cmNlOiB0cnVlLFxuICBtZWFzdXJlUGVyZm9ybWFuY2U6IGZhbHNlLFxuICBzaG93TWlzc2luZ0ljb25zOiB0cnVlXG59OyAvLyBmYW1pbHlQcmVmaXggaXMgZGVwcmVjYXRlZCBidXQgd2UgbXVzdCBzdGlsbCBzdXBwb3J0IGl0IGlmIHByZXNlbnRcblxuaWYgKGluaXRpYWwuZmFtaWx5UHJlZml4KSB7XG4gIGluaXRpYWwuY3NzUHJlZml4ID0gaW5pdGlhbC5mYW1pbHlQcmVmaXg7XG59XG5cbnZhciBfY29uZmlnID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIF9kZWZhdWx0KSwgaW5pdGlhbCk7XG5cbmlmICghX2NvbmZpZy5hdXRvUmVwbGFjZVN2ZykgX2NvbmZpZy5vYnNlcnZlTXV0YXRpb25zID0gZmFsc2U7XG52YXIgY29uZmlnID0ge307XG5PYmplY3Qua2V5cyhfZGVmYXVsdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb25maWcsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgICBfY29uZmlnW2tleV0gPSB2YWw7XG5cbiAgICAgIF9vbkNoYW5nZUNiLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgIHJldHVybiBjYihjb25maWcpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfY29uZmlnW2tleV07XG4gICAgfVxuICB9KTtcbn0pOyAvLyBmYW1pbHlQcmVmaXggaXMgZGVwcmVjYXRlZCBhcyBvZiA2LjIuMCBhbmQgc2hvdWxkIGJlIHJlbW92ZWQgaW4gNy4wLjBcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbmZpZywgJ2ZhbWlseVByZWZpeCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgX2NvbmZpZy5jc3NQcmVmaXggPSB2YWw7XG5cbiAgICBfb25DaGFuZ2VDYi5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgcmV0dXJuIGNiKGNvbmZpZyk7XG4gICAgfSk7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfY29uZmlnLmNzc1ByZWZpeDtcbiAgfVxufSk7XG5XSU5ET1cuRm9udEF3ZXNvbWVDb25maWcgPSBjb25maWc7XG52YXIgX29uQ2hhbmdlQ2IgPSBbXTtcbmZ1bmN0aW9uIG9uQ2hhbmdlKGNiKSB7XG4gIF9vbkNoYW5nZUNiLnB1c2goY2IpO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgX29uQ2hhbmdlQ2Iuc3BsaWNlKF9vbkNoYW5nZUNiLmluZGV4T2YoY2IpLCAxKTtcbiAgfTtcbn1cblxudmFyIGQgPSBVTklUU19JTl9HUklEO1xudmFyIG1lYW5pbmdsZXNzVHJhbnNmb3JtID0ge1xuICBzaXplOiAxNixcbiAgeDogMCxcbiAgeTogMCxcbiAgcm90YXRlOiAwLFxuICBmbGlwWDogZmFsc2UsXG4gIGZsaXBZOiBmYWxzZVxufTtcbmZ1bmN0aW9uIGluc2VydENzcyhjc3MpIHtcbiAgaWYgKCFjc3MgfHwgIUlTX0RPTSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzdHlsZSA9IERPQ1VNRU5ULmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHN0eWxlLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2NzcycpO1xuICBzdHlsZS5pbm5lckhUTUwgPSBjc3M7XG4gIHZhciBoZWFkQ2hpbGRyZW4gPSBET0NVTUVOVC5oZWFkLmNoaWxkTm9kZXM7XG4gIHZhciBiZWZvcmVDaGlsZCA9IG51bGw7XG5cbiAgZm9yICh2YXIgaSA9IGhlYWRDaGlsZHJlbi5sZW5ndGggLSAxOyBpID4gLTE7IGktLSkge1xuICAgIHZhciBjaGlsZCA9IGhlYWRDaGlsZHJlbltpXTtcbiAgICB2YXIgdGFnTmFtZSA9IChjaGlsZC50YWdOYW1lIHx8ICcnKS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgaWYgKFsnU1RZTEUnLCAnTElOSyddLmluZGV4T2YodGFnTmFtZSkgPiAtMSkge1xuICAgICAgYmVmb3JlQ2hpbGQgPSBjaGlsZDtcbiAgICB9XG4gIH1cblxuICBET0NVTUVOVC5oZWFkLmluc2VydEJlZm9yZShzdHlsZSwgYmVmb3JlQ2hpbGQpO1xuICByZXR1cm4gY3NzO1xufVxudmFyIGlkUG9vbCA9ICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWic7XG5mdW5jdGlvbiBuZXh0VW5pcXVlSWQoKSB7XG4gIHZhciBzaXplID0gMTI7XG4gIHZhciBpZCA9ICcnO1xuXG4gIHdoaWxlIChzaXplLS0gPiAwKSB7XG4gICAgaWQgKz0gaWRQb29sW01hdGgucmFuZG9tKCkgKiA2MiB8IDBdO1xuICB9XG5cbiAgcmV0dXJuIGlkO1xufVxuZnVuY3Rpb24gdG9BcnJheShvYmopIHtcbiAgdmFyIGFycmF5ID0gW107XG5cbiAgZm9yICh2YXIgaSA9IChvYmogfHwgW10pLmxlbmd0aCA+Pj4gMDsgaS0tOykge1xuICAgIGFycmF5W2ldID0gb2JqW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuZnVuY3Rpb24gY2xhc3NBcnJheShub2RlKSB7XG4gIGlmIChub2RlLmNsYXNzTGlzdCkge1xuICAgIHJldHVybiB0b0FycmF5KG5vZGUuY2xhc3NMaXN0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKS5zcGxpdCgnICcpLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGh0bWxFc2NhcGUoc3RyKSB7XG4gIHJldHVybiBcIlwiLmNvbmNhdChzdHIpLnJlcGxhY2UoLyYvZywgJyZhbXA7JykucmVwbGFjZSgvXCIvZywgJyZxdW90OycpLnJlcGxhY2UoLycvZywgJyYjMzk7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoLz4vZywgJyZndDsnKTtcbn1cbmZ1bmN0aW9uIGpvaW5BdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMgfHwge30pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBhdHRyaWJ1dGVOYW1lKSB7XG4gICAgcmV0dXJuIGFjYyArIFwiXCIuY29uY2F0KGF0dHJpYnV0ZU5hbWUsIFwiPVxcXCJcIikuY29uY2F0KGh0bWxFc2NhcGUoYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSksIFwiXFxcIiBcIik7XG4gIH0sICcnKS50cmltKCk7XG59XG5mdW5jdGlvbiBqb2luU3R5bGVzKHN0eWxlcykge1xuICByZXR1cm4gT2JqZWN0LmtleXMoc3R5bGVzIHx8IHt9KS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc3R5bGVOYW1lKSB7XG4gICAgcmV0dXJuIGFjYyArIFwiXCIuY29uY2F0KHN0eWxlTmFtZSwgXCI6IFwiKS5jb25jYXQoc3R5bGVzW3N0eWxlTmFtZV0udHJpbSgpLCBcIjtcIik7XG4gIH0sICcnKTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybUlzTWVhbmluZ2Z1bCh0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIHRyYW5zZm9ybS5zaXplICE9PSBtZWFuaW5nbGVzc1RyYW5zZm9ybS5zaXplIHx8IHRyYW5zZm9ybS54ICE9PSBtZWFuaW5nbGVzc1RyYW5zZm9ybS54IHx8IHRyYW5zZm9ybS55ICE9PSBtZWFuaW5nbGVzc1RyYW5zZm9ybS55IHx8IHRyYW5zZm9ybS5yb3RhdGUgIT09IG1lYW5pbmdsZXNzVHJhbnNmb3JtLnJvdGF0ZSB8fCB0cmFuc2Zvcm0uZmxpcFggfHwgdHJhbnNmb3JtLmZsaXBZO1xufVxuZnVuY3Rpb24gdHJhbnNmb3JtRm9yU3ZnKF9yZWYpIHtcbiAgdmFyIHRyYW5zZm9ybSA9IF9yZWYudHJhbnNmb3JtLFxuICAgICAgY29udGFpbmVyV2lkdGggPSBfcmVmLmNvbnRhaW5lcldpZHRoLFxuICAgICAgaWNvbldpZHRoID0gX3JlZi5pY29uV2lkdGg7XG4gIHZhciBvdXRlciA9IHtcbiAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKFwiLmNvbmNhdChjb250YWluZXJXaWR0aCAvIDIsIFwiIDI1NilcIilcbiAgfTtcbiAgdmFyIGlubmVyVHJhbnNsYXRlID0gXCJ0cmFuc2xhdGUoXCIuY29uY2F0KHRyYW5zZm9ybS54ICogMzIsIFwiLCBcIikuY29uY2F0KHRyYW5zZm9ybS55ICogMzIsIFwiKSBcIik7XG4gIHZhciBpbm5lclNjYWxlID0gXCJzY2FsZShcIi5jb25jYXQodHJhbnNmb3JtLnNpemUgLyAxNiAqICh0cmFuc2Zvcm0uZmxpcFggPyAtMSA6IDEpLCBcIiwgXCIpLmNvbmNhdCh0cmFuc2Zvcm0uc2l6ZSAvIDE2ICogKHRyYW5zZm9ybS5mbGlwWSA/IC0xIDogMSksIFwiKSBcIik7XG4gIHZhciBpbm5lclJvdGF0ZSA9IFwicm90YXRlKFwiLmNvbmNhdCh0cmFuc2Zvcm0ucm90YXRlLCBcIiAwIDApXCIpO1xuICB2YXIgaW5uZXIgPSB7XG4gICAgdHJhbnNmb3JtOiBcIlwiLmNvbmNhdChpbm5lclRyYW5zbGF0ZSwgXCIgXCIpLmNvbmNhdChpbm5lclNjYWxlLCBcIiBcIikuY29uY2F0KGlubmVyUm90YXRlKVxuICB9O1xuICB2YXIgcGF0aCA9IHtcbiAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKFwiLmNvbmNhdChpY29uV2lkdGggLyAyICogLTEsIFwiIC0yNTYpXCIpXG4gIH07XG4gIHJldHVybiB7XG4gICAgb3V0ZXI6IG91dGVyLFxuICAgIGlubmVyOiBpbm5lcixcbiAgICBwYXRoOiBwYXRoXG4gIH07XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1Gb3JDc3MoX3JlZjIpIHtcbiAgdmFyIHRyYW5zZm9ybSA9IF9yZWYyLnRyYW5zZm9ybSxcbiAgICAgIF9yZWYyJHdpZHRoID0gX3JlZjIud2lkdGgsXG4gICAgICB3aWR0aCA9IF9yZWYyJHdpZHRoID09PSB2b2lkIDAgPyBVTklUU19JTl9HUklEIDogX3JlZjIkd2lkdGgsXG4gICAgICBfcmVmMiRoZWlnaHQgPSBfcmVmMi5oZWlnaHQsXG4gICAgICBoZWlnaHQgPSBfcmVmMiRoZWlnaHQgPT09IHZvaWQgMCA/IFVOSVRTX0lOX0dSSUQgOiBfcmVmMiRoZWlnaHQsXG4gICAgICBfcmVmMiRzdGFydENlbnRlcmVkID0gX3JlZjIuc3RhcnRDZW50ZXJlZCxcbiAgICAgIHN0YXJ0Q2VudGVyZWQgPSBfcmVmMiRzdGFydENlbnRlcmVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJHN0YXJ0Q2VudGVyZWQ7XG4gIHZhciB2YWwgPSAnJztcblxuICBpZiAoc3RhcnRDZW50ZXJlZCAmJiBJU19JRSkge1xuICAgIHZhbCArPSBcInRyYW5zbGF0ZShcIi5jb25jYXQodHJhbnNmb3JtLnggLyBkIC0gd2lkdGggLyAyLCBcImVtLCBcIikuY29uY2F0KHRyYW5zZm9ybS55IC8gZCAtIGhlaWdodCAvIDIsIFwiZW0pIFwiKTtcbiAgfSBlbHNlIGlmIChzdGFydENlbnRlcmVkKSB7XG4gICAgdmFsICs9IFwidHJhbnNsYXRlKGNhbGMoLTUwJSArIFwiLmNvbmNhdCh0cmFuc2Zvcm0ueCAvIGQsIFwiZW0pLCBjYWxjKC01MCUgKyBcIikuY29uY2F0KHRyYW5zZm9ybS55IC8gZCwgXCJlbSkpIFwiKTtcbiAgfSBlbHNlIHtcbiAgICB2YWwgKz0gXCJ0cmFuc2xhdGUoXCIuY29uY2F0KHRyYW5zZm9ybS54IC8gZCwgXCJlbSwgXCIpLmNvbmNhdCh0cmFuc2Zvcm0ueSAvIGQsIFwiZW0pIFwiKTtcbiAgfVxuXG4gIHZhbCArPSBcInNjYWxlKFwiLmNvbmNhdCh0cmFuc2Zvcm0uc2l6ZSAvIGQgKiAodHJhbnNmb3JtLmZsaXBYID8gLTEgOiAxKSwgXCIsIFwiKS5jb25jYXQodHJhbnNmb3JtLnNpemUgLyBkICogKHRyYW5zZm9ybS5mbGlwWSA/IC0xIDogMSksIFwiKSBcIik7XG4gIHZhbCArPSBcInJvdGF0ZShcIi5jb25jYXQodHJhbnNmb3JtLnJvdGF0ZSwgXCJkZWcpIFwiKTtcbiAgcmV0dXJuIHZhbDtcbn1cblxudmFyIGJhc2VTdHlsZXMgPSBcIjpyb290LCA6aG9zdCB7XFxuICAtLWZhLWZvbnQtc29saWQ6IG5vcm1hbCA5MDAgMWVtLzEgXFxcIkZvbnQgQXdlc29tZSA2IFNvbGlkXFxcIjtcXG4gIC0tZmEtZm9udC1yZWd1bGFyOiBub3JtYWwgNDAwIDFlbS8xIFxcXCJGb250IEF3ZXNvbWUgNiBSZWd1bGFyXFxcIjtcXG4gIC0tZmEtZm9udC1saWdodDogbm9ybWFsIDMwMCAxZW0vMSBcXFwiRm9udCBBd2Vzb21lIDYgTGlnaHRcXFwiO1xcbiAgLS1mYS1mb250LXRoaW46IG5vcm1hbCAxMDAgMWVtLzEgXFxcIkZvbnQgQXdlc29tZSA2IFRoaW5cXFwiO1xcbiAgLS1mYS1mb250LWR1b3RvbmU6IG5vcm1hbCA5MDAgMWVtLzEgXFxcIkZvbnQgQXdlc29tZSA2IER1b3RvbmVcXFwiO1xcbiAgLS1mYS1mb250LXNoYXJwLXNvbGlkOiBub3JtYWwgOTAwIDFlbS8xIFxcXCJGb250IEF3ZXNvbWUgNiBTaGFycFxcXCI7XFxuICAtLWZhLWZvbnQtc2hhcnAtcmVndWxhcjogbm9ybWFsIDQwMCAxZW0vMSBcXFwiRm9udCBBd2Vzb21lIDYgU2hhcnBcXFwiO1xcbiAgLS1mYS1mb250LXNoYXJwLWxpZ2h0OiBub3JtYWwgMzAwIDFlbS8xIFxcXCJGb250IEF3ZXNvbWUgNiBTaGFycFxcXCI7XFxuICAtLWZhLWZvbnQtYnJhbmRzOiBub3JtYWwgNDAwIDFlbS8xIFxcXCJGb250IEF3ZXNvbWUgNiBCcmFuZHNcXFwiO1xcbn1cXG5cXG5zdmc6bm90KDpyb290KS5zdmctaW5saW5lLS1mYSwgc3ZnOm5vdCg6aG9zdCkuc3ZnLWlubGluZS0tZmEge1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXG59XFxuXFxuLnN2Zy1pbmxpbmUtLWZhIHtcXG4gIGRpc3BsYXk6IHZhcigtLWZhLWRpc3BsYXksIGlubGluZS1ibG9jayk7XFxuICBoZWlnaHQ6IDFlbTtcXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xcbiAgdmVydGljYWwtYWxpZ246IC0wLjEyNWVtO1xcbn1cXG4uc3ZnLWlubGluZS0tZmEuZmEtMnhzIHtcXG4gIHZlcnRpY2FsLWFsaWduOiAwLjFlbTtcXG59XFxuLnN2Zy1pbmxpbmUtLWZhLmZhLXhzIHtcXG4gIHZlcnRpY2FsLWFsaWduOiAwZW07XFxufVxcbi5zdmctaW5saW5lLS1mYS5mYS1zbSB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogLTAuMDcxNDI4NTcwNWVtO1xcbn1cXG4uc3ZnLWlubGluZS0tZmEuZmEtbGcge1xcbiAgdmVydGljYWwtYWxpZ246IC0wLjJlbTtcXG59XFxuLnN2Zy1pbmxpbmUtLWZhLmZhLXhsIHtcXG4gIHZlcnRpY2FsLWFsaWduOiAtMC4yNWVtO1xcbn1cXG4uc3ZnLWlubGluZS0tZmEuZmEtMnhsIHtcXG4gIHZlcnRpY2FsLWFsaWduOiAtMC4zMTI1ZW07XFxufVxcbi5zdmctaW5saW5lLS1mYS5mYS1wdWxsLWxlZnQge1xcbiAgbWFyZ2luLXJpZ2h0OiB2YXIoLS1mYS1wdWxsLW1hcmdpbiwgMC4zZW0pO1xcbiAgd2lkdGg6IGF1dG87XFxufVxcbi5zdmctaW5saW5lLS1mYS5mYS1wdWxsLXJpZ2h0IHtcXG4gIG1hcmdpbi1sZWZ0OiB2YXIoLS1mYS1wdWxsLW1hcmdpbiwgMC4zZW0pO1xcbiAgd2lkdGg6IGF1dG87XFxufVxcbi5zdmctaW5saW5lLS1mYS5mYS1saSB7XFxuICB3aWR0aDogdmFyKC0tZmEtbGktd2lkdGgsIDJlbSk7XFxuICB0b3A6IDAuMjVlbTtcXG59XFxuLnN2Zy1pbmxpbmUtLWZhLmZhLWZ3IHtcXG4gIHdpZHRoOiB2YXIoLS1mYS1mdy13aWR0aCwgMS4yNWVtKTtcXG59XFxuXFxuLmZhLWxheWVycyBzdmcuc3ZnLWlubGluZS0tZmEge1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIG1hcmdpbjogYXV0bztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAwO1xcbiAgdG9wOiAwO1xcbn1cXG5cXG4uZmEtbGF5ZXJzLWNvdW50ZXIsIC5mYS1sYXllcnMtdGV4dCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5mYS1sYXllcnMge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgaGVpZ2h0OiAxZW07XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB2ZXJ0aWNhbC1hbGlnbjogLTAuMTI1ZW07XFxuICB3aWR0aDogMWVtO1xcbn1cXG4uZmEtbGF5ZXJzIHN2Zy5zdmctaW5saW5lLS1mYSB7XFxuICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7XFxuICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7XFxufVxcblxcbi5mYS1sYXllcnMtdGV4dCB7XFxuICBsZWZ0OiA1MCU7XFxuICB0b3A6IDUwJTtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyO1xcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyO1xcbn1cXG5cXG4uZmEtbGF5ZXJzLWNvdW50ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZmEtY291bnRlci1iYWNrZ3JvdW5kLWNvbG9yLCAjZmYyNTNhKTtcXG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLWZhLWNvdW50ZXItYm9yZGVyLXJhZGl1cywgMWVtKTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBjb2xvcjogdmFyKC0tZmEtaW52ZXJzZSwgI2ZmZik7XFxuICBsaW5lLWhlaWdodDogdmFyKC0tZmEtY291bnRlci1saW5lLWhlaWdodCwgMSk7XFxuICBtYXgtd2lkdGg6IHZhcigtLWZhLWNvdW50ZXItbWF4LXdpZHRoLCA1ZW0pO1xcbiAgbWluLXdpZHRoOiB2YXIoLS1mYS1jb3VudGVyLW1pbi13aWR0aCwgMS41ZW0pO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHBhZGRpbmc6IHZhcigtLWZhLWNvdW50ZXItcGFkZGluZywgMC4yNWVtIDAuNWVtKTtcXG4gIHJpZ2h0OiB2YXIoLS1mYS1yaWdodCwgMCk7XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gIHRvcDogdmFyKC0tZmEtdG9wLCAwKTtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1jb3VudGVyLXNjYWxlLCAwLjI1KSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUodmFyKC0tZmEtY291bnRlci1zY2FsZSwgMC4yNSkpO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiB0b3AgcmlnaHQ7XFxuICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHRvcCByaWdodDtcXG59XFxuXFxuLmZhLWxheWVycy1ib3R0b20tcmlnaHQge1xcbiAgYm90dG9tOiB2YXIoLS1mYS1ib3R0b20sIDApO1xcbiAgcmlnaHQ6IHZhcigtLWZhLXJpZ2h0LCAwKTtcXG4gIHRvcDogYXV0bztcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1sYXllcnMtc2NhbGUsIDAuMjUpKTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1sYXllcnMtc2NhbGUsIDAuMjUpKTtcXG4gIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogYm90dG9tIHJpZ2h0O1xcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBib3R0b20gcmlnaHQ7XFxufVxcblxcbi5mYS1sYXllcnMtYm90dG9tLWxlZnQge1xcbiAgYm90dG9tOiB2YXIoLS1mYS1ib3R0b20sIDApO1xcbiAgbGVmdDogdmFyKC0tZmEtbGVmdCwgMCk7XFxuICByaWdodDogYXV0bztcXG4gIHRvcDogYXV0bztcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1sYXllcnMtc2NhbGUsIDAuMjUpKTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1sYXllcnMtc2NhbGUsIDAuMjUpKTtcXG4gIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogYm90dG9tIGxlZnQ7XFxuICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbSBsZWZ0O1xcbn1cXG5cXG4uZmEtbGF5ZXJzLXRvcC1yaWdodCB7XFxuICB0b3A6IHZhcigtLWZhLXRvcCwgMCk7XFxuICByaWdodDogdmFyKC0tZmEtcmlnaHQsIDApO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWxheWVycy1zY2FsZSwgMC4yNSkpO1xcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWxheWVycy1zY2FsZSwgMC4yNSkpO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiB0b3AgcmlnaHQ7XFxuICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHRvcCByaWdodDtcXG59XFxuXFxuLmZhLWxheWVycy10b3AtbGVmdCB7XFxuICBsZWZ0OiB2YXIoLS1mYS1sZWZ0LCAwKTtcXG4gIHJpZ2h0OiBhdXRvO1xcbiAgdG9wOiB2YXIoLS1mYS10b3AsIDApO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWxheWVycy1zY2FsZSwgMC4yNSkpO1xcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWxheWVycy1zY2FsZSwgMC4yNSkpO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiB0b3AgbGVmdDtcXG4gICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogdG9wIGxlZnQ7XFxufVxcblxcbi5mYS0xeCB7XFxuICBmb250LXNpemU6IDFlbTtcXG59XFxuXFxuLmZhLTJ4IHtcXG4gIGZvbnQtc2l6ZTogMmVtO1xcbn1cXG5cXG4uZmEtM3gge1xcbiAgZm9udC1zaXplOiAzZW07XFxufVxcblxcbi5mYS00eCB7XFxuICBmb250LXNpemU6IDRlbTtcXG59XFxuXFxuLmZhLTV4IHtcXG4gIGZvbnQtc2l6ZTogNWVtO1xcbn1cXG5cXG4uZmEtNngge1xcbiAgZm9udC1zaXplOiA2ZW07XFxufVxcblxcbi5mYS03eCB7XFxuICBmb250LXNpemU6IDdlbTtcXG59XFxuXFxuLmZhLTh4IHtcXG4gIGZvbnQtc2l6ZTogOGVtO1xcbn1cXG5cXG4uZmEtOXgge1xcbiAgZm9udC1zaXplOiA5ZW07XFxufVxcblxcbi5mYS0xMHgge1xcbiAgZm9udC1zaXplOiAxMGVtO1xcbn1cXG5cXG4uZmEtMnhzIHtcXG4gIGZvbnQtc2l6ZTogMC42MjVlbTtcXG4gIGxpbmUtaGVpZ2h0OiAwLjFlbTtcXG4gIHZlcnRpY2FsLWFsaWduOiAwLjIyNWVtO1xcbn1cXG5cXG4uZmEteHMge1xcbiAgZm9udC1zaXplOiAwLjc1ZW07XFxuICBsaW5lLWhlaWdodDogMC4wODMzMzMzMzM3ZW07XFxuICB2ZXJ0aWNhbC1hbGlnbjogMC4xMjVlbTtcXG59XFxuXFxuLmZhLXNtIHtcXG4gIGZvbnQtc2l6ZTogMC44NzVlbTtcXG4gIGxpbmUtaGVpZ2h0OiAwLjA3MTQyODU3MThlbTtcXG4gIHZlcnRpY2FsLWFsaWduOiAwLjA1MzU3MTQyOTVlbTtcXG59XFxuXFxuLmZhLWxnIHtcXG4gIGZvbnQtc2l6ZTogMS4yNWVtO1xcbiAgbGluZS1oZWlnaHQ6IDAuMDVlbTtcXG4gIHZlcnRpY2FsLWFsaWduOiAtMC4wNzVlbTtcXG59XFxuXFxuLmZhLXhsIHtcXG4gIGZvbnQtc2l6ZTogMS41ZW07XFxuICBsaW5lLWhlaWdodDogMC4wNDE2NjY2NjgyZW07XFxuICB2ZXJ0aWNhbC1hbGlnbjogLTAuMTI1ZW07XFxufVxcblxcbi5mYS0yeGwge1xcbiAgZm9udC1zaXplOiAyZW07XFxuICBsaW5lLWhlaWdodDogMC4wMzEyNWVtO1xcbiAgdmVydGljYWwtYWxpZ246IC0wLjE4NzVlbTtcXG59XFxuXFxuLmZhLWZ3IHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHdpZHRoOiAxLjI1ZW07XFxufVxcblxcbi5mYS11bCB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxuICBtYXJnaW4tbGVmdDogdmFyKC0tZmEtbGktbWFyZ2luLCAyLjVlbSk7XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxufVxcbi5mYS11bCA+IGxpIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLmZhLWxpIHtcXG4gIGxlZnQ6IGNhbGModmFyKC0tZmEtbGktd2lkdGgsIDJlbSkgKiAtMSk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB3aWR0aDogdmFyKC0tZmEtbGktd2lkdGgsIDJlbSk7XFxuICBsaW5lLWhlaWdodDogaW5oZXJpdDtcXG59XFxuXFxuLmZhLWJvcmRlciB7XFxuICBib3JkZXItY29sb3I6IHZhcigtLWZhLWJvcmRlci1jb2xvciwgI2VlZSk7XFxuICBib3JkZXItcmFkaXVzOiB2YXIoLS1mYS1ib3JkZXItcmFkaXVzLCAwLjFlbSk7XFxuICBib3JkZXItc3R5bGU6IHZhcigtLWZhLWJvcmRlci1zdHlsZSwgc29saWQpO1xcbiAgYm9yZGVyLXdpZHRoOiB2YXIoLS1mYS1ib3JkZXItd2lkdGgsIDAuMDhlbSk7XFxuICBwYWRkaW5nOiB2YXIoLS1mYS1ib3JkZXItcGFkZGluZywgMC4yZW0gMC4yNWVtIDAuMTVlbSk7XFxufVxcblxcbi5mYS1wdWxsLWxlZnQge1xcbiAgZmxvYXQ6IGxlZnQ7XFxuICBtYXJnaW4tcmlnaHQ6IHZhcigtLWZhLXB1bGwtbWFyZ2luLCAwLjNlbSk7XFxufVxcblxcbi5mYS1wdWxsLXJpZ2h0IHtcXG4gIGZsb2F0OiByaWdodDtcXG4gIG1hcmdpbi1sZWZ0OiB2YXIoLS1mYS1wdWxsLW1hcmdpbiwgMC4zZW0pO1xcbn1cXG5cXG4uZmEtYmVhdCB7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmYS1iZWF0O1xcbiAgICAgICAgICBhbmltYXRpb24tbmFtZTogZmEtYmVhdDtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OiB2YXIoLS1mYS1hbmltYXRpb24tZGVsYXksIDBzKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiB2YXIoLS1mYS1hbmltYXRpb24tZGVsYXksIDBzKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWRpcmVjdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWRpcmVjdGlvbiwgbm9ybWFsKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWRpcmVjdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWRpcmVjdGlvbiwgbm9ybWFsKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZHVyYXRpb24sIDFzKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWR1cmF0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZHVyYXRpb24sIDFzKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogdmFyKC0tZmEtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCwgaW5maW5pdGUpO1xcbiAgICAgICAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiB2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LCBpbmZpbml0ZSk7XFxuICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi10aW1pbmcsIGVhc2UtaW4tb3V0KTtcXG4gICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZywgZWFzZS1pbi1vdXQpO1xcbn1cXG5cXG4uZmEtYm91bmNlIHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZhLWJvdW5jZTtcXG4gICAgICAgICAgYW5pbWF0aW9uLW5hbWU6IGZhLWJvdW5jZTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OiB2YXIoLS1mYS1hbmltYXRpb24tZGVsYXksIDBzKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiB2YXIoLS1mYS1hbmltYXRpb24tZGVsYXksIDBzKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWRpcmVjdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWRpcmVjdGlvbiwgbm9ybWFsKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWRpcmVjdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWRpcmVjdGlvbiwgbm9ybWFsKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZHVyYXRpb24sIDFzKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWR1cmF0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZHVyYXRpb24sIDFzKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogdmFyKC0tZmEtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCwgaW5maW5pdGUpO1xcbiAgICAgICAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiB2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LCBpbmZpbml0ZSk7XFxuICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi10aW1pbmcsIGN1YmljLWJlemllcigwLjI4LCAwLjg0LCAwLjQyLCAxKSk7XFxuICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi10aW1pbmcsIGN1YmljLWJlemllcigwLjI4LCAwLjg0LCAwLjQyLCAxKSk7XFxufVxcblxcbi5mYS1mYWRlIHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZhLWZhZGU7XFxuICAgICAgICAgIGFuaW1hdGlvbi1uYW1lOiBmYS1mYWRlO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tZGVsYXk6IHZhcigtLWZhLWFuaW1hdGlvbi1kZWxheSwgMHMpO1xcbiAgICAgICAgICBhbmltYXRpb24tZGVsYXk6IHZhcigtLWZhLWFuaW1hdGlvbi1kZWxheSwgMHMpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tZGlyZWN0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLCBub3JtYWwpO1xcbiAgICAgICAgICBhbmltYXRpb24tZGlyZWN0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLCBub3JtYWwpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246IHZhcigtLWZhLWFuaW1hdGlvbi1kdXJhdGlvbiwgMXMpO1xcbiAgICAgICAgICBhbmltYXRpb24tZHVyYXRpb246IHZhcigtLWZhLWFuaW1hdGlvbi1kdXJhdGlvbiwgMXMpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiB2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LCBpbmZpbml0ZSk7XFxuICAgICAgICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IHZhcigtLWZhLWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQsIGluZmluaXRlKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZywgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKSk7XFxuICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi10aW1pbmcsIGN1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSkpO1xcbn1cXG5cXG4uZmEtYmVhdC1mYWRlIHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZhLWJlYXQtZmFkZTtcXG4gICAgICAgICAgYW5pbWF0aW9uLW5hbWU6IGZhLWJlYXQtZmFkZTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OiB2YXIoLS1mYS1hbmltYXRpb24tZGVsYXksIDBzKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiB2YXIoLS1mYS1hbmltYXRpb24tZGVsYXksIDBzKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWRpcmVjdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWRpcmVjdGlvbiwgbm9ybWFsKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWRpcmVjdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWRpcmVjdGlvbiwgbm9ybWFsKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZHVyYXRpb24sIDFzKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWR1cmF0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZHVyYXRpb24sIDFzKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogdmFyKC0tZmEtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCwgaW5maW5pdGUpO1xcbiAgICAgICAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiB2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LCBpbmZpbml0ZSk7XFxuICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi10aW1pbmcsIGN1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSkpO1xcbiAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tdGltaW5nLCBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpKTtcXG59XFxuXFxuLmZhLWZsaXAge1xcbiAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmEtZmxpcDtcXG4gICAgICAgICAgYW5pbWF0aW9uLW5hbWU6IGZhLWZsaXA7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1kZWxheTogdmFyKC0tZmEtYW5pbWF0aW9uLWRlbGF5LCAwcyk7XFxuICAgICAgICAgIGFuaW1hdGlvbi1kZWxheTogdmFyKC0tZmEtYW5pbWF0aW9uLWRlbGF5LCAwcyk7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1kaXJlY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi1kaXJlY3Rpb24sIG5vcm1hbCk7XFxuICAgICAgICAgIGFuaW1hdGlvbi1kaXJlY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi1kaXJlY3Rpb24sIG5vcm1hbCk7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWR1cmF0aW9uLCAxcyk7XFxuICAgICAgICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWR1cmF0aW9uLCAxcyk7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IHZhcigtLWZhLWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQsIGluZmluaXRlKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogdmFyKC0tZmEtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCwgaW5maW5pdGUpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tdGltaW5nLCBlYXNlLWluLW91dCk7XFxuICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi10aW1pbmcsIGVhc2UtaW4tb3V0KTtcXG59XFxuXFxuLmZhLXNoYWtlIHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IGZhLXNoYWtlO1xcbiAgICAgICAgICBhbmltYXRpb24tbmFtZTogZmEtc2hha2U7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1kZWxheTogdmFyKC0tZmEtYW5pbWF0aW9uLWRlbGF5LCAwcyk7XFxuICAgICAgICAgIGFuaW1hdGlvbi1kZWxheTogdmFyKC0tZmEtYW5pbWF0aW9uLWRlbGF5LCAwcyk7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1kaXJlY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi1kaXJlY3Rpb24sIG5vcm1hbCk7XFxuICAgICAgICAgIGFuaW1hdGlvbi1kaXJlY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi1kaXJlY3Rpb24sIG5vcm1hbCk7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWR1cmF0aW9uLCAxcyk7XFxuICAgICAgICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWR1cmF0aW9uLCAxcyk7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IHZhcigtLWZhLWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQsIGluZmluaXRlKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogdmFyKC0tZmEtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCwgaW5maW5pdGUpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tdGltaW5nLCBsaW5lYXIpO1xcbiAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tdGltaW5nLCBsaW5lYXIpO1xcbn1cXG5cXG4uZmEtc3BpbiB7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBmYS1zcGluO1xcbiAgICAgICAgICBhbmltYXRpb24tbmFtZTogZmEtc3BpbjtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OiB2YXIoLS1mYS1hbmltYXRpb24tZGVsYXksIDBzKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiB2YXIoLS1mYS1hbmltYXRpb24tZGVsYXksIDBzKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWRpcmVjdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWRpcmVjdGlvbiwgbm9ybWFsKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWRpcmVjdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWRpcmVjdGlvbiwgbm9ybWFsKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZHVyYXRpb24sIDJzKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWR1cmF0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tZHVyYXRpb24sIDJzKTtcXG4gIC13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogdmFyKC0tZmEtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCwgaW5maW5pdGUpO1xcbiAgICAgICAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiB2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LCBpbmZpbml0ZSk7XFxuICAtd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi10aW1pbmcsIGxpbmVhcik7XFxuICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi10aW1pbmcsIGxpbmVhcik7XFxufVxcblxcbi5mYS1zcGluLXJldmVyc2Uge1xcbiAgLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uOiByZXZlcnNlO1xcbn1cXG5cXG4uZmEtcHVsc2UsXFxuLmZhLXNwaW4tcHVsc2Uge1xcbiAgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogZmEtc3BpbjtcXG4gICAgICAgICAgYW5pbWF0aW9uLW5hbWU6IGZhLXNwaW47XFxuICAtd2Via2l0LWFuaW1hdGlvbi1kaXJlY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi1kaXJlY3Rpb24sIG5vcm1hbCk7XFxuICAgICAgICAgIGFuaW1hdGlvbi1kaXJlY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi1kaXJlY3Rpb24sIG5vcm1hbCk7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWR1cmF0aW9uLCAxcyk7XFxuICAgICAgICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogdmFyKC0tZmEtYW5pbWF0aW9uLWR1cmF0aW9uLCAxcyk7XFxuICAtd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IHZhcigtLWZhLWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQsIGluZmluaXRlKTtcXG4gICAgICAgICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogdmFyKC0tZmEtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCwgaW5maW5pdGUpO1xcbiAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiB2YXIoLS1mYS1hbmltYXRpb24tdGltaW5nLCBzdGVwcyg4KSk7XFxuICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IHZhcigtLWZhLWFuaW1hdGlvbi10aW1pbmcsIHN0ZXBzKDgpKTtcXG59XFxuXFxuQG1lZGlhIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpIHtcXG4gIC5mYS1iZWF0LFxcbi5mYS1ib3VuY2UsXFxuLmZhLWZhZGUsXFxuLmZhLWJlYXQtZmFkZSxcXG4uZmEtZmxpcCxcXG4uZmEtcHVsc2UsXFxuLmZhLXNoYWtlLFxcbi5mYS1zcGluLFxcbi5mYS1zcGluLXB1bHNlIHtcXG4gICAgLXdlYmtpdC1hbmltYXRpb24tZGVsYXk6IC0xbXM7XFxuICAgICAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiAtMW1zO1xcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjogMW1zO1xcbiAgICAgICAgICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMW1zO1xcbiAgICAtd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IDE7XFxuICAgICAgICAgICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogMTtcXG4gICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwcztcXG4gICAgICAgICAgICB0cmFuc2l0aW9uLWRlbGF5OiAwcztcXG4gICAgLXdlYmtpdC10cmFuc2l0aW9uLWR1cmF0aW9uOiAwcztcXG4gICAgICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwcztcXG4gIH1cXG59XFxuQC13ZWJraXQta2V5ZnJhbWVzIGZhLWJlYXQge1xcbiAgMCUsIDkwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgfVxcbiAgNDUlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWJlYXQtc2NhbGUsIDEuMjUpKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWJlYXQtc2NhbGUsIDEuMjUpKTtcXG4gIH1cXG59XFxuQGtleWZyYW1lcyBmYS1iZWF0IHtcXG4gIDAlLCA5MCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gIH1cXG4gIDQ1JSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1iZWF0LXNjYWxlLCAxLjI1KSk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1iZWF0LXNjYWxlLCAxLjI1KSk7XFxuICB9XFxufVxcbkAtd2Via2l0LWtleWZyYW1lcyBmYS1ib3VuY2Uge1xcbiAgMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSwgMSkgdHJhbnNsYXRlWSgwKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEsIDEpIHRyYW5zbGF0ZVkoMCk7XFxuICB9XFxuICAxMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUodmFyKC0tZmEtYm91bmNlLXN0YXJ0LXNjYWxlLXgsIDEuMSksIHZhcigtLWZhLWJvdW5jZS1zdGFydC1zY2FsZS15LCAwLjkpKSB0cmFuc2xhdGVZKDApO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUodmFyKC0tZmEtYm91bmNlLXN0YXJ0LXNjYWxlLXgsIDEuMSksIHZhcigtLWZhLWJvdW5jZS1zdGFydC1zY2FsZS15LCAwLjkpKSB0cmFuc2xhdGVZKDApO1xcbiAgfVxcbiAgMzAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWJvdW5jZS1qdW1wLXNjYWxlLXgsIDAuOSksIHZhcigtLWZhLWJvdW5jZS1qdW1wLXNjYWxlLXksIDEuMSkpIHRyYW5zbGF0ZVkodmFyKC0tZmEtYm91bmNlLWhlaWdodCwgLTAuNWVtKSk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1ib3VuY2UtanVtcC1zY2FsZS14LCAwLjkpLCB2YXIoLS1mYS1ib3VuY2UtanVtcC1zY2FsZS15LCAxLjEpKSB0cmFuc2xhdGVZKHZhcigtLWZhLWJvdW5jZS1oZWlnaHQsIC0wLjVlbSkpO1xcbiAgfVxcbiAgNTAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWJvdW5jZS1sYW5kLXNjYWxlLXgsIDEuMDUpLCB2YXIoLS1mYS1ib3VuY2UtbGFuZC1zY2FsZS15LCAwLjk1KSkgdHJhbnNsYXRlWSgwKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWJvdW5jZS1sYW5kLXNjYWxlLXgsIDEuMDUpLCB2YXIoLS1mYS1ib3VuY2UtbGFuZC1zY2FsZS15LCAwLjk1KSkgdHJhbnNsYXRlWSgwKTtcXG4gIH1cXG4gIDU3JSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAxKSB0cmFuc2xhdGVZKHZhcigtLWZhLWJvdW5jZS1yZWJvdW5kLCAtMC4xMjVlbSkpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSwgMSkgdHJhbnNsYXRlWSh2YXIoLS1mYS1ib3VuY2UtcmVib3VuZCwgLTAuMTI1ZW0pKTtcXG4gIH1cXG4gIDY0JSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAxKSB0cmFuc2xhdGVZKDApO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSwgMSkgdHJhbnNsYXRlWSgwKTtcXG4gIH1cXG4gIDEwMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSwgMSkgdHJhbnNsYXRlWSgwKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEsIDEpIHRyYW5zbGF0ZVkoMCk7XFxuICB9XFxufVxcbkBrZXlmcmFtZXMgZmEtYm91bmNlIHtcXG4gIDAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEsIDEpIHRyYW5zbGF0ZVkoMCk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLCAxKSB0cmFuc2xhdGVZKDApO1xcbiAgfVxcbiAgMTAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWJvdW5jZS1zdGFydC1zY2FsZS14LCAxLjEpLCB2YXIoLS1mYS1ib3VuY2Utc3RhcnQtc2NhbGUteSwgMC45KSkgdHJhbnNsYXRlWSgwKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKHZhcigtLWZhLWJvdW5jZS1zdGFydC1zY2FsZS14LCAxLjEpLCB2YXIoLS1mYS1ib3VuY2Utc3RhcnQtc2NhbGUteSwgMC45KSkgdHJhbnNsYXRlWSgwKTtcXG4gIH1cXG4gIDMwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1ib3VuY2UtanVtcC1zY2FsZS14LCAwLjkpLCB2YXIoLS1mYS1ib3VuY2UtanVtcC1zY2FsZS15LCAxLjEpKSB0cmFuc2xhdGVZKHZhcigtLWZhLWJvdW5jZS1oZWlnaHQsIC0wLjVlbSkpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUodmFyKC0tZmEtYm91bmNlLWp1bXAtc2NhbGUteCwgMC45KSwgdmFyKC0tZmEtYm91bmNlLWp1bXAtc2NhbGUteSwgMS4xKSkgdHJhbnNsYXRlWSh2YXIoLS1mYS1ib3VuY2UtaGVpZ2h0LCAtMC41ZW0pKTtcXG4gIH1cXG4gIDUwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1ib3VuY2UtbGFuZC1zY2FsZS14LCAxLjA1KSwgdmFyKC0tZmEtYm91bmNlLWxhbmQtc2NhbGUteSwgMC45NSkpIHRyYW5zbGF0ZVkoMCk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1ib3VuY2UtbGFuZC1zY2FsZS14LCAxLjA1KSwgdmFyKC0tZmEtYm91bmNlLWxhbmQtc2NhbGUteSwgMC45NSkpIHRyYW5zbGF0ZVkoMCk7XFxuICB9XFxuICA1NyUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSwgMSkgdHJhbnNsYXRlWSh2YXIoLS1mYS1ib3VuY2UtcmVib3VuZCwgLTAuMTI1ZW0pKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEsIDEpIHRyYW5zbGF0ZVkodmFyKC0tZmEtYm91bmNlLXJlYm91bmQsIC0wLjEyNWVtKSk7XFxuICB9XFxuICA2NCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSwgMSkgdHJhbnNsYXRlWSgwKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEsIDEpIHRyYW5zbGF0ZVkoMCk7XFxuICB9XFxuICAxMDAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEsIDEpIHRyYW5zbGF0ZVkoMCk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLCAxKSB0cmFuc2xhdGVZKDApO1xcbiAgfVxcbn1cXG5ALXdlYmtpdC1rZXlmcmFtZXMgZmEtZmFkZSB7XFxuICA1MCUge1xcbiAgICBvcGFjaXR5OiB2YXIoLS1mYS1mYWRlLW9wYWNpdHksIDAuNCk7XFxuICB9XFxufVxcbkBrZXlmcmFtZXMgZmEtZmFkZSB7XFxuICA1MCUge1xcbiAgICBvcGFjaXR5OiB2YXIoLS1mYS1mYWRlLW9wYWNpdHksIDAuNCk7XFxuICB9XFxufVxcbkAtd2Via2l0LWtleWZyYW1lcyBmYS1iZWF0LWZhZGUge1xcbiAgMCUsIDEwMCUge1xcbiAgICBvcGFjaXR5OiB2YXIoLS1mYS1iZWF0LWZhZGUtb3BhY2l0eSwgMC40KTtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICB9XFxuICA1MCUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUodmFyKC0tZmEtYmVhdC1mYWRlLXNjYWxlLCAxLjEyNSkpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUodmFyKC0tZmEtYmVhdC1mYWRlLXNjYWxlLCAxLjEyNSkpO1xcbiAgfVxcbn1cXG5Aa2V5ZnJhbWVzIGZhLWJlYXQtZmFkZSB7XFxuICAwJSwgMTAwJSB7XFxuICAgIG9wYWNpdHk6IHZhcigtLWZhLWJlYXQtZmFkZS1vcGFjaXR5LCAwLjQpO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gIH1cXG4gIDUwJSB7XFxuICAgIG9wYWNpdHk6IDE7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1iZWF0LWZhZGUtc2NhbGUsIDEuMTI1KSk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1mYS1iZWF0LWZhZGUtc2NhbGUsIDEuMTI1KSk7XFxuICB9XFxufVxcbkAtd2Via2l0LWtleWZyYW1lcyBmYS1mbGlwIHtcXG4gIDUwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUzZCh2YXIoLS1mYS1mbGlwLXgsIDApLCB2YXIoLS1mYS1mbGlwLXksIDEpLCB2YXIoLS1mYS1mbGlwLXosIDApLCB2YXIoLS1mYS1mbGlwLWFuZ2xlLCAtMTgwZGVnKSk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUzZCh2YXIoLS1mYS1mbGlwLXgsIDApLCB2YXIoLS1mYS1mbGlwLXksIDEpLCB2YXIoLS1mYS1mbGlwLXosIDApLCB2YXIoLS1mYS1mbGlwLWFuZ2xlLCAtMTgwZGVnKSk7XFxuICB9XFxufVxcbkBrZXlmcmFtZXMgZmEtZmxpcCB7XFxuICA1MCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlM2QodmFyKC0tZmEtZmxpcC14LCAwKSwgdmFyKC0tZmEtZmxpcC15LCAxKSwgdmFyKC0tZmEtZmxpcC16LCAwKSwgdmFyKC0tZmEtZmxpcC1hbmdsZSwgLTE4MGRlZykpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlM2QodmFyKC0tZmEtZmxpcC14LCAwKSwgdmFyKC0tZmEtZmxpcC15LCAxKSwgdmFyKC0tZmEtZmxpcC16LCAwKSwgdmFyKC0tZmEtZmxpcC1hbmdsZSwgLTE4MGRlZykpO1xcbiAgfVxcbn1cXG5ALXdlYmtpdC1rZXlmcmFtZXMgZmEtc2hha2Uge1xcbiAgMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKC0xNWRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTE1ZGVnKTtcXG4gIH1cXG4gIDQlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgxNWRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMTVkZWcpO1xcbiAgfVxcbiAgOCUsIDI0JSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoLTE4ZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtMThkZWcpO1xcbiAgfVxcbiAgMTIlLCAyOCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDE4ZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxOGRlZyk7XFxuICB9XFxuICAxNiUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKC0yMmRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTIyZGVnKTtcXG4gIH1cXG4gIDIwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMjJkZWcpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDIyZGVnKTtcXG4gIH1cXG4gIDMyJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoLTEyZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtMTJkZWcpO1xcbiAgfVxcbiAgMzYlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgxMmRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMTJkZWcpO1xcbiAgfVxcbiAgNDAlLCAxMDAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXG4gIH1cXG59XFxuQGtleWZyYW1lcyBmYS1zaGFrZSB7XFxuICAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoLTE1ZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtMTVkZWcpO1xcbiAgfVxcbiAgNCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDE1ZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxNWRlZyk7XFxuICB9XFxuICA4JSwgMjQlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgtMThkZWcpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC0xOGRlZyk7XFxuICB9XFxuICAxMiUsIDI4JSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMThkZWcpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDE4ZGVnKTtcXG4gIH1cXG4gIDE2JSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoLTIyZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtMjJkZWcpO1xcbiAgfVxcbiAgMjAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgyMmRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMjJkZWcpO1xcbiAgfVxcbiAgMzIlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgtMTJkZWcpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC0xMmRlZyk7XFxuICB9XFxuICAzNiUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDEyZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxMmRlZyk7XFxuICB9XFxuICA0MCUsIDEwMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcbiAgfVxcbn1cXG5ALXdlYmtpdC1rZXlmcmFtZXMgZmEtc3BpbiB7XFxuICAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxuICB9XFxuICAxMDAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICB9XFxufVxcbkBrZXlmcmFtZXMgZmEtc3BpbiB7XFxuICAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxuICB9XFxuICAxMDAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICB9XFxufVxcbi5mYS1yb3RhdGUtOTAge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcXG59XFxuXFxuLmZhLXJvdGF0ZS0xODAge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xcbiAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xcbn1cXG5cXG4uZmEtcm90YXRlLTI3MCB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDI3MGRlZyk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDI3MGRlZyk7XFxufVxcblxcbi5mYS1mbGlwLWhvcml6b250YWwge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKC0xLCAxKTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgtMSwgMSk7XFxufVxcblxcbi5mYS1mbGlwLXZlcnRpY2FsIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAtMSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSwgLTEpO1xcbn1cXG5cXG4uZmEtZmxpcC1ib3RoLFxcbi5mYS1mbGlwLWhvcml6b250YWwuZmEtZmxpcC12ZXJ0aWNhbCB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoLTEsIC0xKTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgtMSwgLTEpO1xcbn1cXG5cXG4uZmEtcm90YXRlLWJ5IHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUodmFyKC0tZmEtcm90YXRlLWFuZ2xlLCBub25lKSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKHZhcigtLWZhLXJvdGF0ZS1hbmdsZSwgbm9uZSkpO1xcbn1cXG5cXG4uZmEtc3RhY2sge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gIGhlaWdodDogMmVtO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDIuNWVtO1xcbn1cXG5cXG4uZmEtc3RhY2stMXgsXFxuLmZhLXN0YWNrLTJ4IHtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuICBtYXJnaW46IGF1dG87XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMDtcXG4gIHRvcDogMDtcXG4gIHotaW5kZXg6IHZhcigtLWZhLXN0YWNrLXotaW5kZXgsIGF1dG8pO1xcbn1cXG5cXG4uc3ZnLWlubGluZS0tZmEuZmEtc3RhY2stMXgge1xcbiAgaGVpZ2h0OiAxZW07XFxuICB3aWR0aDogMS4yNWVtO1xcbn1cXG4uc3ZnLWlubGluZS0tZmEuZmEtc3RhY2stMngge1xcbiAgaGVpZ2h0OiAyZW07XFxuICB3aWR0aDogMi41ZW07XFxufVxcblxcbi5mYS1pbnZlcnNlIHtcXG4gIGNvbG9yOiB2YXIoLS1mYS1pbnZlcnNlLCAjZmZmKTtcXG59XFxuXFxuLnNyLW9ubHksXFxuLmZhLXNyLW9ubHkge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDFweDtcXG4gIGhlaWdodDogMXB4O1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogLTFweDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBjbGlwOiByZWN0KDAsIDAsIDAsIDApO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIGJvcmRlci13aWR0aDogMDtcXG59XFxuXFxuLnNyLW9ubHktZm9jdXNhYmxlOm5vdCg6Zm9jdXMpLFxcbi5mYS1zci1vbmx5LWZvY3VzYWJsZTpub3QoOmZvY3VzKSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogMXB4O1xcbiAgaGVpZ2h0OiAxcHg7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAtMXB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGNsaXA6IHJlY3QoMCwgMCwgMCwgMCk7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgYm9yZGVyLXdpZHRoOiAwO1xcbn1cXG5cXG4uc3ZnLWlubGluZS0tZmEgLmZhLXByaW1hcnkge1xcbiAgZmlsbDogdmFyKC0tZmEtcHJpbWFyeS1jb2xvciwgY3VycmVudENvbG9yKTtcXG4gIG9wYWNpdHk6IHZhcigtLWZhLXByaW1hcnktb3BhY2l0eSwgMSk7XFxufVxcblxcbi5zdmctaW5saW5lLS1mYSAuZmEtc2Vjb25kYXJ5IHtcXG4gIGZpbGw6IHZhcigtLWZhLXNlY29uZGFyeS1jb2xvciwgY3VycmVudENvbG9yKTtcXG4gIG9wYWNpdHk6IHZhcigtLWZhLXNlY29uZGFyeS1vcGFjaXR5LCAwLjQpO1xcbn1cXG5cXG4uc3ZnLWlubGluZS0tZmEuZmEtc3dhcC1vcGFjaXR5IC5mYS1wcmltYXJ5IHtcXG4gIG9wYWNpdHk6IHZhcigtLWZhLXNlY29uZGFyeS1vcGFjaXR5LCAwLjQpO1xcbn1cXG5cXG4uc3ZnLWlubGluZS0tZmEuZmEtc3dhcC1vcGFjaXR5IC5mYS1zZWNvbmRhcnkge1xcbiAgb3BhY2l0eTogdmFyKC0tZmEtcHJpbWFyeS1vcGFjaXR5LCAxKTtcXG59XFxuXFxuLnN2Zy1pbmxpbmUtLWZhIG1hc2sgLmZhLXByaW1hcnksXFxuLnN2Zy1pbmxpbmUtLWZhIG1hc2sgLmZhLXNlY29uZGFyeSB7XFxuICBmaWxsOiBibGFjaztcXG59XFxuXFxuLmZhZC5mYS1pbnZlcnNlLFxcbi5mYS1kdW90b25lLmZhLWludmVyc2Uge1xcbiAgY29sb3I6IHZhcigtLWZhLWludmVyc2UsICNmZmYpO1xcbn1cIjtcblxuZnVuY3Rpb24gY3NzKCkge1xuICB2YXIgZGNwID0gREVGQVVMVF9DU1NfUFJFRklYO1xuICB2YXIgZHJjID0gREVGQVVMVF9SRVBMQUNFTUVOVF9DTEFTUztcbiAgdmFyIGZwID0gY29uZmlnLmNzc1ByZWZpeDtcbiAgdmFyIHJjID0gY29uZmlnLnJlcGxhY2VtZW50Q2xhc3M7XG4gIHZhciBzID0gYmFzZVN0eWxlcztcblxuICBpZiAoZnAgIT09IGRjcCB8fCByYyAhPT0gZHJjKSB7XG4gICAgdmFyIGRQYXR0ID0gbmV3IFJlZ0V4cChcIlxcXFwuXCIuY29uY2F0KGRjcCwgXCJcXFxcLVwiKSwgJ2cnKTtcbiAgICB2YXIgY3VzdG9tUHJvcFBhdHQgPSBuZXcgUmVnRXhwKFwiXFxcXC0tXCIuY29uY2F0KGRjcCwgXCJcXFxcLVwiKSwgJ2cnKTtcbiAgICB2YXIgclBhdHQgPSBuZXcgUmVnRXhwKFwiXFxcXC5cIi5jb25jYXQoZHJjKSwgJ2cnKTtcbiAgICBzID0gcy5yZXBsYWNlKGRQYXR0LCBcIi5cIi5jb25jYXQoZnAsIFwiLVwiKSkucmVwbGFjZShjdXN0b21Qcm9wUGF0dCwgXCItLVwiLmNvbmNhdChmcCwgXCItXCIpKS5yZXBsYWNlKHJQYXR0LCBcIi5cIi5jb25jYXQocmMpKTtcbiAgfVxuXG4gIHJldHVybiBzO1xufVxuXG52YXIgX2Nzc0luc2VydGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGVuc3VyZUNzcygpIHtcbiAgaWYgKGNvbmZpZy5hdXRvQWRkQ3NzICYmICFfY3NzSW5zZXJ0ZWQpIHtcbiAgICBpbnNlcnRDc3MoY3NzKCkpO1xuICAgIF9jc3NJbnNlcnRlZCA9IHRydWU7XG4gIH1cbn1cblxudmFyIEluamVjdENTUyA9IHtcbiAgbWl4b3V0OiBmdW5jdGlvbiBtaXhvdXQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRvbToge1xuICAgICAgICBjc3M6IGNzcyxcbiAgICAgICAgaW5zZXJ0Q3NzOiBlbnN1cmVDc3NcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBob29rczogZnVuY3Rpb24gaG9va3MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJlZm9yZURPTUVsZW1lbnRDcmVhdGlvbjogZnVuY3Rpb24gYmVmb3JlRE9NRWxlbWVudENyZWF0aW9uKCkge1xuICAgICAgICBlbnN1cmVDc3MoKTtcbiAgICAgIH0sXG4gICAgICBiZWZvcmVJMnN2ZzogZnVuY3Rpb24gYmVmb3JlSTJzdmcoKSB7XG4gICAgICAgIGVuc3VyZUNzcygpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5cbnZhciB3ID0gV0lORE9XIHx8IHt9O1xuaWYgKCF3W05BTUVTUEFDRV9JREVOVElGSUVSXSkgd1tOQU1FU1BBQ0VfSURFTlRJRklFUl0gPSB7fTtcbmlmICghd1tOQU1FU1BBQ0VfSURFTlRJRklFUl0uc3R5bGVzKSB3W05BTUVTUEFDRV9JREVOVElGSUVSXS5zdHlsZXMgPSB7fTtcbmlmICghd1tOQU1FU1BBQ0VfSURFTlRJRklFUl0uaG9va3MpIHdbTkFNRVNQQUNFX0lERU5USUZJRVJdLmhvb2tzID0ge307XG5pZiAoIXdbTkFNRVNQQUNFX0lERU5USUZJRVJdLnNoaW1zKSB3W05BTUVTUEFDRV9JREVOVElGSUVSXS5zaGltcyA9IFtdO1xudmFyIG5hbWVzcGFjZSA9IHdbTkFNRVNQQUNFX0lERU5USUZJRVJdO1xuXG52YXIgZnVuY3Rpb25zID0gW107XG5cbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICBET0NVTUVOVC5yZW1vdmVFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgbGlzdGVuZXIpO1xuICBsb2FkZWQgPSAxO1xuICBmdW5jdGlvbnMubWFwKGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBmbigpO1xuICB9KTtcbn07XG5cbnZhciBsb2FkZWQgPSBmYWxzZTtcblxuaWYgKElTX0RPTSkge1xuICBsb2FkZWQgPSAoRE9DVU1FTlQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsID8gL15sb2FkZWR8XmMvIDogL15sb2FkZWR8Xml8XmMvKS50ZXN0KERPQ1VNRU5ULnJlYWR5U3RhdGUpO1xuICBpZiAoIWxvYWRlZCkgRE9DVU1FTlQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGxpc3RlbmVyKTtcbn1cblxuZnVuY3Rpb24gZG9tcmVhZHkgKGZuKSB7XG4gIGlmICghSVNfRE9NKSByZXR1cm47XG4gIGxvYWRlZCA/IHNldFRpbWVvdXQoZm4sIDApIDogZnVuY3Rpb25zLnB1c2goZm4pO1xufVxuXG5mdW5jdGlvbiB0b0h0bWwoYWJzdHJhY3ROb2Rlcykge1xuICB2YXIgdGFnID0gYWJzdHJhY3ROb2Rlcy50YWcsXG4gICAgICBfYWJzdHJhY3ROb2RlcyRhdHRyaWIgPSBhYnN0cmFjdE5vZGVzLmF0dHJpYnV0ZXMsXG4gICAgICBhdHRyaWJ1dGVzID0gX2Fic3RyYWN0Tm9kZXMkYXR0cmliID09PSB2b2lkIDAgPyB7fSA6IF9hYnN0cmFjdE5vZGVzJGF0dHJpYixcbiAgICAgIF9hYnN0cmFjdE5vZGVzJGNoaWxkciA9IGFic3RyYWN0Tm9kZXMuY2hpbGRyZW4sXG4gICAgICBjaGlsZHJlbiA9IF9hYnN0cmFjdE5vZGVzJGNoaWxkciA9PT0gdm9pZCAwID8gW10gOiBfYWJzdHJhY3ROb2RlcyRjaGlsZHI7XG5cbiAgaWYgKHR5cGVvZiBhYnN0cmFjdE5vZGVzID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBodG1sRXNjYXBlKGFic3RyYWN0Tm9kZXMpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIjxcIi5jb25jYXQodGFnLCBcIiBcIikuY29uY2F0KGpvaW5BdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpLCBcIj5cIikuY29uY2F0KGNoaWxkcmVuLm1hcCh0b0h0bWwpLmpvaW4oJycpLCBcIjwvXCIpLmNvbmNhdCh0YWcsIFwiPlwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpY29uRnJvbU1hcHBpbmcobWFwcGluZywgcHJlZml4LCBpY29uTmFtZSkge1xuICBpZiAobWFwcGluZyAmJiBtYXBwaW5nW3ByZWZpeF0gJiYgbWFwcGluZ1twcmVmaXhdW2ljb25OYW1lXSkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmVmaXg6IHByZWZpeCxcbiAgICAgIGljb25OYW1lOiBpY29uTmFtZSxcbiAgICAgIGljb246IG1hcHBpbmdbcHJlZml4XVtpY29uTmFtZV1cbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogSW50ZXJuYWwgaGVscGVyIHRvIGJpbmQgYSBmdW5jdGlvbiBrbm93biB0byBoYXZlIDQgYXJndW1lbnRzXG4gKiB0byBhIGdpdmVuIGNvbnRleHQuXG4gKi9cblxudmFyIGJpbmRJbnRlcm5hbDQgPSBmdW5jdGlvbiBiaW5kSW50ZXJuYWw0KGZ1bmMsIHRoaXNDb250ZXh0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICAgIHJldHVybiBmdW5jLmNhbGwodGhpc0NvbnRleHQsIGEsIGIsIGMsIGQpO1xuICB9O1xufTtcblxuLyoqXG4gKiAjIFJlZHVjZVxuICpcbiAqIEEgZmFzdCBvYmplY3QgYC5yZWR1Y2UoKWAgaW1wbGVtZW50YXRpb24uXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSAgIHN1YmplY3QgICAgICBUaGUgb2JqZWN0IHRvIHJlZHVjZSBvdmVyLlxuICogQHBhcmFtICB7RnVuY3Rpb259IGZuICAgICAgICAgICBUaGUgcmVkdWNlciBmdW5jdGlvbi5cbiAqIEBwYXJhbSAge21peGVkfSAgICBpbml0aWFsVmFsdWUgVGhlIGluaXRpYWwgdmFsdWUgZm9yIHRoZSByZWR1Y2VyLCBkZWZhdWx0cyB0byBzdWJqZWN0WzBdLlxuICogQHBhcmFtICB7T2JqZWN0fSAgIHRoaXNDb250ZXh0ICBUaGUgY29udGV4dCBmb3IgdGhlIHJlZHVjZXIuXG4gKiBAcmV0dXJuIHttaXhlZH0gICAgICAgICAgICAgICAgIFRoZSBmaW5hbCByZXN1bHQuXG4gKi9cblxuXG52YXIgcmVkdWNlID0gZnVuY3Rpb24gZmFzdFJlZHVjZU9iamVjdChzdWJqZWN0LCBmbiwgaW5pdGlhbFZhbHVlLCB0aGlzQ29udGV4dCkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHN1YmplY3QpLFxuICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGgsXG4gICAgICBpdGVyYXRvciA9IHRoaXNDb250ZXh0ICE9PSB1bmRlZmluZWQgPyBiaW5kSW50ZXJuYWw0KGZuLCB0aGlzQ29udGV4dCkgOiBmbixcbiAgICAgIGksXG4gICAgICBrZXksXG4gICAgICByZXN1bHQ7XG5cbiAgaWYgKGluaXRpYWxWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaSA9IDE7XG4gICAgcmVzdWx0ID0gc3ViamVjdFtrZXlzWzBdXTtcbiAgfSBlbHNlIHtcbiAgICBpID0gMDtcbiAgICByZXN1bHQgPSBpbml0aWFsVmFsdWU7XG4gIH1cblxuICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICByZXN1bHQgPSBpdGVyYXRvcihyZXN1bHQsIHN1YmplY3Rba2V5XSwga2V5LCBzdWJqZWN0KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIHVjczJkZWNvZGUoKSBhbmQgY29kZVBvaW50QXQoKSBhcmUgYm90aCB3b3JrcyBvZiBNYXRoaWFzIEJ5bmVucyBhbmQgbGljZW5zZWQgdW5kZXIgTUlUXG4gKlxuICogQ29weXJpZ2h0IE1hdGhpYXMgQnluZW5zIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvPlxuXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmdcbiAqIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuICogXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4gKiB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4gKiBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiAqIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xuICogdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcbiAqIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4gKiBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFXG4gKiBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OXG4gKiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT05cbiAqIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5mdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIHZhciBjb3VudGVyID0gMDtcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG5cbiAgd2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXG4gICAgaWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuICAgICAgdmFyIGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblxuICAgICAgaWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgICAgIG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXQucHVzaCh2YWx1ZSk7XG4gICAgICAgIGNvdW50ZXItLTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2godmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIHRvSGV4KHVuaWNvZGUpIHtcbiAgdmFyIGRlY29kZWQgPSB1Y3MyZGVjb2RlKHVuaWNvZGUpO1xuICByZXR1cm4gZGVjb2RlZC5sZW5ndGggPT09IDEgPyBkZWNvZGVkWzBdLnRvU3RyaW5nKDE2KSA6IG51bGw7XG59XG5mdW5jdGlvbiBjb2RlUG9pbnRBdChzdHJpbmcsIGluZGV4KSB7XG4gIHZhciBzaXplID0gc3RyaW5nLmxlbmd0aDtcbiAgdmFyIGZpcnN0ID0gc3RyaW5nLmNoYXJDb2RlQXQoaW5kZXgpO1xuICB2YXIgc2Vjb25kO1xuXG4gIGlmIChmaXJzdCA+PSAweEQ4MDAgJiYgZmlyc3QgPD0gMHhEQkZGICYmIHNpemUgPiBpbmRleCArIDEpIHtcbiAgICBzZWNvbmQgPSBzdHJpbmcuY2hhckNvZGVBdChpbmRleCArIDEpO1xuXG4gICAgaWYgKHNlY29uZCA+PSAweERDMDAgJiYgc2Vjb25kIDw9IDB4REZGRikge1xuICAgICAgcmV0dXJuIChmaXJzdCAtIDB4RDgwMCkgKiAweDQwMCArIHNlY29uZCAtIDB4REMwMCArIDB4MTAwMDA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZpcnN0O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVJY29ucyhpY29ucykge1xuICByZXR1cm4gT2JqZWN0LmtleXMoaWNvbnMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBpY29uTmFtZSkge1xuICAgIHZhciBpY29uID0gaWNvbnNbaWNvbk5hbWVdO1xuICAgIHZhciBleHBhbmRlZCA9ICEhaWNvbi5pY29uO1xuXG4gICAgaWYgKGV4cGFuZGVkKSB7XG4gICAgICBhY2NbaWNvbi5pY29uTmFtZV0gPSBpY29uLmljb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY1tpY29uTmFtZV0gPSBpY29uO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cblxuZnVuY3Rpb24gZGVmaW5lSWNvbnMocHJlZml4LCBpY29ucykge1xuICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgdmFyIF9wYXJhbXMkc2tpcEhvb2tzID0gcGFyYW1zLnNraXBIb29rcyxcbiAgICAgIHNraXBIb29rcyA9IF9wYXJhbXMkc2tpcEhvb2tzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wYXJhbXMkc2tpcEhvb2tzO1xuICB2YXIgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZUljb25zKGljb25zKTtcblxuICBpZiAodHlwZW9mIG5hbWVzcGFjZS5ob29rcy5hZGRQYWNrID09PSAnZnVuY3Rpb24nICYmICFza2lwSG9va3MpIHtcbiAgICBuYW1lc3BhY2UuaG9va3MuYWRkUGFjayhwcmVmaXgsIG5vcm1hbGl6ZUljb25zKGljb25zKSk7XG4gIH0gZWxzZSB7XG4gICAgbmFtZXNwYWNlLnN0eWxlc1twcmVmaXhdID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIG5hbWVzcGFjZS5zdHlsZXNbcHJlZml4XSB8fCB7fSksIG5vcm1hbGl6ZWQpO1xuICB9XG4gIC8qKlxuICAgKiBGb250IEF3ZXNvbWUgNCB1c2VkIHRoZSBwcmVmaXggb2YgYGZhYCBmb3IgYWxsIGljb25zLiBXaXRoIHRoZSBpbnRyb2R1Y3Rpb25cbiAgICogb2YgbmV3IHN0eWxlcyB3ZSBuZWVkZWQgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIHRoZW0uIFByZWZpeCBgZmFgIGlzIG5vdyBhbiBhbGlhc1xuICAgKiBmb3IgYGZhc2Agc28gd2UnbGwgZWFzZSB0aGUgdXBncmFkZSBwcm9jZXNzIGZvciBvdXIgdXNlcnMgYnkgYXV0b21hdGljYWxseSBkZWZpbmluZ1xuICAgKiB0aGlzIGFzIHdlbGwuXG4gICAqL1xuXG5cbiAgaWYgKHByZWZpeCA9PT0gJ2ZhcycpIHtcbiAgICBkZWZpbmVJY29ucygnZmEnLCBpY29ucyk7XG4gIH1cbn1cblxudmFyIGR1b3RvbmVQYXRoUmUgPSBbLyojX19QVVJFX18qL193cmFwUmVnRXhwKC9wYXRoIGQ9XCIoKD86KD8hXCIpW1xcc1xcU10pKylcIi4qcGF0aCBkPVwiKCg/Oig/IVwiKVtcXHNcXFNdKSspXCIvLCB7XG4gIGQxOiAxLFxuICBkMjogMlxufSksIC8qI19fUFVSRV9fKi9fd3JhcFJlZ0V4cCgvcGF0aCBjbGFzcz1cIigoPzooPyFcIilbXFxzXFxTXSkrKVwiLipkPVwiKCg/Oig/IVwiKVtcXHNcXFNdKSspXCIuKnBhdGggY2xhc3M9XCIoKD86KD8hXCIpW1xcc1xcU10pKylcIi4qZD1cIigoPzooPyFcIilbXFxzXFxTXSkrKVwiLywge1xuICBjbHMxOiAxLFxuICBkMTogMixcbiAgY2xzMjogMyxcbiAgZDI6IDRcbn0pLCAvKiNfX1BVUkVfXyovX3dyYXBSZWdFeHAoL3BhdGggY2xhc3M9XCIoKD86KD8hXCIpW1xcc1xcU10pKylcIi4qZD1cIigoPzooPyFcIilbXFxzXFxTXSkrKVwiLywge1xuICBjbHMxOiAxLFxuICBkMTogMlxufSldO1xuXG52YXIgX0xPTkdfU1RZTEUsIF9QUkVGSVhFUywgX1BSRUZJWEVTX0ZPUl9GQU1JTFk7XG52YXIgc3R5bGVzID0gbmFtZXNwYWNlLnN0eWxlcyxcbiAgICBzaGltcyA9IG5hbWVzcGFjZS5zaGltcztcbnZhciBMT05HX1NUWUxFID0gKF9MT05HX1NUWUxFID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfTE9OR19TVFlMRSwgRkFNSUxZX0NMQVNTSUMsIE9iamVjdC52YWx1ZXMoUFJFRklYX1RPX0xPTkdfU1RZTEVbRkFNSUxZX0NMQVNTSUNdKSksIF9kZWZpbmVQcm9wZXJ0eShfTE9OR19TVFlMRSwgRkFNSUxZX1NIQVJQLCBPYmplY3QudmFsdWVzKFBSRUZJWF9UT19MT05HX1NUWUxFW0ZBTUlMWV9TSEFSUF0pKSwgX0xPTkdfU1RZTEUpO1xudmFyIF9kZWZhdWx0VXNhYmxlUHJlZml4ID0gbnVsbDtcbnZhciBfYnlVbmljb2RlID0ge307XG52YXIgX2J5TGlnYXR1cmUgPSB7fTtcbnZhciBfYnlPbGROYW1lID0ge307XG52YXIgX2J5T2xkVW5pY29kZSA9IHt9O1xudmFyIF9ieUFsaWFzID0ge307XG52YXIgUFJFRklYRVMgPSAoX1BSRUZJWEVTID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfUFJFRklYRVMsIEZBTUlMWV9DTEFTU0lDLCBPYmplY3Qua2V5cyhQUkVGSVhfVE9fU1RZTEVbRkFNSUxZX0NMQVNTSUNdKSksIF9kZWZpbmVQcm9wZXJ0eShfUFJFRklYRVMsIEZBTUlMWV9TSEFSUCwgT2JqZWN0LmtleXMoUFJFRklYX1RPX1NUWUxFW0ZBTUlMWV9TSEFSUF0pKSwgX1BSRUZJWEVTKTtcblxuZnVuY3Rpb24gaXNSZXNlcnZlZChuYW1lKSB7XG4gIHJldHVybiB+UkVTRVJWRURfQ0xBU1NFUy5pbmRleE9mKG5hbWUpO1xufVxuXG5mdW5jdGlvbiBnZXRJY29uTmFtZShjc3NQcmVmaXgsIGNscykge1xuICB2YXIgcGFydHMgPSBjbHMuc3BsaXQoJy0nKTtcbiAgdmFyIHByZWZpeCA9IHBhcnRzWzBdO1xuICB2YXIgaWNvbk5hbWUgPSBwYXJ0cy5zbGljZSgxKS5qb2luKCctJyk7XG5cbiAgaWYgKHByZWZpeCA9PT0gY3NzUHJlZml4ICYmIGljb25OYW1lICE9PSAnJyAmJiAhaXNSZXNlcnZlZChpY29uTmFtZSkpIHtcbiAgICByZXR1cm4gaWNvbk5hbWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbnZhciBidWlsZCA9IGZ1bmN0aW9uIGJ1aWxkKCkge1xuICB2YXIgbG9va3VwID0gZnVuY3Rpb24gbG9va3VwKHJlZHVjZXIpIHtcbiAgICByZXR1cm4gcmVkdWNlKHN0eWxlcywgZnVuY3Rpb24gKG8sIHN0eWxlLCBwcmVmaXgpIHtcbiAgICAgIG9bcHJlZml4XSA9IHJlZHVjZShzdHlsZSwgcmVkdWNlciwge30pO1xuICAgICAgcmV0dXJuIG87XG4gICAgfSwge30pO1xuICB9O1xuXG4gIF9ieVVuaWNvZGUgPSBsb29rdXAoZnVuY3Rpb24gKGFjYywgaWNvbiwgaWNvbk5hbWUpIHtcbiAgICBpZiAoaWNvblszXSkge1xuICAgICAgYWNjW2ljb25bM11dID0gaWNvbk5hbWU7XG4gICAgfVxuXG4gICAgaWYgKGljb25bMl0pIHtcbiAgICAgIHZhciBhbGlhc2VzID0gaWNvblsyXS5maWx0ZXIoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBhID09PSAnbnVtYmVyJztcbiAgICAgIH0pO1xuICAgICAgYWxpYXNlcy5mb3JFYWNoKGZ1bmN0aW9uIChhbGlhcykge1xuICAgICAgICBhY2NbYWxpYXMudG9TdHJpbmcoMTYpXSA9IGljb25OYW1lO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSk7XG4gIF9ieUxpZ2F0dXJlID0gbG9va3VwKGZ1bmN0aW9uIChhY2MsIGljb24sIGljb25OYW1lKSB7XG4gICAgYWNjW2ljb25OYW1lXSA9IGljb25OYW1lO1xuXG4gICAgaWYgKGljb25bMl0pIHtcbiAgICAgIHZhciBhbGlhc2VzID0gaWNvblsyXS5maWx0ZXIoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBhID09PSAnc3RyaW5nJztcbiAgICAgIH0pO1xuICAgICAgYWxpYXNlcy5mb3JFYWNoKGZ1bmN0aW9uIChhbGlhcykge1xuICAgICAgICBhY2NbYWxpYXNdID0gaWNvbk5hbWU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9KTtcbiAgX2J5QWxpYXMgPSBsb29rdXAoZnVuY3Rpb24gKGFjYywgaWNvbiwgaWNvbk5hbWUpIHtcbiAgICB2YXIgYWxpYXNlcyA9IGljb25bMl07XG4gICAgYWNjW2ljb25OYW1lXSA9IGljb25OYW1lO1xuICAgIGFsaWFzZXMuZm9yRWFjaChmdW5jdGlvbiAoYWxpYXMpIHtcbiAgICAgIGFjY1thbGlhc10gPSBpY29uTmFtZTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjO1xuICB9KTsgLy8gSWYgd2UgaGF2ZSBhIEtpdCwgd2UgY2FuJ3QgZGV0ZXJtaW5lIGlmIHJlZ3VsYXIgaXMgYXZhaWxhYmxlIHNpbmNlIHdlXG4gIC8vIGNvdWxkIGJlIGF1dG8tZmV0Y2hpbmcgaXQuIFdlJ2xsIGhhdmUgdG8gYXNzdW1lIHRoYXQgaXQgaXMgYXZhaWxhYmxlLlxuXG4gIHZhciBoYXNSZWd1bGFyID0gJ2ZhcicgaW4gc3R5bGVzIHx8IGNvbmZpZy5hdXRvRmV0Y2hTdmc7XG4gIHZhciBzaGltTG9va3VwcyA9IHJlZHVjZShzaGltcywgZnVuY3Rpb24gKGFjYywgc2hpbSkge1xuICAgIHZhciBtYXliZU5hbWVNYXliZVVuaWNvZGUgPSBzaGltWzBdO1xuICAgIHZhciBwcmVmaXggPSBzaGltWzFdO1xuICAgIHZhciBpY29uTmFtZSA9IHNoaW1bMl07XG5cbiAgICBpZiAocHJlZml4ID09PSAnZmFyJyAmJiAhaGFzUmVndWxhcikge1xuICAgICAgcHJlZml4ID0gJ2Zhcyc7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBtYXliZU5hbWVNYXliZVVuaWNvZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBhY2MubmFtZXNbbWF5YmVOYW1lTWF5YmVVbmljb2RlXSA9IHtcbiAgICAgICAgcHJlZml4OiBwcmVmaXgsXG4gICAgICAgIGljb25OYW1lOiBpY29uTmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG1heWJlTmFtZU1heWJlVW5pY29kZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGFjYy51bmljb2Rlc1ttYXliZU5hbWVNYXliZVVuaWNvZGUudG9TdHJpbmcoMTYpXSA9IHtcbiAgICAgICAgcHJlZml4OiBwcmVmaXgsXG4gICAgICAgIGljb25OYW1lOiBpY29uTmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7XG4gICAgbmFtZXM6IHt9LFxuICAgIHVuaWNvZGVzOiB7fVxuICB9KTtcbiAgX2J5T2xkTmFtZSA9IHNoaW1Mb29rdXBzLm5hbWVzO1xuICBfYnlPbGRVbmljb2RlID0gc2hpbUxvb2t1cHMudW5pY29kZXM7XG4gIF9kZWZhdWx0VXNhYmxlUHJlZml4ID0gZ2V0Q2Fub25pY2FsUHJlZml4KGNvbmZpZy5zdHlsZURlZmF1bHQsIHtcbiAgICBmYW1pbHk6IGNvbmZpZy5mYW1pbHlEZWZhdWx0XG4gIH0pO1xufTtcbm9uQ2hhbmdlKGZ1bmN0aW9uIChjKSB7XG4gIF9kZWZhdWx0VXNhYmxlUHJlZml4ID0gZ2V0Q2Fub25pY2FsUHJlZml4KGMuc3R5bGVEZWZhdWx0LCB7XG4gICAgZmFtaWx5OiBjb25maWcuZmFtaWx5RGVmYXVsdFxuICB9KTtcbn0pO1xuYnVpbGQoKTtcbmZ1bmN0aW9uIGJ5VW5pY29kZShwcmVmaXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIChfYnlVbmljb2RlW3ByZWZpeF0gfHwge30pW3VuaWNvZGVdO1xufVxuZnVuY3Rpb24gYnlMaWdhdHVyZShwcmVmaXgsIGxpZ2F0dXJlKSB7XG4gIHJldHVybiAoX2J5TGlnYXR1cmVbcHJlZml4XSB8fCB7fSlbbGlnYXR1cmVdO1xufVxuZnVuY3Rpb24gYnlBbGlhcyhwcmVmaXgsIGFsaWFzKSB7XG4gIHJldHVybiAoX2J5QWxpYXNbcHJlZml4XSB8fCB7fSlbYWxpYXNdO1xufVxuZnVuY3Rpb24gYnlPbGROYW1lKG5hbWUpIHtcbiAgcmV0dXJuIF9ieU9sZE5hbWVbbmFtZV0gfHwge1xuICAgIHByZWZpeDogbnVsbCxcbiAgICBpY29uTmFtZTogbnVsbFxuICB9O1xufVxuZnVuY3Rpb24gYnlPbGRVbmljb2RlKHVuaWNvZGUpIHtcbiAgdmFyIG9sZFVuaWNvZGUgPSBfYnlPbGRVbmljb2RlW3VuaWNvZGVdO1xuICB2YXIgbmV3VW5pY29kZSA9IGJ5VW5pY29kZSgnZmFzJywgdW5pY29kZSk7XG4gIHJldHVybiBvbGRVbmljb2RlIHx8IChuZXdVbmljb2RlID8ge1xuICAgIHByZWZpeDogJ2ZhcycsXG4gICAgaWNvbk5hbWU6IG5ld1VuaWNvZGVcbiAgfSA6IG51bGwpIHx8IHtcbiAgICBwcmVmaXg6IG51bGwsXG4gICAgaWNvbk5hbWU6IG51bGxcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRVc2FibGVQcmVmaXgoKSB7XG4gIHJldHVybiBfZGVmYXVsdFVzYWJsZVByZWZpeDtcbn1cbnZhciBlbXB0eUNhbm9uaWNhbEljb24gPSBmdW5jdGlvbiBlbXB0eUNhbm9uaWNhbEljb24oKSB7XG4gIHJldHVybiB7XG4gICAgcHJlZml4OiBudWxsLFxuICAgIGljb25OYW1lOiBudWxsLFxuICAgIHJlc3Q6IFtdXG4gIH07XG59O1xuZnVuY3Rpb24gZ2V0Q2Fub25pY2FsUHJlZml4KHN0eWxlT3JQcmVmaXgpIHtcbiAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBfcGFyYW1zJGZhbWlseSA9IHBhcmFtcy5mYW1pbHksXG4gICAgICBmYW1pbHkgPSBfcGFyYW1zJGZhbWlseSA9PT0gdm9pZCAwID8gRkFNSUxZX0NMQVNTSUMgOiBfcGFyYW1zJGZhbWlseTtcbiAgdmFyIHN0eWxlID0gUFJFRklYX1RPX1NUWUxFW2ZhbWlseV1bc3R5bGVPclByZWZpeF07XG4gIHZhciBwcmVmaXggPSBTVFlMRV9UT19QUkVGSVhbZmFtaWx5XVtzdHlsZU9yUHJlZml4XSB8fCBTVFlMRV9UT19QUkVGSVhbZmFtaWx5XVtzdHlsZV07XG4gIHZhciBkZWZpbmVkID0gc3R5bGVPclByZWZpeCBpbiBuYW1lc3BhY2Uuc3R5bGVzID8gc3R5bGVPclByZWZpeCA6IG51bGw7XG4gIHJldHVybiBwcmVmaXggfHwgZGVmaW5lZCB8fCBudWxsO1xufVxudmFyIFBSRUZJWEVTX0ZPUl9GQU1JTFkgPSAoX1BSRUZJWEVTX0ZPUl9GQU1JTFkgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9QUkVGSVhFU19GT1JfRkFNSUxZLCBGQU1JTFlfQ0xBU1NJQywgT2JqZWN0LmtleXMoUFJFRklYX1RPX0xPTkdfU1RZTEVbRkFNSUxZX0NMQVNTSUNdKSksIF9kZWZpbmVQcm9wZXJ0eShfUFJFRklYRVNfRk9SX0ZBTUlMWSwgRkFNSUxZX1NIQVJQLCBPYmplY3Qua2V5cyhQUkVGSVhfVE9fTE9OR19TVFlMRVtGQU1JTFlfU0hBUlBdKSksIF9QUkVGSVhFU19GT1JfRkFNSUxZKTtcbmZ1bmN0aW9uIGdldENhbm9uaWNhbEljb24odmFsdWVzKSB7XG4gIHZhciBfZmFtUHJvcHM7XG5cbiAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBfcGFyYW1zJHNraXBMb29rdXBzID0gcGFyYW1zLnNraXBMb29rdXBzLFxuICAgICAgc2tpcExvb2t1cHMgPSBfcGFyYW1zJHNraXBMb29rdXBzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wYXJhbXMkc2tpcExvb2t1cHM7XG4gIHZhciBmYW1Qcm9wcyA9IChfZmFtUHJvcHMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9mYW1Qcm9wcywgRkFNSUxZX0NMQVNTSUMsIFwiXCIuY29uY2F0KGNvbmZpZy5jc3NQcmVmaXgsIFwiLVwiKS5jb25jYXQoRkFNSUxZX0NMQVNTSUMpKSwgX2RlZmluZVByb3BlcnR5KF9mYW1Qcm9wcywgRkFNSUxZX1NIQVJQLCBcIlwiLmNvbmNhdChjb25maWcuY3NzUHJlZml4LCBcIi1cIikuY29uY2F0KEZBTUlMWV9TSEFSUCkpLCBfZmFtUHJvcHMpO1xuICB2YXIgZ2l2ZW5QcmVmaXggPSBudWxsO1xuICB2YXIgZmFtaWx5ID0gRkFNSUxZX0NMQVNTSUM7XG5cbiAgaWYgKHZhbHVlcy5pbmNsdWRlcyhmYW1Qcm9wc1tGQU1JTFlfQ0xBU1NJQ10pIHx8IHZhbHVlcy5zb21lKGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIFBSRUZJWEVTX0ZPUl9GQU1JTFlbRkFNSUxZX0NMQVNTSUNdLmluY2x1ZGVzKHYpO1xuICB9KSkge1xuICAgIGZhbWlseSA9IEZBTUlMWV9DTEFTU0lDO1xuICB9XG5cbiAgaWYgKHZhbHVlcy5pbmNsdWRlcyhmYW1Qcm9wc1tGQU1JTFlfU0hBUlBdKSB8fCB2YWx1ZXMuc29tZShmdW5jdGlvbiAodikge1xuICAgIHJldHVybiBQUkVGSVhFU19GT1JfRkFNSUxZW0ZBTUlMWV9TSEFSUF0uaW5jbHVkZXModik7XG4gIH0pKSB7XG4gICAgZmFtaWx5ID0gRkFNSUxZX1NIQVJQO1xuICB9XG5cbiAgdmFyIGNhbm9uaWNhbCA9IHZhbHVlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY2xzKSB7XG4gICAgdmFyIGljb25OYW1lID0gZ2V0SWNvbk5hbWUoY29uZmlnLmNzc1ByZWZpeCwgY2xzKTtcblxuICAgIGlmIChzdHlsZXNbY2xzXSkge1xuICAgICAgY2xzID0gTE9OR19TVFlMRVtmYW1pbHldLmluY2x1ZGVzKGNscykgPyBMT05HX1NUWUxFX1RPX1BSRUZJWFtmYW1pbHldW2Nsc10gOiBjbHM7XG4gICAgICBnaXZlblByZWZpeCA9IGNscztcbiAgICAgIGFjYy5wcmVmaXggPSBjbHM7XG4gICAgfSBlbHNlIGlmIChQUkVGSVhFU1tmYW1pbHldLmluZGV4T2YoY2xzKSA+IC0xKSB7XG4gICAgICBnaXZlblByZWZpeCA9IGNscztcbiAgICAgIGFjYy5wcmVmaXggPSBnZXRDYW5vbmljYWxQcmVmaXgoY2xzLCB7XG4gICAgICAgIGZhbWlseTogZmFtaWx5XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGljb25OYW1lKSB7XG4gICAgICBhY2MuaWNvbk5hbWUgPSBpY29uTmFtZTtcbiAgICB9IGVsc2UgaWYgKGNscyAhPT0gY29uZmlnLnJlcGxhY2VtZW50Q2xhc3MgJiYgY2xzICE9PSBmYW1Qcm9wc1tGQU1JTFlfQ0xBU1NJQ10gJiYgY2xzICE9PSBmYW1Qcm9wc1tGQU1JTFlfU0hBUlBdKSB7XG4gICAgICBhY2MucmVzdC5wdXNoKGNscyk7XG4gICAgfVxuXG4gICAgaWYgKCFza2lwTG9va3VwcyAmJiBhY2MucHJlZml4ICYmIGFjYy5pY29uTmFtZSkge1xuICAgICAgdmFyIHNoaW0gPSBnaXZlblByZWZpeCA9PT0gJ2ZhJyA/IGJ5T2xkTmFtZShhY2MuaWNvbk5hbWUpIDoge307XG4gICAgICB2YXIgYWxpYXNJY29uTmFtZSA9IGJ5QWxpYXMoYWNjLnByZWZpeCwgYWNjLmljb25OYW1lKTtcblxuICAgICAgaWYgKHNoaW0ucHJlZml4KSB7XG4gICAgICAgIGdpdmVuUHJlZml4ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgYWNjLmljb25OYW1lID0gc2hpbS5pY29uTmFtZSB8fCBhbGlhc0ljb25OYW1lIHx8IGFjYy5pY29uTmFtZTtcbiAgICAgIGFjYy5wcmVmaXggPSBzaGltLnByZWZpeCB8fCBhY2MucHJlZml4O1xuXG4gICAgICBpZiAoYWNjLnByZWZpeCA9PT0gJ2ZhcicgJiYgIXN0eWxlc1snZmFyJ10gJiYgc3R5bGVzWydmYXMnXSAmJiAhY29uZmlnLmF1dG9GZXRjaFN2Zykge1xuICAgICAgICAvLyBBbGxvdyBhIGZhbGxiYWNrIGZyb20gdGhlIHJlZ3VsYXIgc3R5bGUgdG8gc29saWQgaWYgcmVndWxhciBpcyBub3QgYXZhaWxhYmxlXG4gICAgICAgIC8vIGJ1dCBvbmx5IGlmIHdlIGFyZW4ndCBhdXRvLWZldGNoaW5nIFNWR3NcbiAgICAgICAgYWNjLnByZWZpeCA9ICdmYXMnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIGVtcHR5Q2Fub25pY2FsSWNvbigpKTtcblxuICBpZiAodmFsdWVzLmluY2x1ZGVzKCdmYS1icmFuZHMnKSB8fCB2YWx1ZXMuaW5jbHVkZXMoJ2ZhYicpKSB7XG4gICAgY2Fub25pY2FsLnByZWZpeCA9ICdmYWInO1xuICB9XG5cbiAgaWYgKHZhbHVlcy5pbmNsdWRlcygnZmEtZHVvdG9uZScpIHx8IHZhbHVlcy5pbmNsdWRlcygnZmFkJykpIHtcbiAgICBjYW5vbmljYWwucHJlZml4ID0gJ2ZhZCc7XG4gIH1cblxuICBpZiAoIWNhbm9uaWNhbC5wcmVmaXggJiYgZmFtaWx5ID09PSBGQU1JTFlfU0hBUlAgJiYgKHN0eWxlc1snZmFzcyddIHx8IGNvbmZpZy5hdXRvRmV0Y2hTdmcpKSB7XG4gICAgY2Fub25pY2FsLnByZWZpeCA9ICdmYXNzJztcbiAgICBjYW5vbmljYWwuaWNvbk5hbWUgPSBieUFsaWFzKGNhbm9uaWNhbC5wcmVmaXgsIGNhbm9uaWNhbC5pY29uTmFtZSkgfHwgY2Fub25pY2FsLmljb25OYW1lO1xuICB9XG5cbiAgaWYgKGNhbm9uaWNhbC5wcmVmaXggPT09ICdmYScgfHwgZ2l2ZW5QcmVmaXggPT09ICdmYScpIHtcbiAgICAvLyBUaGUgZmEgcHJlZml4IGlzIG5vdCBjYW5vbmljYWwuIFNvIGlmIGl0IGhhcyBtYWRlIGl0IHRocm91Z2ggdW50aWwgdGhpcyBwb2ludFxuICAgIC8vIHdlIHdpbGwgc2hpZnQgaXQgdG8gdGhlIGNvcnJlY3QgcHJlZml4LlxuICAgIGNhbm9uaWNhbC5wcmVmaXggPSBnZXREZWZhdWx0VXNhYmxlUHJlZml4KCkgfHwgJ2Zhcyc7XG4gIH1cblxuICByZXR1cm4gY2Fub25pY2FsO1xufVxuXG52YXIgTGlicmFyeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIExpYnJhcnkoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpYnJhcnkpO1xuXG4gICAgdGhpcy5kZWZpbml0aW9ucyA9IHt9O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKExpYnJhcnksIFt7XG4gICAga2V5OiBcImFkZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZGVmaW5pdGlvbnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGRlZmluaXRpb25zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWRkaXRpb25zID0gZGVmaW5pdGlvbnMucmVkdWNlKHRoaXMuX3B1bGxEZWZpbml0aW9ucywge30pO1xuICAgICAgT2JqZWN0LmtleXMoYWRkaXRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX3RoaXMuZGVmaW5pdGlvbnNba2V5XSA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBfdGhpcy5kZWZpbml0aW9uc1trZXldIHx8IHt9KSwgYWRkaXRpb25zW2tleV0pO1xuICAgICAgICBkZWZpbmVJY29ucyhrZXksIGFkZGl0aW9uc1trZXldKTsgLy8gVE9ETyBjYW4gd2Ugc3RvcCBkb2luZyB0aGlzPyBXZSBjYW4ndCBnZXQgdGhlIGljb25zIGJ5ICdmYS1zb2xpZCcgYW55IGxvbmdlciBzbyB0aGlzIHByb2JhYmx5IG5lZWRzIHRvIGNoYW5nZVxuXG4gICAgICAgIHZhciBsb25nUHJlZml4ID0gUFJFRklYX1RPX0xPTkdfU1RZTEVbRkFNSUxZX0NMQVNTSUNdW2tleV07XG4gICAgICAgIGlmIChsb25nUHJlZml4KSBkZWZpbmVJY29ucyhsb25nUHJlZml4LCBhZGRpdGlvbnNba2V5XSk7XG4gICAgICAgIGJ1aWxkKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICB0aGlzLmRlZmluaXRpb25zID0ge307XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9wdWxsRGVmaW5pdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3B1bGxEZWZpbml0aW9ucyhhZGRpdGlvbnMsIGRlZmluaXRpb24pIHtcbiAgICAgIHZhciBub3JtYWxpemVkID0gZGVmaW5pdGlvbi5wcmVmaXggJiYgZGVmaW5pdGlvbi5pY29uTmFtZSAmJiBkZWZpbml0aW9uLmljb24gPyB7XG4gICAgICAgIDA6IGRlZmluaXRpb25cbiAgICAgIH0gOiBkZWZpbml0aW9uO1xuICAgICAgT2JqZWN0LmtleXMobm9ybWFsaXplZCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIF9ub3JtYWxpemVkJGtleSA9IG5vcm1hbGl6ZWRba2V5XSxcbiAgICAgICAgICAgIHByZWZpeCA9IF9ub3JtYWxpemVkJGtleS5wcmVmaXgsXG4gICAgICAgICAgICBpY29uTmFtZSA9IF9ub3JtYWxpemVkJGtleS5pY29uTmFtZSxcbiAgICAgICAgICAgIGljb24gPSBfbm9ybWFsaXplZCRrZXkuaWNvbjtcbiAgICAgICAgdmFyIGFsaWFzZXMgPSBpY29uWzJdO1xuICAgICAgICBpZiAoIWFkZGl0aW9uc1twcmVmaXhdKSBhZGRpdGlvbnNbcHJlZml4XSA9IHt9O1xuXG4gICAgICAgIGlmIChhbGlhc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBhbGlhc2VzLmZvckVhY2goZnVuY3Rpb24gKGFsaWFzKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFsaWFzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBhZGRpdGlvbnNbcHJlZml4XVthbGlhc10gPSBpY29uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYWRkaXRpb25zW3ByZWZpeF1baWNvbk5hbWVdID0gaWNvbjtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFkZGl0aW9ucztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTGlicmFyeTtcbn0oKTtcblxudmFyIF9wbHVnaW5zID0gW107XG52YXIgX2hvb2tzID0ge307XG52YXIgcHJvdmlkZXJzID0ge307XG52YXIgZGVmYXVsdFByb3ZpZGVyS2V5cyA9IE9iamVjdC5rZXlzKHByb3ZpZGVycyk7XG5mdW5jdGlvbiByZWdpc3RlclBsdWdpbnMobmV4dFBsdWdpbnMsIF9yZWYpIHtcbiAgdmFyIG9iaiA9IF9yZWYubWl4b3V0c1RvO1xuICBfcGx1Z2lucyA9IG5leHRQbHVnaW5zO1xuICBfaG9va3MgPSB7fTtcbiAgT2JqZWN0LmtleXMocHJvdmlkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgaWYgKGRlZmF1bHRQcm92aWRlcktleXMuaW5kZXhPZihrKSA9PT0gLTEpIHtcbiAgICAgIGRlbGV0ZSBwcm92aWRlcnNba107XG4gICAgfVxuICB9KTtcblxuICBfcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgbWl4b3V0ID0gcGx1Z2luLm1peG91dCA/IHBsdWdpbi5taXhvdXQoKSA6IHt9O1xuICAgIE9iamVjdC5rZXlzKG1peG91dCkuZm9yRWFjaChmdW5jdGlvbiAodGspIHtcbiAgICAgIGlmICh0eXBlb2YgbWl4b3V0W3RrXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvYmpbdGtdID0gbWl4b3V0W3RrXTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90eXBlb2YobWl4b3V0W3RrXSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKG1peG91dFt0a10pLmZvckVhY2goZnVuY3Rpb24gKHNrKSB7XG4gICAgICAgICAgaWYgKCFvYmpbdGtdKSB7XG4gICAgICAgICAgICBvYmpbdGtdID0ge307XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb2JqW3RrXVtza10gPSBtaXhvdXRbdGtdW3NrXTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAocGx1Z2luLmhvb2tzKSB7XG4gICAgICB2YXIgaG9va3MgPSBwbHVnaW4uaG9va3MoKTtcbiAgICAgIE9iamVjdC5rZXlzKGhvb2tzKS5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XG4gICAgICAgIGlmICghX2hvb2tzW2hvb2tdKSB7XG4gICAgICAgICAgX2hvb2tzW2hvb2tdID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBfaG9va3NbaG9va10ucHVzaChob29rc1tob29rXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocGx1Z2luLnByb3ZpZGVzKSB7XG4gICAgICBwbHVnaW4ucHJvdmlkZXMocHJvdmlkZXJzKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBvYmo7XG59XG5mdW5jdGlvbiBjaGFpbkhvb2tzKGhvb2ssIGFjY3VtdWxhdG9yKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBob29rRm5zID0gX2hvb2tzW2hvb2tdIHx8IFtdO1xuICBob29rRm5zLmZvckVhY2goZnVuY3Rpb24gKGhvb2tGbikge1xuICAgIGFjY3VtdWxhdG9yID0gaG9va0ZuLmFwcGx5KG51bGwsIFthY2N1bXVsYXRvcl0uY29uY2F0KGFyZ3MpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgfSk7XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cbmZ1bmN0aW9uIGNhbGxIb29rcyhob29rKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHZhciBob29rRm5zID0gX2hvb2tzW2hvb2tdIHx8IFtdO1xuICBob29rRm5zLmZvckVhY2goZnVuY3Rpb24gKGhvb2tGbikge1xuICAgIGhvb2tGbi5hcHBseShudWxsLCBhcmdzKTtcbiAgfSk7XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBjYWxsUHJvdmlkZWQoKSB7XG4gIHZhciBob29rID0gYXJndW1lbnRzWzBdO1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHJldHVybiBwcm92aWRlcnNbaG9va10gPyBwcm92aWRlcnNbaG9va10uYXBwbHkobnVsbCwgYXJncykgOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGZpbmRJY29uRGVmaW5pdGlvbihpY29uTG9va3VwKSB7XG4gIGlmIChpY29uTG9va3VwLnByZWZpeCA9PT0gJ2ZhJykge1xuICAgIGljb25Mb29rdXAucHJlZml4ID0gJ2Zhcyc7XG4gIH1cblxuICB2YXIgaWNvbk5hbWUgPSBpY29uTG9va3VwLmljb25OYW1lO1xuICB2YXIgcHJlZml4ID0gaWNvbkxvb2t1cC5wcmVmaXggfHwgZ2V0RGVmYXVsdFVzYWJsZVByZWZpeCgpO1xuICBpZiAoIWljb25OYW1lKSByZXR1cm47XG4gIGljb25OYW1lID0gYnlBbGlhcyhwcmVmaXgsIGljb25OYW1lKSB8fCBpY29uTmFtZTtcbiAgcmV0dXJuIGljb25Gcm9tTWFwcGluZyhsaWJyYXJ5LmRlZmluaXRpb25zLCBwcmVmaXgsIGljb25OYW1lKSB8fCBpY29uRnJvbU1hcHBpbmcobmFtZXNwYWNlLnN0eWxlcywgcHJlZml4LCBpY29uTmFtZSk7XG59XG52YXIgbGlicmFyeSA9IG5ldyBMaWJyYXJ5KCk7XG52YXIgbm9BdXRvID0gZnVuY3Rpb24gbm9BdXRvKCkge1xuICBjb25maWcuYXV0b1JlcGxhY2VTdmcgPSBmYWxzZTtcbiAgY29uZmlnLm9ic2VydmVNdXRhdGlvbnMgPSBmYWxzZTtcbiAgY2FsbEhvb2tzKCdub0F1dG8nKTtcbn07XG52YXIgZG9tID0ge1xuICBpMnN2ZzogZnVuY3Rpb24gaTJzdmcoKSB7XG4gICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICBpZiAoSVNfRE9NKSB7XG4gICAgICBjYWxsSG9va3MoJ2JlZm9yZUkyc3ZnJywgcGFyYW1zKTtcbiAgICAgIGNhbGxQcm92aWRlZCgncHNldWRvRWxlbWVudHMyc3ZnJywgcGFyYW1zKTtcbiAgICAgIHJldHVybiBjYWxsUHJvdmlkZWQoJ2kyc3ZnJywgcGFyYW1zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdPcGVyYXRpb24gcmVxdWlyZXMgYSBET00gb2Ygc29tZSBraW5kLicpO1xuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IGZ1bmN0aW9uIHdhdGNoKCkge1xuICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciBhdXRvUmVwbGFjZVN2Z1Jvb3QgPSBwYXJhbXMuYXV0b1JlcGxhY2VTdmdSb290O1xuXG4gICAgaWYgKGNvbmZpZy5hdXRvUmVwbGFjZVN2ZyA9PT0gZmFsc2UpIHtcbiAgICAgIGNvbmZpZy5hdXRvUmVwbGFjZVN2ZyA9IHRydWU7XG4gICAgfVxuXG4gICAgY29uZmlnLm9ic2VydmVNdXRhdGlvbnMgPSB0cnVlO1xuICAgIGRvbXJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgIGF1dG9SZXBsYWNlKHtcbiAgICAgICAgYXV0b1JlcGxhY2VTdmdSb290OiBhdXRvUmVwbGFjZVN2Z1Jvb3RcbiAgICAgIH0pO1xuICAgICAgY2FsbEhvb2tzKCd3YXRjaCcsIHBhcmFtcyk7XG4gICAgfSk7XG4gIH1cbn07XG52YXIgcGFyc2UgPSB7XG4gIGljb246IGZ1bmN0aW9uIGljb24oX2ljb24pIHtcbiAgICBpZiAoX2ljb24gPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChfdHlwZW9mKF9pY29uKSA9PT0gJ29iamVjdCcgJiYgX2ljb24ucHJlZml4ICYmIF9pY29uLmljb25OYW1lKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmVmaXg6IF9pY29uLnByZWZpeCxcbiAgICAgICAgaWNvbk5hbWU6IGJ5QWxpYXMoX2ljb24ucHJlZml4LCBfaWNvbi5pY29uTmFtZSkgfHwgX2ljb24uaWNvbk5hbWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoX2ljb24pICYmIF9pY29uLmxlbmd0aCA9PT0gMikge1xuICAgICAgdmFyIGljb25OYW1lID0gX2ljb25bMV0uaW5kZXhPZignZmEtJykgPT09IDAgPyBfaWNvblsxXS5zbGljZSgzKSA6IF9pY29uWzFdO1xuICAgICAgdmFyIHByZWZpeCA9IGdldENhbm9uaWNhbFByZWZpeChfaWNvblswXSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmVmaXg6IHByZWZpeCxcbiAgICAgICAgaWNvbk5hbWU6IGJ5QWxpYXMocHJlZml4LCBpY29uTmFtZSkgfHwgaWNvbk5hbWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBfaWNvbiA9PT0gJ3N0cmluZycgJiYgKF9pY29uLmluZGV4T2YoXCJcIi5jb25jYXQoY29uZmlnLmNzc1ByZWZpeCwgXCItXCIpKSA+IC0xIHx8IF9pY29uLm1hdGNoKElDT05fU0VMRUNUSU9OX1NZTlRBWF9QQVRURVJOKSkpIHtcbiAgICAgIHZhciBjYW5vbmljYWxJY29uID0gZ2V0Q2Fub25pY2FsSWNvbihfaWNvbi5zcGxpdCgnICcpLCB7XG4gICAgICAgIHNraXBMb29rdXBzOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByZWZpeDogY2Fub25pY2FsSWNvbi5wcmVmaXggfHwgZ2V0RGVmYXVsdFVzYWJsZVByZWZpeCgpLFxuICAgICAgICBpY29uTmFtZTogYnlBbGlhcyhjYW5vbmljYWxJY29uLnByZWZpeCwgY2Fub25pY2FsSWNvbi5pY29uTmFtZSkgfHwgY2Fub25pY2FsSWNvbi5pY29uTmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIF9pY29uID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIF9wcmVmaXggPSBnZXREZWZhdWx0VXNhYmxlUHJlZml4KCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByZWZpeDogX3ByZWZpeCxcbiAgICAgICAgaWNvbk5hbWU6IGJ5QWxpYXMoX3ByZWZpeCwgX2ljb24pIHx8IF9pY29uXG4gICAgICB9O1xuICAgIH1cbiAgfVxufTtcbnZhciBhcGkgPSB7XG4gIG5vQXV0bzogbm9BdXRvLFxuICBjb25maWc6IGNvbmZpZyxcbiAgZG9tOiBkb20sXG4gIHBhcnNlOiBwYXJzZSxcbiAgbGlicmFyeTogbGlicmFyeSxcbiAgZmluZEljb25EZWZpbml0aW9uOiBmaW5kSWNvbkRlZmluaXRpb24sXG4gIHRvSHRtbDogdG9IdG1sXG59O1xuXG52YXIgYXV0b1JlcGxhY2UgPSBmdW5jdGlvbiBhdXRvUmVwbGFjZSgpIHtcbiAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBfcGFyYW1zJGF1dG9SZXBsYWNlU3YgPSBwYXJhbXMuYXV0b1JlcGxhY2VTdmdSb290LFxuICAgICAgYXV0b1JlcGxhY2VTdmdSb290ID0gX3BhcmFtcyRhdXRvUmVwbGFjZVN2ID09PSB2b2lkIDAgPyBET0NVTUVOVCA6IF9wYXJhbXMkYXV0b1JlcGxhY2VTdjtcbiAgaWYgKChPYmplY3Qua2V5cyhuYW1lc3BhY2Uuc3R5bGVzKS5sZW5ndGggPiAwIHx8IGNvbmZpZy5hdXRvRmV0Y2hTdmcpICYmIElTX0RPTSAmJiBjb25maWcuYXV0b1JlcGxhY2VTdmcpIGFwaS5kb20uaTJzdmcoe1xuICAgIG5vZGU6IGF1dG9SZXBsYWNlU3ZnUm9vdFxuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGRvbVZhcmlhbnRzKHZhbCwgYWJzdHJhY3RDcmVhdG9yKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWwsICdhYnN0cmFjdCcsIHtcbiAgICBnZXQ6IGFic3RyYWN0Q3JlYXRvclxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbCwgJ2h0bWwnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsLmFic3RyYWN0Lm1hcChmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gdG9IdG1sKGEpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbCwgJ25vZGUnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAoIUlTX0RPTSkgcmV0dXJuO1xuICAgICAgdmFyIGNvbnRhaW5lciA9IERPQ1VNRU5ULmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IHZhbC5odG1sO1xuICAgICAgcmV0dXJuIGNvbnRhaW5lci5jaGlsZHJlbjtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBhc0ljb24gKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIG1haW4gPSBfcmVmLm1haW4sXG4gICAgICBtYXNrID0gX3JlZi5tYXNrLFxuICAgICAgYXR0cmlidXRlcyA9IF9yZWYuYXR0cmlidXRlcyxcbiAgICAgIHN0eWxlcyA9IF9yZWYuc3R5bGVzLFxuICAgICAgdHJhbnNmb3JtID0gX3JlZi50cmFuc2Zvcm07XG5cbiAgaWYgKHRyYW5zZm9ybUlzTWVhbmluZ2Z1bCh0cmFuc2Zvcm0pICYmIG1haW4uZm91bmQgJiYgIW1hc2suZm91bmQpIHtcbiAgICB2YXIgd2lkdGggPSBtYWluLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSBtYWluLmhlaWdodDtcbiAgICB2YXIgb2Zmc2V0ID0ge1xuICAgICAgeDogd2lkdGggLyBoZWlnaHQgLyAyLFxuICAgICAgeTogMC41XG4gICAgfTtcbiAgICBhdHRyaWJ1dGVzWydzdHlsZSddID0gam9pblN0eWxlcyhfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgc3R5bGVzKSwge30sIHtcbiAgICAgICd0cmFuc2Zvcm0tb3JpZ2luJzogXCJcIi5jb25jYXQob2Zmc2V0LnggKyB0cmFuc2Zvcm0ueCAvIDE2LCBcImVtIFwiKS5jb25jYXQob2Zmc2V0LnkgKyB0cmFuc2Zvcm0ueSAvIDE2LCBcImVtXCIpXG4gICAgfSkpO1xuICB9XG5cbiAgcmV0dXJuIFt7XG4gICAgdGFnOiAnc3ZnJyxcbiAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9XTtcbn1cblxuZnVuY3Rpb24gYXNTeW1ib2wgKF9yZWYpIHtcbiAgdmFyIHByZWZpeCA9IF9yZWYucHJlZml4LFxuICAgICAgaWNvbk5hbWUgPSBfcmVmLmljb25OYW1lLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgYXR0cmlidXRlcyA9IF9yZWYuYXR0cmlidXRlcyxcbiAgICAgIHN5bWJvbCA9IF9yZWYuc3ltYm9sO1xuICB2YXIgaWQgPSBzeW1ib2wgPT09IHRydWUgPyBcIlwiLmNvbmNhdChwcmVmaXgsIFwiLVwiKS5jb25jYXQoY29uZmlnLmNzc1ByZWZpeCwgXCItXCIpLmNvbmNhdChpY29uTmFtZSkgOiBzeW1ib2w7XG4gIHJldHVybiBbe1xuICAgIHRhZzogJ3N2ZycsXG4gICAgYXR0cmlidXRlczoge1xuICAgICAgc3R5bGU6ICdkaXNwbGF5OiBub25lOydcbiAgICB9LFxuICAgIGNoaWxkcmVuOiBbe1xuICAgICAgdGFnOiAnc3ltYm9sJyxcbiAgICAgIGF0dHJpYnV0ZXM6IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBhdHRyaWJ1dGVzKSwge30sIHtcbiAgICAgICAgaWQ6IGlkXG4gICAgICB9KSxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH1dXG4gIH1dO1xufVxuXG5mdW5jdGlvbiBtYWtlSW5saW5lU3ZnQWJzdHJhY3QocGFyYW1zKSB7XG4gIHZhciBfcGFyYW1zJGljb25zID0gcGFyYW1zLmljb25zLFxuICAgICAgbWFpbiA9IF9wYXJhbXMkaWNvbnMubWFpbixcbiAgICAgIG1hc2sgPSBfcGFyYW1zJGljb25zLm1hc2ssXG4gICAgICBwcmVmaXggPSBwYXJhbXMucHJlZml4LFxuICAgICAgaWNvbk5hbWUgPSBwYXJhbXMuaWNvbk5hbWUsXG4gICAgICB0cmFuc2Zvcm0gPSBwYXJhbXMudHJhbnNmb3JtLFxuICAgICAgc3ltYm9sID0gcGFyYW1zLnN5bWJvbCxcbiAgICAgIHRpdGxlID0gcGFyYW1zLnRpdGxlLFxuICAgICAgbWFza0lkID0gcGFyYW1zLm1hc2tJZCxcbiAgICAgIHRpdGxlSWQgPSBwYXJhbXMudGl0bGVJZCxcbiAgICAgIGV4dHJhID0gcGFyYW1zLmV4dHJhLFxuICAgICAgX3BhcmFtcyR3YXRjaGFibGUgPSBwYXJhbXMud2F0Y2hhYmxlLFxuICAgICAgd2F0Y2hhYmxlID0gX3BhcmFtcyR3YXRjaGFibGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3BhcmFtcyR3YXRjaGFibGU7XG5cbiAgdmFyIF9yZWYgPSBtYXNrLmZvdW5kID8gbWFzayA6IG1haW4sXG4gICAgICB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodDtcblxuICB2YXIgaXNVcGxvYWRlZEljb24gPSBwcmVmaXggPT09ICdmYWsnO1xuICB2YXIgYXR0ckNsYXNzID0gW2NvbmZpZy5yZXBsYWNlbWVudENsYXNzLCBpY29uTmFtZSA/IFwiXCIuY29uY2F0KGNvbmZpZy5jc3NQcmVmaXgsIFwiLVwiKS5jb25jYXQoaWNvbk5hbWUpIDogJyddLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBleHRyYS5jbGFzc2VzLmluZGV4T2YoYykgPT09IC0xO1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYyAhPT0gJycgfHwgISFjO1xuICB9KS5jb25jYXQoZXh0cmEuY2xhc3Nlcykuam9pbignICcpO1xuICB2YXIgY29udGVudCA9IHtcbiAgICBjaGlsZHJlbjogW10sXG4gICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGV4dHJhLmF0dHJpYnV0ZXMpLCB7fSwge1xuICAgICAgJ2RhdGEtcHJlZml4JzogcHJlZml4LFxuICAgICAgJ2RhdGEtaWNvbic6IGljb25OYW1lLFxuICAgICAgJ2NsYXNzJzogYXR0ckNsYXNzLFxuICAgICAgJ3JvbGUnOiBleHRyYS5hdHRyaWJ1dGVzLnJvbGUgfHwgJ2ltZycsXG4gICAgICAneG1sbnMnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICAgICAgJ3ZpZXdCb3gnOiBcIjAgMCBcIi5jb25jYXQod2lkdGgsIFwiIFwiKS5jb25jYXQoaGVpZ2h0KVxuICAgIH0pXG4gIH07XG4gIHZhciB1cGxvYWRlZEljb25XaWR0aFN0eWxlID0gaXNVcGxvYWRlZEljb24gJiYgIX5leHRyYS5jbGFzc2VzLmluZGV4T2YoJ2ZhLWZ3JykgPyB7XG4gICAgd2lkdGg6IFwiXCIuY29uY2F0KHdpZHRoIC8gaGVpZ2h0ICogMTYgKiAwLjA2MjUsIFwiZW1cIilcbiAgfSA6IHt9O1xuXG4gIGlmICh3YXRjaGFibGUpIHtcbiAgICBjb250ZW50LmF0dHJpYnV0ZXNbREFUQV9GQV9JMlNWR10gPSAnJztcbiAgfVxuXG4gIGlmICh0aXRsZSkge1xuICAgIGNvbnRlbnQuY2hpbGRyZW4ucHVzaCh7XG4gICAgICB0YWc6ICd0aXRsZScsXG4gICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgIGlkOiBjb250ZW50LmF0dHJpYnV0ZXNbJ2FyaWEtbGFiZWxsZWRieSddIHx8IFwidGl0bGUtXCIuY29uY2F0KHRpdGxlSWQgfHwgbmV4dFVuaXF1ZUlkKCkpXG4gICAgICB9LFxuICAgICAgY2hpbGRyZW46IFt0aXRsZV1cbiAgICB9KTtcbiAgICBkZWxldGUgY29udGVudC5hdHRyaWJ1dGVzLnRpdGxlO1xuICB9XG5cbiAgdmFyIGFyZ3MgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgY29udGVudCksIHt9LCB7XG4gICAgcHJlZml4OiBwcmVmaXgsXG4gICAgaWNvbk5hbWU6IGljb25OYW1lLFxuICAgIG1haW46IG1haW4sXG4gICAgbWFzazogbWFzayxcbiAgICBtYXNrSWQ6IG1hc2tJZCxcbiAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICBzeW1ib2w6IHN5bWJvbCxcbiAgICBzdHlsZXM6IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCB1cGxvYWRlZEljb25XaWR0aFN0eWxlKSwgZXh0cmEuc3R5bGVzKVxuICB9KTtcblxuICB2YXIgX3JlZjIgPSBtYXNrLmZvdW5kICYmIG1haW4uZm91bmQgPyBjYWxsUHJvdmlkZWQoJ2dlbmVyYXRlQWJzdHJhY3RNYXNrJywgYXJncykgfHwge1xuICAgIGNoaWxkcmVuOiBbXSxcbiAgICBhdHRyaWJ1dGVzOiB7fVxuICB9IDogY2FsbFByb3ZpZGVkKCdnZW5lcmF0ZUFic3RyYWN0SWNvbicsIGFyZ3MpIHx8IHtcbiAgICBjaGlsZHJlbjogW10sXG4gICAgYXR0cmlidXRlczoge31cbiAgfSxcbiAgICAgIGNoaWxkcmVuID0gX3JlZjIuY2hpbGRyZW4sXG4gICAgICBhdHRyaWJ1dGVzID0gX3JlZjIuYXR0cmlidXRlcztcblxuICBhcmdzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIGFyZ3MuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG5cbiAgaWYgKHN5bWJvbCkge1xuICAgIHJldHVybiBhc1N5bWJvbChhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYXNJY29uKGFyZ3MpO1xuICB9XG59XG5mdW5jdGlvbiBtYWtlTGF5ZXJzVGV4dEFic3RyYWN0KHBhcmFtcykge1xuICB2YXIgY29udGVudCA9IHBhcmFtcy5jb250ZW50LFxuICAgICAgd2lkdGggPSBwYXJhbXMud2lkdGgsXG4gICAgICBoZWlnaHQgPSBwYXJhbXMuaGVpZ2h0LFxuICAgICAgdHJhbnNmb3JtID0gcGFyYW1zLnRyYW5zZm9ybSxcbiAgICAgIHRpdGxlID0gcGFyYW1zLnRpdGxlLFxuICAgICAgZXh0cmEgPSBwYXJhbXMuZXh0cmEsXG4gICAgICBfcGFyYW1zJHdhdGNoYWJsZTIgPSBwYXJhbXMud2F0Y2hhYmxlLFxuICAgICAgd2F0Y2hhYmxlID0gX3BhcmFtcyR3YXRjaGFibGUyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wYXJhbXMkd2F0Y2hhYmxlMjtcblxuICB2YXIgYXR0cmlidXRlcyA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBleHRyYS5hdHRyaWJ1dGVzKSwgdGl0bGUgPyB7XG4gICAgJ3RpdGxlJzogdGl0bGVcbiAgfSA6IHt9KSwge30sIHtcbiAgICAnY2xhc3MnOiBleHRyYS5jbGFzc2VzLmpvaW4oJyAnKVxuICB9KTtcblxuICBpZiAod2F0Y2hhYmxlKSB7XG4gICAgYXR0cmlidXRlc1tEQVRBX0ZBX0kyU1ZHXSA9ICcnO1xuICB9XG5cbiAgdmFyIHN0eWxlcyA9IF9vYmplY3RTcHJlYWQyKHt9LCBleHRyYS5zdHlsZXMpO1xuXG4gIGlmICh0cmFuc2Zvcm1Jc01lYW5pbmdmdWwodHJhbnNmb3JtKSkge1xuICAgIHN0eWxlc1sndHJhbnNmb3JtJ10gPSB0cmFuc2Zvcm1Gb3JDc3Moe1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICBzdGFydENlbnRlcmVkOiB0cnVlLFxuICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICB9KTtcbiAgICBzdHlsZXNbJy13ZWJraXQtdHJhbnNmb3JtJ10gPSBzdHlsZXNbJ3RyYW5zZm9ybSddO1xuICB9XG5cbiAgdmFyIHN0eWxlU3RyaW5nID0gam9pblN0eWxlcyhzdHlsZXMpO1xuXG4gIGlmIChzdHlsZVN0cmluZy5sZW5ndGggPiAwKSB7XG4gICAgYXR0cmlidXRlc1snc3R5bGUnXSA9IHN0eWxlU3RyaW5nO1xuICB9XG5cbiAgdmFyIHZhbCA9IFtdO1xuICB2YWwucHVzaCh7XG4gICAgdGFnOiAnc3BhbicsXG4gICAgYXR0cmlidXRlczogYXR0cmlidXRlcyxcbiAgICBjaGlsZHJlbjogW2NvbnRlbnRdXG4gIH0pO1xuXG4gIGlmICh0aXRsZSkge1xuICAgIHZhbC5wdXNoKHtcbiAgICAgIHRhZzogJ3NwYW4nLFxuICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICBjbGFzczogJ3NyLW9ubHknXG4gICAgICB9LFxuICAgICAgY2hpbGRyZW46IFt0aXRsZV1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59XG5mdW5jdGlvbiBtYWtlTGF5ZXJzQ291bnRlckFic3RyYWN0KHBhcmFtcykge1xuICB2YXIgY29udGVudCA9IHBhcmFtcy5jb250ZW50LFxuICAgICAgdGl0bGUgPSBwYXJhbXMudGl0bGUsXG4gICAgICBleHRyYSA9IHBhcmFtcy5leHRyYTtcblxuICB2YXIgYXR0cmlidXRlcyA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBleHRyYS5hdHRyaWJ1dGVzKSwgdGl0bGUgPyB7XG4gICAgJ3RpdGxlJzogdGl0bGVcbiAgfSA6IHt9KSwge30sIHtcbiAgICAnY2xhc3MnOiBleHRyYS5jbGFzc2VzLmpvaW4oJyAnKVxuICB9KTtcblxuICB2YXIgc3R5bGVTdHJpbmcgPSBqb2luU3R5bGVzKGV4dHJhLnN0eWxlcyk7XG5cbiAgaWYgKHN0eWxlU3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICBhdHRyaWJ1dGVzWydzdHlsZSddID0gc3R5bGVTdHJpbmc7XG4gIH1cblxuICB2YXIgdmFsID0gW107XG4gIHZhbC5wdXNoKHtcbiAgICB0YWc6ICdzcGFuJyxcbiAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLFxuICAgIGNoaWxkcmVuOiBbY29udGVudF1cbiAgfSk7XG5cbiAgaWYgKHRpdGxlKSB7XG4gICAgdmFsLnB1c2goe1xuICAgICAgdGFnOiAnc3BhbicsXG4gICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgIGNsYXNzOiAnc3Itb25seSdcbiAgICAgIH0sXG4gICAgICBjaGlsZHJlbjogW3RpdGxlXVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn1cblxudmFyIHN0eWxlcyQxID0gbmFtZXNwYWNlLnN0eWxlcztcbmZ1bmN0aW9uIGFzRm91bmRJY29uKGljb24pIHtcbiAgdmFyIHdpZHRoID0gaWNvblswXTtcbiAgdmFyIGhlaWdodCA9IGljb25bMV07XG5cbiAgdmFyIF9pY29uJHNsaWNlID0gaWNvbi5zbGljZSg0KSxcbiAgICAgIF9pY29uJHNsaWNlMiA9IF9zbGljZWRUb0FycmF5KF9pY29uJHNsaWNlLCAxKSxcbiAgICAgIHZlY3RvckRhdGEgPSBfaWNvbiRzbGljZTJbMF07XG5cbiAgdmFyIGVsZW1lbnQgPSBudWxsO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHZlY3RvckRhdGEpKSB7XG4gICAgZWxlbWVudCA9IHtcbiAgICAgIHRhZzogJ2cnLFxuICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICBjbGFzczogXCJcIi5jb25jYXQoY29uZmlnLmNzc1ByZWZpeCwgXCItXCIpLmNvbmNhdChEVU9UT05FX0NMQVNTRVMuR1JPVVApXG4gICAgICB9LFxuICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgIHRhZzogJ3BhdGgnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgY2xhc3M6IFwiXCIuY29uY2F0KGNvbmZpZy5jc3NQcmVmaXgsIFwiLVwiKS5jb25jYXQoRFVPVE9ORV9DTEFTU0VTLlNFQ09OREFSWSksXG4gICAgICAgICAgZmlsbDogJ2N1cnJlbnRDb2xvcicsXG4gICAgICAgICAgZDogdmVjdG9yRGF0YVswXVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIHRhZzogJ3BhdGgnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgY2xhc3M6IFwiXCIuY29uY2F0KGNvbmZpZy5jc3NQcmVmaXgsIFwiLVwiKS5jb25jYXQoRFVPVE9ORV9DTEFTU0VTLlBSSU1BUlkpLFxuICAgICAgICAgIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAgICAgICAgIGQ6IHZlY3RvckRhdGFbMV1cbiAgICAgICAgfVxuICAgICAgfV1cbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGVsZW1lbnQgPSB7XG4gICAgICB0YWc6ICdwYXRoJyxcbiAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgZmlsbDogJ2N1cnJlbnRDb2xvcicsXG4gICAgICAgIGQ6IHZlY3RvckRhdGFcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3VuZDogdHJ1ZSxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgaWNvbjogZWxlbWVudFxuICB9O1xufVxudmFyIG1pc3NpbmdJY29uUmVzb2x1dGlvbk1peGluID0ge1xuICBmb3VuZDogZmFsc2UsXG4gIHdpZHRoOiA1MTIsXG4gIGhlaWdodDogNTEyXG59O1xuXG5mdW5jdGlvbiBtYXliZU5vdGlmeU1pc3NpbmcoaWNvbk5hbWUsIHByZWZpeCkge1xuICBpZiAoIVBST0RVQ1RJT04gJiYgIWNvbmZpZy5zaG93TWlzc2luZ0ljb25zICYmIGljb25OYW1lKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkljb24gd2l0aCBuYW1lIFxcXCJcIi5jb25jYXQoaWNvbk5hbWUsIFwiXFxcIiBhbmQgcHJlZml4IFxcXCJcIikuY29uY2F0KHByZWZpeCwgXCJcXFwiIGlzIG1pc3NpbmcuXCIpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kSWNvbihpY29uTmFtZSwgcHJlZml4KSB7XG4gIHZhciBnaXZlblByZWZpeCA9IHByZWZpeDtcblxuICBpZiAocHJlZml4ID09PSAnZmEnICYmIGNvbmZpZy5zdHlsZURlZmF1bHQgIT09IG51bGwpIHtcbiAgICBwcmVmaXggPSBnZXREZWZhdWx0VXNhYmxlUHJlZml4KCk7XG4gIH1cblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciB2YWwgPSB7XG4gICAgICBmb3VuZDogZmFsc2UsXG4gICAgICB3aWR0aDogNTEyLFxuICAgICAgaGVpZ2h0OiA1MTIsXG4gICAgICBpY29uOiBjYWxsUHJvdmlkZWQoJ21pc3NpbmdJY29uQWJzdHJhY3QnKSB8fCB7fVxuICAgIH07XG5cbiAgICBpZiAoZ2l2ZW5QcmVmaXggPT09ICdmYScpIHtcbiAgICAgIHZhciBzaGltID0gYnlPbGROYW1lKGljb25OYW1lKSB8fCB7fTtcbiAgICAgIGljb25OYW1lID0gc2hpbS5pY29uTmFtZSB8fCBpY29uTmFtZTtcbiAgICAgIHByZWZpeCA9IHNoaW0ucHJlZml4IHx8IHByZWZpeDtcbiAgICB9XG5cbiAgICBpZiAoaWNvbk5hbWUgJiYgcHJlZml4ICYmIHN0eWxlcyQxW3ByZWZpeF0gJiYgc3R5bGVzJDFbcHJlZml4XVtpY29uTmFtZV0pIHtcbiAgICAgIHZhciBpY29uID0gc3R5bGVzJDFbcHJlZml4XVtpY29uTmFtZV07XG4gICAgICByZXR1cm4gcmVzb2x2ZShhc0ZvdW5kSWNvbihpY29uKSk7XG4gICAgfVxuXG4gICAgbWF5YmVOb3RpZnlNaXNzaW5nKGljb25OYW1lLCBwcmVmaXgpO1xuICAgIHJlc29sdmUoX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIG1pc3NpbmdJY29uUmVzb2x1dGlvbk1peGluKSwge30sIHtcbiAgICAgIGljb246IGNvbmZpZy5zaG93TWlzc2luZ0ljb25zICYmIGljb25OYW1lID8gY2FsbFByb3ZpZGVkKCdtaXNzaW5nSWNvbkFic3RyYWN0JykgfHwge30gOiB7fVxuICAgIH0pKTtcbiAgfSk7XG59XG5cbnZhciBub29wJDEgPSBmdW5jdGlvbiBub29wKCkge307XG5cbnZhciBwID0gY29uZmlnLm1lYXN1cmVQZXJmb3JtYW5jZSAmJiBQRVJGT1JNQU5DRSAmJiBQRVJGT1JNQU5DRS5tYXJrICYmIFBFUkZPUk1BTkNFLm1lYXN1cmUgPyBQRVJGT1JNQU5DRSA6IHtcbiAgbWFyazogbm9vcCQxLFxuICBtZWFzdXJlOiBub29wJDFcbn07XG52YXIgcHJlYW1ibGUgPSBcIkZBIFxcXCI2LjQuMlxcXCJcIjtcblxudmFyIGJlZ2luID0gZnVuY3Rpb24gYmVnaW4obmFtZSkge1xuICBwLm1hcmsoXCJcIi5jb25jYXQocHJlYW1ibGUsIFwiIFwiKS5jb25jYXQobmFtZSwgXCIgYmVnaW5zXCIpKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZW5kKG5hbWUpO1xuICB9O1xufTtcblxudmFyIGVuZCA9IGZ1bmN0aW9uIGVuZChuYW1lKSB7XG4gIHAubWFyayhcIlwiLmNvbmNhdChwcmVhbWJsZSwgXCIgXCIpLmNvbmNhdChuYW1lLCBcIiBlbmRzXCIpKTtcbiAgcC5tZWFzdXJlKFwiXCIuY29uY2F0KHByZWFtYmxlLCBcIiBcIikuY29uY2F0KG5hbWUpLCBcIlwiLmNvbmNhdChwcmVhbWJsZSwgXCIgXCIpLmNvbmNhdChuYW1lLCBcIiBiZWdpbnNcIiksIFwiXCIuY29uY2F0KHByZWFtYmxlLCBcIiBcIikuY29uY2F0KG5hbWUsIFwiIGVuZHNcIikpO1xufTtcblxudmFyIHBlcmYgPSB7XG4gIGJlZ2luOiBiZWdpbixcbiAgZW5kOiBlbmRcbn07XG5cbnZhciBub29wJDIgPSBmdW5jdGlvbiBub29wKCkge307XG5cbmZ1bmN0aW9uIGlzV2F0Y2hlZChub2RlKSB7XG4gIHZhciBpMnN2ZyA9IG5vZGUuZ2V0QXR0cmlidXRlID8gbm9kZS5nZXRBdHRyaWJ1dGUoREFUQV9GQV9JMlNWRykgOiBudWxsO1xuICByZXR1cm4gdHlwZW9mIGkyc3ZnID09PSAnc3RyaW5nJztcbn1cblxuZnVuY3Rpb24gaGFzUHJlZml4QW5kSWNvbihub2RlKSB7XG4gIHZhciBwcmVmaXggPSBub2RlLmdldEF0dHJpYnV0ZSA/IG5vZGUuZ2V0QXR0cmlidXRlKERBVEFfUFJFRklYKSA6IG51bGw7XG4gIHZhciBpY29uID0gbm9kZS5nZXRBdHRyaWJ1dGUgPyBub2RlLmdldEF0dHJpYnV0ZShEQVRBX0lDT04pIDogbnVsbDtcbiAgcmV0dXJuIHByZWZpeCAmJiBpY29uO1xufVxuXG5mdW5jdGlvbiBoYXNCZWVuUmVwbGFjZWQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLmNsYXNzTGlzdCAmJiBub2RlLmNsYXNzTGlzdC5jb250YWlucyAmJiBub2RlLmNsYXNzTGlzdC5jb250YWlucyhjb25maWcucmVwbGFjZW1lbnRDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIGdldE11dGF0b3IoKSB7XG4gIGlmIChjb25maWcuYXV0b1JlcGxhY2VTdmcgPT09IHRydWUpIHtcbiAgICByZXR1cm4gbXV0YXRvcnMucmVwbGFjZTtcbiAgfVxuXG4gIHZhciBtdXRhdG9yID0gbXV0YXRvcnNbY29uZmlnLmF1dG9SZXBsYWNlU3ZnXTtcbiAgcmV0dXJuIG11dGF0b3IgfHwgbXV0YXRvcnMucmVwbGFjZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TKHRhZykge1xuICByZXR1cm4gRE9DVU1FTlQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIHRhZyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnKSB7XG4gIHJldHVybiBET0NVTUVOVC5jcmVhdGVFbGVtZW50KHRhZyk7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRTVkcoYWJzdHJhY3RPYmopIHtcbiAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBfcGFyYW1zJGNlRm4gPSBwYXJhbXMuY2VGbixcbiAgICAgIGNlRm4gPSBfcGFyYW1zJGNlRm4gPT09IHZvaWQgMCA/IGFic3RyYWN0T2JqLnRhZyA9PT0gJ3N2ZycgPyBjcmVhdGVFbGVtZW50TlMgOiBjcmVhdGVFbGVtZW50IDogX3BhcmFtcyRjZUZuO1xuXG4gIGlmICh0eXBlb2YgYWJzdHJhY3RPYmogPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIERPQ1VNRU5ULmNyZWF0ZVRleHROb2RlKGFic3RyYWN0T2JqKTtcbiAgfVxuXG4gIHZhciB0YWcgPSBjZUZuKGFic3RyYWN0T2JqLnRhZyk7XG4gIE9iamVjdC5rZXlzKGFic3RyYWN0T2JqLmF0dHJpYnV0ZXMgfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHRhZy5zZXRBdHRyaWJ1dGUoa2V5LCBhYnN0cmFjdE9iai5hdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcbiAgdmFyIGNoaWxkcmVuID0gYWJzdHJhY3RPYmouY2hpbGRyZW4gfHwgW107XG4gIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgdGFnLmFwcGVuZENoaWxkKGNvbnZlcnRTVkcoY2hpbGQsIHtcbiAgICAgIGNlRm46IGNlRm5cbiAgICB9KSk7XG4gIH0pO1xuICByZXR1cm4gdGFnO1xufVxuXG5mdW5jdGlvbiBub2RlQXNDb21tZW50KG5vZGUpIHtcbiAgdmFyIGNvbW1lbnQgPSBcIiBcIi5jb25jYXQobm9kZS5vdXRlckhUTUwsIFwiIFwiKTtcbiAgLyogQkVHSU4uQVRUUklCVVRJT04gKi9cblxuICBjb21tZW50ID0gXCJcIi5jb25jYXQoY29tbWVudCwgXCJGb250IEF3ZXNvbWUgZm9udGF3ZXNvbWUuY29tIFwiKTtcbiAgLyogRU5ELkFUVFJJQlVUSU9OICovXG5cbiAgcmV0dXJuIGNvbW1lbnQ7XG59XG5cbnZhciBtdXRhdG9ycyA9IHtcbiAgcmVwbGFjZTogZnVuY3Rpb24gcmVwbGFjZShtdXRhdGlvbikge1xuICAgIHZhciBub2RlID0gbXV0YXRpb25bMF07XG5cbiAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICBtdXRhdGlvblsxXS5mb3JFYWNoKGZ1bmN0aW9uIChfYWJzdHJhY3QpIHtcbiAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjb252ZXJ0U1ZHKF9hYnN0cmFjdCksIG5vZGUpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChub2RlLmdldEF0dHJpYnV0ZShEQVRBX0ZBX0kyU1ZHKSA9PT0gbnVsbCAmJiBjb25maWcua2VlcE9yaWdpbmFsU291cmNlKSB7XG4gICAgICAgIHZhciBjb21tZW50ID0gRE9DVU1FTlQuY3JlYXRlQ29tbWVudChub2RlQXNDb21tZW50KG5vZGUpKTtcbiAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChjb21tZW50LCBub2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBuZXN0OiBmdW5jdGlvbiBuZXN0KG11dGF0aW9uKSB7XG4gICAgdmFyIG5vZGUgPSBtdXRhdGlvblswXTtcbiAgICB2YXIgX2Fic3RyYWN0MiA9IG11dGF0aW9uWzFdOyAvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgYSByZXBsYWNlZCBub2RlIHdlIGRvIG5vdCB3YW50IHRvIGNvbnRpbnVlIG5lc3Rpbmcgd2l0aGluIGl0LlxuICAgIC8vIFNob3J0LWNpcmN1aXQgdG8gdGhlIHN0YW5kYXJkIHJlcGxhY2VtZW50XG5cbiAgICBpZiAofmNsYXNzQXJyYXkobm9kZSkuaW5kZXhPZihjb25maWcucmVwbGFjZW1lbnRDbGFzcykpIHtcbiAgICAgIHJldHVybiBtdXRhdG9ycy5yZXBsYWNlKG11dGF0aW9uKTtcbiAgICB9XG5cbiAgICB2YXIgZm9yU3ZnID0gbmV3IFJlZ0V4cChcIlwiLmNvbmNhdChjb25maWcuY3NzUHJlZml4LCBcIi0uKlwiKSk7XG4gICAgZGVsZXRlIF9hYnN0cmFjdDJbMF0uYXR0cmlidXRlcy5pZDtcblxuICAgIGlmIChfYWJzdHJhY3QyWzBdLmF0dHJpYnV0ZXMuY2xhc3MpIHtcbiAgICAgIHZhciBzcGxpdENsYXNzZXMgPSBfYWJzdHJhY3QyWzBdLmF0dHJpYnV0ZXMuY2xhc3Muc3BsaXQoJyAnKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY2xzKSB7XG4gICAgICAgIGlmIChjbHMgPT09IGNvbmZpZy5yZXBsYWNlbWVudENsYXNzIHx8IGNscy5tYXRjaChmb3JTdmcpKSB7XG4gICAgICAgICAgYWNjLnRvU3ZnLnB1c2goY2xzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhY2MudG9Ob2RlLnB1c2goY2xzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7XG4gICAgICAgIHRvTm9kZTogW10sXG4gICAgICAgIHRvU3ZnOiBbXVxuICAgICAgfSk7XG5cbiAgICAgIF9hYnN0cmFjdDJbMF0uYXR0cmlidXRlcy5jbGFzcyA9IHNwbGl0Q2xhc3Nlcy50b1N2Zy5qb2luKCcgJyk7XG5cbiAgICAgIGlmIChzcGxpdENsYXNzZXMudG9Ob2RlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdjbGFzcycsIHNwbGl0Q2xhc3Nlcy50b05vZGUuam9pbignICcpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbmV3SW5uZXJIVE1MID0gX2Fic3RyYWN0Mi5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiB0b0h0bWwoYSk7XG4gICAgfSkuam9pbignXFxuJyk7XG5cbiAgICBub2RlLnNldEF0dHJpYnV0ZShEQVRBX0ZBX0kyU1ZHLCAnJyk7XG4gICAgbm9kZS5pbm5lckhUTUwgPSBuZXdJbm5lckhUTUw7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHBlcmZvcm1PcGVyYXRpb25TeW5jKG9wKSB7XG4gIG9wKCk7XG59XG5cbmZ1bmN0aW9uIHBlcmZvcm0obXV0YXRpb25zLCBjYWxsYmFjaykge1xuICB2YXIgY2FsbGJhY2tGdW5jdGlvbiA9IHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGxiYWNrIDogbm9vcCQyO1xuXG4gIGlmIChtdXRhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgY2FsbGJhY2tGdW5jdGlvbigpO1xuICB9IGVsc2Uge1xuICAgIHZhciBmcmFtZSA9IHBlcmZvcm1PcGVyYXRpb25TeW5jO1xuXG4gICAgaWYgKGNvbmZpZy5tdXRhdGVBcHByb2FjaCA9PT0gTVVUQVRJT05fQVBQUk9BQ0hfQVNZTkMpIHtcbiAgICAgIGZyYW1lID0gV0lORE9XLnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBwZXJmb3JtT3BlcmF0aW9uU3luYztcbiAgICB9XG5cbiAgICBmcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbXV0YXRvciA9IGdldE11dGF0b3IoKTtcbiAgICAgIHZhciBtYXJrID0gcGVyZi5iZWdpbignbXV0YXRlJyk7XG4gICAgICBtdXRhdGlvbnMubWFwKG11dGF0b3IpO1xuICAgICAgbWFyaygpO1xuICAgICAgY2FsbGJhY2tGdW5jdGlvbigpO1xuICAgIH0pO1xuICB9XG59XG52YXIgZGlzYWJsZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIGRpc2FibGVPYnNlcnZhdGlvbigpIHtcbiAgZGlzYWJsZWQgPSB0cnVlO1xufVxuZnVuY3Rpb24gZW5hYmxlT2JzZXJ2YXRpb24oKSB7XG4gIGRpc2FibGVkID0gZmFsc2U7XG59XG52YXIgbW8gPSBudWxsO1xuZnVuY3Rpb24gb2JzZXJ2ZShvcHRpb25zKSB7XG4gIGlmICghTVVUQVRJT05fT0JTRVJWRVIpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWNvbmZpZy5vYnNlcnZlTXV0YXRpb25zKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIF9vcHRpb25zJHRyZWVDYWxsYmFjayA9IG9wdGlvbnMudHJlZUNhbGxiYWNrLFxuICAgICAgdHJlZUNhbGxiYWNrID0gX29wdGlvbnMkdHJlZUNhbGxiYWNrID09PSB2b2lkIDAgPyBub29wJDIgOiBfb3B0aW9ucyR0cmVlQ2FsbGJhY2ssXG4gICAgICBfb3B0aW9ucyRub2RlQ2FsbGJhY2sgPSBvcHRpb25zLm5vZGVDYWxsYmFjayxcbiAgICAgIG5vZGVDYWxsYmFjayA9IF9vcHRpb25zJG5vZGVDYWxsYmFjayA9PT0gdm9pZCAwID8gbm9vcCQyIDogX29wdGlvbnMkbm9kZUNhbGxiYWNrLFxuICAgICAgX29wdGlvbnMkcHNldWRvRWxlbWVuID0gb3B0aW9ucy5wc2V1ZG9FbGVtZW50c0NhbGxiYWNrLFxuICAgICAgcHNldWRvRWxlbWVudHNDYWxsYmFjayA9IF9vcHRpb25zJHBzZXVkb0VsZW1lbiA9PT0gdm9pZCAwID8gbm9vcCQyIDogX29wdGlvbnMkcHNldWRvRWxlbWVuLFxuICAgICAgX29wdGlvbnMkb2JzZXJ2ZU11dGF0ID0gb3B0aW9ucy5vYnNlcnZlTXV0YXRpb25zUm9vdCxcbiAgICAgIG9ic2VydmVNdXRhdGlvbnNSb290ID0gX29wdGlvbnMkb2JzZXJ2ZU11dGF0ID09PSB2b2lkIDAgPyBET0NVTUVOVCA6IF9vcHRpb25zJG9ic2VydmVNdXRhdDtcbiAgbW8gPSBuZXcgTVVUQVRJT05fT0JTRVJWRVIoZnVuY3Rpb24gKG9iamVjdHMpIHtcbiAgICBpZiAoZGlzYWJsZWQpIHJldHVybjtcbiAgICB2YXIgZGVmYXVsdFByZWZpeCA9IGdldERlZmF1bHRVc2FibGVQcmVmaXgoKTtcbiAgICB0b0FycmF5KG9iamVjdHMpLmZvckVhY2goZnVuY3Rpb24gKG11dGF0aW9uUmVjb3JkKSB7XG4gICAgICBpZiAobXV0YXRpb25SZWNvcmQudHlwZSA9PT0gJ2NoaWxkTGlzdCcgJiYgbXV0YXRpb25SZWNvcmQuYWRkZWROb2Rlcy5sZW5ndGggPiAwICYmICFpc1dhdGNoZWQobXV0YXRpb25SZWNvcmQuYWRkZWROb2Rlc1swXSkpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5zZWFyY2hQc2V1ZG9FbGVtZW50cykge1xuICAgICAgICAgIHBzZXVkb0VsZW1lbnRzQ2FsbGJhY2sobXV0YXRpb25SZWNvcmQudGFyZ2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyZWVDYWxsYmFjayhtdXRhdGlvblJlY29yZC50YXJnZXQpO1xuICAgICAgfVxuXG4gICAgICBpZiAobXV0YXRpb25SZWNvcmQudHlwZSA9PT0gJ2F0dHJpYnV0ZXMnICYmIG11dGF0aW9uUmVjb3JkLnRhcmdldC5wYXJlbnROb2RlICYmIGNvbmZpZy5zZWFyY2hQc2V1ZG9FbGVtZW50cykge1xuICAgICAgICBwc2V1ZG9FbGVtZW50c0NhbGxiYWNrKG11dGF0aW9uUmVjb3JkLnRhcmdldC5wYXJlbnROb2RlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG11dGF0aW9uUmVjb3JkLnR5cGUgPT09ICdhdHRyaWJ1dGVzJyAmJiBpc1dhdGNoZWQobXV0YXRpb25SZWNvcmQudGFyZ2V0KSAmJiB+QVRUUklCVVRFU19XQVRDSEVEX0ZPUl9NVVRBVElPTi5pbmRleE9mKG11dGF0aW9uUmVjb3JkLmF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICAgIGlmIChtdXRhdGlvblJlY29yZC5hdHRyaWJ1dGVOYW1lID09PSAnY2xhc3MnICYmIGhhc1ByZWZpeEFuZEljb24obXV0YXRpb25SZWNvcmQudGFyZ2V0KSkge1xuICAgICAgICAgIHZhciBfZ2V0Q2Fub25pY2FsSWNvbiA9IGdldENhbm9uaWNhbEljb24oY2xhc3NBcnJheShtdXRhdGlvblJlY29yZC50YXJnZXQpKSxcbiAgICAgICAgICAgICAgcHJlZml4ID0gX2dldENhbm9uaWNhbEljb24ucHJlZml4LFxuICAgICAgICAgICAgICBpY29uTmFtZSA9IF9nZXRDYW5vbmljYWxJY29uLmljb25OYW1lO1xuXG4gICAgICAgICAgbXV0YXRpb25SZWNvcmQudGFyZ2V0LnNldEF0dHJpYnV0ZShEQVRBX1BSRUZJWCwgcHJlZml4IHx8IGRlZmF1bHRQcmVmaXgpO1xuICAgICAgICAgIGlmIChpY29uTmFtZSkgbXV0YXRpb25SZWNvcmQudGFyZ2V0LnNldEF0dHJpYnV0ZShEQVRBX0lDT04sIGljb25OYW1lKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYXNCZWVuUmVwbGFjZWQobXV0YXRpb25SZWNvcmQudGFyZ2V0KSkge1xuICAgICAgICAgIG5vZGVDYWxsYmFjayhtdXRhdGlvblJlY29yZC50YXJnZXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICBpZiAoIUlTX0RPTSkgcmV0dXJuO1xuICBtby5vYnNlcnZlKG9ic2VydmVNdXRhdGlvbnNSb290LCB7XG4gICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcbiAgICBzdWJ0cmVlOiB0cnVlXG4gIH0pO1xufVxuZnVuY3Rpb24gZGlzY29ubmVjdCgpIHtcbiAgaWYgKCFtbykgcmV0dXJuO1xuICBtby5kaXNjb25uZWN0KCk7XG59XG5cbmZ1bmN0aW9uIHN0eWxlUGFyc2VyIChub2RlKSB7XG4gIHZhciBzdHlsZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdzdHlsZScpO1xuICB2YXIgdmFsID0gW107XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgdmFsID0gc3R5bGUuc3BsaXQoJzsnKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc3R5bGUpIHtcbiAgICAgIHZhciBzdHlsZXMgPSBzdHlsZS5zcGxpdCgnOicpO1xuICAgICAgdmFyIHByb3AgPSBzdHlsZXNbMF07XG4gICAgICB2YXIgdmFsdWUgPSBzdHlsZXMuc2xpY2UoMSk7XG5cbiAgICAgIGlmIChwcm9wICYmIHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYWNjW3Byb3BdID0gdmFsdWUuam9pbignOicpLnRyaW0oKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBjbGFzc1BhcnNlciAobm9kZSkge1xuICB2YXIgZXhpc3RpbmdQcmVmaXggPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1wcmVmaXgnKTtcbiAgdmFyIGV4aXN0aW5nSWNvbk5hbWUgPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1pY29uJyk7XG4gIHZhciBpbm5lclRleHQgPSBub2RlLmlubmVyVGV4dCAhPT0gdW5kZWZpbmVkID8gbm9kZS5pbm5lclRleHQudHJpbSgpIDogJyc7XG4gIHZhciB2YWwgPSBnZXRDYW5vbmljYWxJY29uKGNsYXNzQXJyYXkobm9kZSkpO1xuXG4gIGlmICghdmFsLnByZWZpeCkge1xuICAgIHZhbC5wcmVmaXggPSBnZXREZWZhdWx0VXNhYmxlUHJlZml4KCk7XG4gIH1cblxuICBpZiAoZXhpc3RpbmdQcmVmaXggJiYgZXhpc3RpbmdJY29uTmFtZSkge1xuICAgIHZhbC5wcmVmaXggPSBleGlzdGluZ1ByZWZpeDtcbiAgICB2YWwuaWNvbk5hbWUgPSBleGlzdGluZ0ljb25OYW1lO1xuICB9XG5cbiAgaWYgKHZhbC5pY29uTmFtZSAmJiB2YWwucHJlZml4KSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIGlmICh2YWwucHJlZml4ICYmIGlubmVyVGV4dC5sZW5ndGggPiAwKSB7XG4gICAgdmFsLmljb25OYW1lID0gYnlMaWdhdHVyZSh2YWwucHJlZml4LCBub2RlLmlubmVyVGV4dCkgfHwgYnlVbmljb2RlKHZhbC5wcmVmaXgsIHRvSGV4KG5vZGUuaW5uZXJUZXh0KSk7XG4gIH1cblxuICBpZiAoIXZhbC5pY29uTmFtZSAmJiBjb25maWcuYXV0b0ZldGNoU3ZnICYmIG5vZGUuZmlyc3RDaGlsZCAmJiBub2RlLmZpcnN0Q2hpbGQubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgdmFsLmljb25OYW1lID0gbm9kZS5maXJzdENoaWxkLmRhdGE7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBhdHRyaWJ1dGVzUGFyc2VyIChub2RlKSB7XG4gIHZhciBleHRyYUF0dHJpYnV0ZXMgPSB0b0FycmF5KG5vZGUuYXR0cmlidXRlcykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGF0dHIpIHtcbiAgICBpZiAoYWNjLm5hbWUgIT09ICdjbGFzcycgJiYgYWNjLm5hbWUgIT09ICdzdHlsZScpIHtcbiAgICAgIGFjY1thdHRyLm5hbWVdID0gYXR0ci52YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHZhciB0aXRsZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCd0aXRsZScpO1xuICB2YXIgdGl0bGVJZCA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWZhLXRpdGxlLWlkJyk7XG5cbiAgaWYgKGNvbmZpZy5hdXRvQTExeSkge1xuICAgIGlmICh0aXRsZSkge1xuICAgICAgZXh0cmFBdHRyaWJ1dGVzWydhcmlhLWxhYmVsbGVkYnknXSA9IFwiXCIuY29uY2F0KGNvbmZpZy5yZXBsYWNlbWVudENsYXNzLCBcIi10aXRsZS1cIikuY29uY2F0KHRpdGxlSWQgfHwgbmV4dFVuaXF1ZUlkKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHRyYUF0dHJpYnV0ZXNbJ2FyaWEtaGlkZGVuJ10gPSAndHJ1ZSc7XG4gICAgICBleHRyYUF0dHJpYnV0ZXNbJ2ZvY3VzYWJsZSddID0gJ2ZhbHNlJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXh0cmFBdHRyaWJ1dGVzO1xufVxuXG5mdW5jdGlvbiBibGFua01ldGEoKSB7XG4gIHJldHVybiB7XG4gICAgaWNvbk5hbWU6IG51bGwsXG4gICAgdGl0bGU6IG51bGwsXG4gICAgdGl0bGVJZDogbnVsbCxcbiAgICBwcmVmaXg6IG51bGwsXG4gICAgdHJhbnNmb3JtOiBtZWFuaW5nbGVzc1RyYW5zZm9ybSxcbiAgICBzeW1ib2w6IGZhbHNlLFxuICAgIG1hc2s6IHtcbiAgICAgIGljb25OYW1lOiBudWxsLFxuICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgcmVzdDogW11cbiAgICB9LFxuICAgIG1hc2tJZDogbnVsbCxcbiAgICBleHRyYToge1xuICAgICAgY2xhc3NlczogW10sXG4gICAgICBzdHlsZXM6IHt9LFxuICAgICAgYXR0cmlidXRlczoge31cbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBwYXJzZU1ldGEobm9kZSkge1xuICB2YXIgcGFyc2VyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7XG4gICAgc3R5bGVQYXJzZXI6IHRydWVcbiAgfTtcblxuICB2YXIgX2NsYXNzUGFyc2VyID0gY2xhc3NQYXJzZXIobm9kZSksXG4gICAgICBpY29uTmFtZSA9IF9jbGFzc1BhcnNlci5pY29uTmFtZSxcbiAgICAgIHByZWZpeCA9IF9jbGFzc1BhcnNlci5wcmVmaXgsXG4gICAgICBleHRyYUNsYXNzZXMgPSBfY2xhc3NQYXJzZXIucmVzdDtcblxuICB2YXIgZXh0cmFBdHRyaWJ1dGVzID0gYXR0cmlidXRlc1BhcnNlcihub2RlKTtcbiAgdmFyIHBsdWdpbk1ldGEgPSBjaGFpbkhvb2tzKCdwYXJzZU5vZGVBdHRyaWJ1dGVzJywge30sIG5vZGUpO1xuICB2YXIgZXh0cmFTdHlsZXMgPSBwYXJzZXIuc3R5bGVQYXJzZXIgPyBzdHlsZVBhcnNlcihub2RlKSA6IFtdO1xuICByZXR1cm4gX29iamVjdFNwcmVhZDIoe1xuICAgIGljb25OYW1lOiBpY29uTmFtZSxcbiAgICB0aXRsZTogbm9kZS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyksXG4gICAgdGl0bGVJZDogbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmEtdGl0bGUtaWQnKSxcbiAgICBwcmVmaXg6IHByZWZpeCxcbiAgICB0cmFuc2Zvcm06IG1lYW5pbmdsZXNzVHJhbnNmb3JtLFxuICAgIG1hc2s6IHtcbiAgICAgIGljb25OYW1lOiBudWxsLFxuICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgcmVzdDogW11cbiAgICB9LFxuICAgIG1hc2tJZDogbnVsbCxcbiAgICBzeW1ib2w6IGZhbHNlLFxuICAgIGV4dHJhOiB7XG4gICAgICBjbGFzc2VzOiBleHRyYUNsYXNzZXMsXG4gICAgICBzdHlsZXM6IGV4dHJhU3R5bGVzLFxuICAgICAgYXR0cmlidXRlczogZXh0cmFBdHRyaWJ1dGVzXG4gICAgfVxuICB9LCBwbHVnaW5NZXRhKTtcbn1cblxudmFyIHN0eWxlcyQyID0gbmFtZXNwYWNlLnN0eWxlcztcblxuZnVuY3Rpb24gZ2VuZXJhdGVNdXRhdGlvbihub2RlKSB7XG4gIHZhciBub2RlTWV0YSA9IGNvbmZpZy5hdXRvUmVwbGFjZVN2ZyA9PT0gJ25lc3QnID8gcGFyc2VNZXRhKG5vZGUsIHtcbiAgICBzdHlsZVBhcnNlcjogZmFsc2VcbiAgfSkgOiBwYXJzZU1ldGEobm9kZSk7XG5cbiAgaWYgKH5ub2RlTWV0YS5leHRyYS5jbGFzc2VzLmluZGV4T2YoTEFZRVJTX1RFWFRfQ0xBU1NOQU1FKSkge1xuICAgIHJldHVybiBjYWxsUHJvdmlkZWQoJ2dlbmVyYXRlTGF5ZXJzVGV4dCcsIG5vZGUsIG5vZGVNZXRhKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2FsbFByb3ZpZGVkKCdnZW5lcmF0ZVN2Z1JlcGxhY2VtZW50TXV0YXRpb24nLCBub2RlLCBub2RlTWV0YSk7XG4gIH1cbn1cblxudmFyIGtub3duUHJlZml4ZXMgPSBuZXcgU2V0KCk7XG5GQU1JTElFUy5tYXAoZnVuY3Rpb24gKGZhbWlseSkge1xuICBrbm93blByZWZpeGVzLmFkZChcImZhLVwiLmNvbmNhdChmYW1pbHkpKTtcbn0pO1xuT2JqZWN0LmtleXMoUFJFRklYX1RPX1NUWUxFW0ZBTUlMWV9DTEFTU0lDXSkubWFwKGtub3duUHJlZml4ZXMuYWRkLmJpbmQoa25vd25QcmVmaXhlcykpO1xuT2JqZWN0LmtleXMoUFJFRklYX1RPX1NUWUxFW0ZBTUlMWV9TSEFSUF0pLm1hcChrbm93blByZWZpeGVzLmFkZC5iaW5kKGtub3duUHJlZml4ZXMpKTtcbmtub3duUHJlZml4ZXMgPSBfdG9Db25zdW1hYmxlQXJyYXkoa25vd25QcmVmaXhlcyk7XG5cbmZ1bmN0aW9uIG9uVHJlZShyb290KSB7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbnVsbDtcbiAgaWYgKCFJU19ET00pIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgdmFyIGh0bWxDbGFzc0xpc3QgPSBET0NVTUVOVC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0O1xuXG4gIHZhciBoY2xBZGQgPSBmdW5jdGlvbiBoY2xBZGQoc3VmZml4KSB7XG4gICAgcmV0dXJuIGh0bWxDbGFzc0xpc3QuYWRkKFwiXCIuY29uY2F0KEhUTUxfQ0xBU1NfSTJTVkdfQkFTRV9DTEFTUywgXCItXCIpLmNvbmNhdChzdWZmaXgpKTtcbiAgfTtcblxuICB2YXIgaGNsUmVtb3ZlID0gZnVuY3Rpb24gaGNsUmVtb3ZlKHN1ZmZpeCkge1xuICAgIHJldHVybiBodG1sQ2xhc3NMaXN0LnJlbW92ZShcIlwiLmNvbmNhdChIVE1MX0NMQVNTX0kyU1ZHX0JBU0VfQ0xBU1MsIFwiLVwiKS5jb25jYXQoc3VmZml4KSk7XG4gIH07XG5cbiAgdmFyIHByZWZpeGVzID0gY29uZmlnLmF1dG9GZXRjaFN2ZyA/IGtub3duUHJlZml4ZXMgOiBGQU1JTElFUy5tYXAoZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gXCJmYS1cIi5jb25jYXQoZik7XG4gIH0pLmNvbmNhdChPYmplY3Qua2V5cyhzdHlsZXMkMikpO1xuXG4gIGlmICghcHJlZml4ZXMuaW5jbHVkZXMoJ2ZhJykpIHtcbiAgICBwcmVmaXhlcy5wdXNoKCdmYScpO1xuICB9XG5cbiAgdmFyIHByZWZpeGVzRG9tUXVlcnkgPSBbXCIuXCIuY29uY2F0KExBWUVSU19URVhUX0NMQVNTTkFNRSwgXCI6bm90KFtcIikuY29uY2F0KERBVEFfRkFfSTJTVkcsIFwiXSlcIildLmNvbmNhdChwcmVmaXhlcy5tYXAoZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gXCIuXCIuY29uY2F0KHAsIFwiOm5vdChbXCIpLmNvbmNhdChEQVRBX0ZBX0kyU1ZHLCBcIl0pXCIpO1xuICB9KSkuam9pbignLCAnKTtcblxuICBpZiAocHJlZml4ZXNEb21RdWVyeS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICB2YXIgY2FuZGlkYXRlcyA9IFtdO1xuXG4gIHRyeSB7XG4gICAgY2FuZGlkYXRlcyA9IHRvQXJyYXkocm9vdC5xdWVyeVNlbGVjdG9yQWxsKHByZWZpeGVzRG9tUXVlcnkpKTtcbiAgfSBjYXRjaCAoZSkgey8vIG5vb3BcbiAgfVxuXG4gIGlmIChjYW5kaWRhdGVzLmxlbmd0aCA+IDApIHtcbiAgICBoY2xBZGQoJ3BlbmRpbmcnKTtcbiAgICBoY2xSZW1vdmUoJ2NvbXBsZXRlJyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgdmFyIG1hcmsgPSBwZXJmLmJlZ2luKCdvblRyZWUnKTtcbiAgdmFyIG11dGF0aW9ucyA9IGNhbmRpZGF0ZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG5vZGUpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIG11dGF0aW9uID0gZ2VuZXJhdGVNdXRhdGlvbihub2RlKTtcblxuICAgICAgaWYgKG11dGF0aW9uKSB7XG4gICAgICAgIGFjYy5wdXNoKG11dGF0aW9uKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoIVBST0RVQ1RJT04pIHtcbiAgICAgICAgaWYgKGUubmFtZSA9PT0gJ01pc3NpbmdJY29uJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCBbXSk7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgUHJvbWlzZS5hbGwobXV0YXRpb25zKS50aGVuKGZ1bmN0aW9uIChyZXNvbHZlZE11dGF0aW9ucykge1xuICAgICAgcGVyZm9ybShyZXNvbHZlZE11dGF0aW9ucywgZnVuY3Rpb24gKCkge1xuICAgICAgICBoY2xBZGQoJ2FjdGl2ZScpO1xuICAgICAgICBoY2xBZGQoJ2NvbXBsZXRlJyk7XG4gICAgICAgIGhjbFJlbW92ZSgncGVuZGluZycpO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuICAgICAgICBtYXJrKCk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICBtYXJrKCk7XG4gICAgICByZWplY3QoZSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvbk5vZGUobm9kZSkge1xuICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7XG4gIGdlbmVyYXRlTXV0YXRpb24obm9kZSkudGhlbihmdW5jdGlvbiAobXV0YXRpb24pIHtcbiAgICBpZiAobXV0YXRpb24pIHtcbiAgICAgIHBlcmZvcm0oW211dGF0aW9uXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVJY29ucyhuZXh0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAobWF5YmVJY29uRGVmaW5pdGlvbikge1xuICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBpY29uRGVmaW5pdGlvbiA9IChtYXliZUljb25EZWZpbml0aW9uIHx8IHt9KS5pY29uID8gbWF5YmVJY29uRGVmaW5pdGlvbiA6IGZpbmRJY29uRGVmaW5pdGlvbihtYXliZUljb25EZWZpbml0aW9uIHx8IHt9KTtcbiAgICB2YXIgbWFzayA9IHBhcmFtcy5tYXNrO1xuXG4gICAgaWYgKG1hc2spIHtcbiAgICAgIG1hc2sgPSAobWFzayB8fCB7fSkuaWNvbiA/IG1hc2sgOiBmaW5kSWNvbkRlZmluaXRpb24obWFzayB8fCB7fSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHQoaWNvbkRlZmluaXRpb24sIF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBwYXJhbXMpLCB7fSwge1xuICAgICAgbWFzazogbWFza1xuICAgIH0pKTtcbiAgfTtcbn1cblxudmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihpY29uRGVmaW5pdGlvbikge1xuICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIF9wYXJhbXMkdHJhbnNmb3JtID0gcGFyYW1zLnRyYW5zZm9ybSxcbiAgICAgIHRyYW5zZm9ybSA9IF9wYXJhbXMkdHJhbnNmb3JtID09PSB2b2lkIDAgPyBtZWFuaW5nbGVzc1RyYW5zZm9ybSA6IF9wYXJhbXMkdHJhbnNmb3JtLFxuICAgICAgX3BhcmFtcyRzeW1ib2wgPSBwYXJhbXMuc3ltYm9sLFxuICAgICAgc3ltYm9sID0gX3BhcmFtcyRzeW1ib2wgPT09IHZvaWQgMCA/IGZhbHNlIDogX3BhcmFtcyRzeW1ib2wsXG4gICAgICBfcGFyYW1zJG1hc2sgPSBwYXJhbXMubWFzayxcbiAgICAgIG1hc2sgPSBfcGFyYW1zJG1hc2sgPT09IHZvaWQgMCA/IG51bGwgOiBfcGFyYW1zJG1hc2ssXG4gICAgICBfcGFyYW1zJG1hc2tJZCA9IHBhcmFtcy5tYXNrSWQsXG4gICAgICBtYXNrSWQgPSBfcGFyYW1zJG1hc2tJZCA9PT0gdm9pZCAwID8gbnVsbCA6IF9wYXJhbXMkbWFza0lkLFxuICAgICAgX3BhcmFtcyR0aXRsZSA9IHBhcmFtcy50aXRsZSxcbiAgICAgIHRpdGxlID0gX3BhcmFtcyR0aXRsZSA9PT0gdm9pZCAwID8gbnVsbCA6IF9wYXJhbXMkdGl0bGUsXG4gICAgICBfcGFyYW1zJHRpdGxlSWQgPSBwYXJhbXMudGl0bGVJZCxcbiAgICAgIHRpdGxlSWQgPSBfcGFyYW1zJHRpdGxlSWQgPT09IHZvaWQgMCA/IG51bGwgOiBfcGFyYW1zJHRpdGxlSWQsXG4gICAgICBfcGFyYW1zJGNsYXNzZXMgPSBwYXJhbXMuY2xhc3NlcyxcbiAgICAgIGNsYXNzZXMgPSBfcGFyYW1zJGNsYXNzZXMgPT09IHZvaWQgMCA/IFtdIDogX3BhcmFtcyRjbGFzc2VzLFxuICAgICAgX3BhcmFtcyRhdHRyaWJ1dGVzID0gcGFyYW1zLmF0dHJpYnV0ZXMsXG4gICAgICBhdHRyaWJ1dGVzID0gX3BhcmFtcyRhdHRyaWJ1dGVzID09PSB2b2lkIDAgPyB7fSA6IF9wYXJhbXMkYXR0cmlidXRlcyxcbiAgICAgIF9wYXJhbXMkc3R5bGVzID0gcGFyYW1zLnN0eWxlcyxcbiAgICAgIHN0eWxlcyA9IF9wYXJhbXMkc3R5bGVzID09PSB2b2lkIDAgPyB7fSA6IF9wYXJhbXMkc3R5bGVzO1xuICBpZiAoIWljb25EZWZpbml0aW9uKSByZXR1cm47XG4gIHZhciBwcmVmaXggPSBpY29uRGVmaW5pdGlvbi5wcmVmaXgsXG4gICAgICBpY29uTmFtZSA9IGljb25EZWZpbml0aW9uLmljb25OYW1lLFxuICAgICAgaWNvbiA9IGljb25EZWZpbml0aW9uLmljb247XG4gIHJldHVybiBkb21WYXJpYW50cyhfb2JqZWN0U3ByZWFkMih7XG4gICAgdHlwZTogJ2ljb24nXG4gIH0sIGljb25EZWZpbml0aW9uKSwgZnVuY3Rpb24gKCkge1xuICAgIGNhbGxIb29rcygnYmVmb3JlRE9NRWxlbWVudENyZWF0aW9uJywge1xuICAgICAgaWNvbkRlZmluaXRpb246IGljb25EZWZpbml0aW9uLFxuICAgICAgcGFyYW1zOiBwYXJhbXNcbiAgICB9KTtcblxuICAgIGlmIChjb25maWcuYXV0b0ExMXkpIHtcbiAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICBhdHRyaWJ1dGVzWydhcmlhLWxhYmVsbGVkYnknXSA9IFwiXCIuY29uY2F0KGNvbmZpZy5yZXBsYWNlbWVudENsYXNzLCBcIi10aXRsZS1cIikuY29uY2F0KHRpdGxlSWQgfHwgbmV4dFVuaXF1ZUlkKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXR0cmlidXRlc1snYXJpYS1oaWRkZW4nXSA9ICd0cnVlJztcbiAgICAgICAgYXR0cmlidXRlc1snZm9jdXNhYmxlJ10gPSAnZmFsc2UnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYWtlSW5saW5lU3ZnQWJzdHJhY3Qoe1xuICAgICAgaWNvbnM6IHtcbiAgICAgICAgbWFpbjogYXNGb3VuZEljb24oaWNvbiksXG4gICAgICAgIG1hc2s6IG1hc2sgPyBhc0ZvdW5kSWNvbihtYXNrLmljb24pIDoge1xuICAgICAgICAgIGZvdW5kOiBmYWxzZSxcbiAgICAgICAgICB3aWR0aDogbnVsbCxcbiAgICAgICAgICBoZWlnaHQ6IG51bGwsXG4gICAgICAgICAgaWNvbjoge31cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgaWNvbk5hbWU6IGljb25OYW1lLFxuICAgICAgdHJhbnNmb3JtOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgbWVhbmluZ2xlc3NUcmFuc2Zvcm0pLCB0cmFuc2Zvcm0pLFxuICAgICAgc3ltYm9sOiBzeW1ib2wsXG4gICAgICB0aXRsZTogdGl0bGUsXG4gICAgICBtYXNrSWQ6IG1hc2tJZCxcbiAgICAgIHRpdGxlSWQ6IHRpdGxlSWQsXG4gICAgICBleHRyYToge1xuICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLFxuICAgICAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICAgICAgY2xhc3NlczogY2xhc3Nlc1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn07XG52YXIgUmVwbGFjZUVsZW1lbnRzID0ge1xuICBtaXhvdXQ6IGZ1bmN0aW9uIG1peG91dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWNvbjogcmVzb2x2ZUljb25zKHJlbmRlcilcbiAgICB9O1xuICB9LFxuICBob29rczogZnVuY3Rpb24gaG9va3MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG11dGF0aW9uT2JzZXJ2ZXJDYWxsYmFja3M6IGZ1bmN0aW9uIG11dGF0aW9uT2JzZXJ2ZXJDYWxsYmFja3MoYWNjdW11bGF0b3IpIHtcbiAgICAgICAgYWNjdW11bGF0b3IudHJlZUNhbGxiYWNrID0gb25UcmVlO1xuICAgICAgICBhY2N1bXVsYXRvci5ub2RlQ2FsbGJhY2sgPSBvbk5vZGU7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBwcm92aWRlczogZnVuY3Rpb24gcHJvdmlkZXMocHJvdmlkZXJzJCQxKSB7XG4gICAgcHJvdmlkZXJzJCQxLmkyc3ZnID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgdmFyIF9wYXJhbXMkbm9kZSA9IHBhcmFtcy5ub2RlLFxuICAgICAgICAgIG5vZGUgPSBfcGFyYW1zJG5vZGUgPT09IHZvaWQgMCA/IERPQ1VNRU5UIDogX3BhcmFtcyRub2RlLFxuICAgICAgICAgIF9wYXJhbXMkY2FsbGJhY2sgPSBwYXJhbXMuY2FsbGJhY2ssXG4gICAgICAgICAgY2FsbGJhY2sgPSBfcGFyYW1zJGNhbGxiYWNrID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoKSB7fSA6IF9wYXJhbXMkY2FsbGJhY2s7XG4gICAgICByZXR1cm4gb25UcmVlKG5vZGUsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgcHJvdmlkZXJzJCQxLmdlbmVyYXRlU3ZnUmVwbGFjZW1lbnRNdXRhdGlvbiA9IGZ1bmN0aW9uIChub2RlLCBub2RlTWV0YSkge1xuICAgICAgdmFyIGljb25OYW1lID0gbm9kZU1ldGEuaWNvbk5hbWUsXG4gICAgICAgICAgdGl0bGUgPSBub2RlTWV0YS50aXRsZSxcbiAgICAgICAgICB0aXRsZUlkID0gbm9kZU1ldGEudGl0bGVJZCxcbiAgICAgICAgICBwcmVmaXggPSBub2RlTWV0YS5wcmVmaXgsXG4gICAgICAgICAgdHJhbnNmb3JtID0gbm9kZU1ldGEudHJhbnNmb3JtLFxuICAgICAgICAgIHN5bWJvbCA9IG5vZGVNZXRhLnN5bWJvbCxcbiAgICAgICAgICBtYXNrID0gbm9kZU1ldGEubWFzayxcbiAgICAgICAgICBtYXNrSWQgPSBub2RlTWV0YS5tYXNrSWQsXG4gICAgICAgICAgZXh0cmEgPSBub2RlTWV0YS5leHRyYTtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIFByb21pc2UuYWxsKFtmaW5kSWNvbihpY29uTmFtZSwgcHJlZml4KSwgbWFzay5pY29uTmFtZSA/IGZpbmRJY29uKG1hc2suaWNvbk5hbWUsIG1hc2sucHJlZml4KSA6IFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgZm91bmQ6IGZhbHNlLFxuICAgICAgICAgIHdpZHRoOiA1MTIsXG4gICAgICAgICAgaGVpZ2h0OiA1MTIsXG4gICAgICAgICAgaWNvbjoge31cbiAgICAgICAgfSldKS50aGVuKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgICAgICAgIG1haW4gPSBfcmVmMlswXSxcbiAgICAgICAgICAgICAgbWFzayA9IF9yZWYyWzFdO1xuXG4gICAgICAgICAgcmVzb2x2ZShbbm9kZSwgbWFrZUlubGluZVN2Z0Fic3RyYWN0KHtcbiAgICAgICAgICAgIGljb25zOiB7XG4gICAgICAgICAgICAgIG1haW46IG1haW4sXG4gICAgICAgICAgICAgIG1hc2s6IG1hc2tcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcmVmaXg6IHByZWZpeCxcbiAgICAgICAgICAgIGljb25OYW1lOiBpY29uTmFtZSxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgICAgICAgc3ltYm9sOiBzeW1ib2wsXG4gICAgICAgICAgICBtYXNrSWQ6IG1hc2tJZCxcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgICAgIHRpdGxlSWQ6IHRpdGxlSWQsXG4gICAgICAgICAgICBleHRyYTogZXh0cmEsXG4gICAgICAgICAgICB3YXRjaGFibGU6IHRydWVcbiAgICAgICAgICB9KV0pO1xuICAgICAgICB9KS5jYXRjaChyZWplY3QpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByb3ZpZGVycyQkMS5nZW5lcmF0ZUFic3RyYWN0SWNvbiA9IGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgdmFyIGNoaWxkcmVuID0gX3JlZjMuY2hpbGRyZW4sXG4gICAgICAgICAgYXR0cmlidXRlcyA9IF9yZWYzLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgbWFpbiA9IF9yZWYzLm1haW4sXG4gICAgICAgICAgdHJhbnNmb3JtID0gX3JlZjMudHJhbnNmb3JtLFxuICAgICAgICAgIHN0eWxlcyA9IF9yZWYzLnN0eWxlcztcbiAgICAgIHZhciBzdHlsZVN0cmluZyA9IGpvaW5TdHlsZXMoc3R5bGVzKTtcblxuICAgICAgaWYgKHN0eWxlU3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYXR0cmlidXRlc1snc3R5bGUnXSA9IHN0eWxlU3RyaW5nO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV4dENoaWxkO1xuXG4gICAgICBpZiAodHJhbnNmb3JtSXNNZWFuaW5nZnVsKHRyYW5zZm9ybSkpIHtcbiAgICAgICAgbmV4dENoaWxkID0gY2FsbFByb3ZpZGVkKCdnZW5lcmF0ZUFic3RyYWN0VHJhbnNmb3JtR3JvdXBpbmcnLCB7XG4gICAgICAgICAgbWFpbjogbWFpbixcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICAgICAgICBjb250YWluZXJXaWR0aDogbWFpbi53aWR0aCxcbiAgICAgICAgICBpY29uV2lkdGg6IG1haW4ud2lkdGhcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkcmVuLnB1c2gobmV4dENoaWxkIHx8IG1haW4uaWNvbik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXNcbiAgICAgIH07XG4gICAgfTtcbiAgfVxufTtcblxudmFyIExheWVycyA9IHtcbiAgbWl4b3V0OiBmdW5jdGlvbiBtaXhvdXQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxheWVyOiBmdW5jdGlvbiBsYXllcihhc3NlbWJsZXIpIHtcbiAgICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICAgIHZhciBfcGFyYW1zJGNsYXNzZXMgPSBwYXJhbXMuY2xhc3NlcyxcbiAgICAgICAgICAgIGNsYXNzZXMgPSBfcGFyYW1zJGNsYXNzZXMgPT09IHZvaWQgMCA/IFtdIDogX3BhcmFtcyRjbGFzc2VzO1xuICAgICAgICByZXR1cm4gZG9tVmFyaWFudHMoe1xuICAgICAgICAgIHR5cGU6ICdsYXllcidcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNhbGxIb29rcygnYmVmb3JlRE9NRWxlbWVudENyZWF0aW9uJywge1xuICAgICAgICAgICAgYXNzZW1ibGVyOiBhc3NlbWJsZXIsXG4gICAgICAgICAgICBwYXJhbXM6IHBhcmFtc1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuICAgICAgICAgIGFzc2VtYmxlcihmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShhcmdzKSA/IGFyZ3MubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uY29uY2F0KGEuYWJzdHJhY3QpO1xuICAgICAgICAgICAgfSkgOiBjaGlsZHJlbiA9IGNoaWxkcmVuLmNvbmNhdChhcmdzLmFic3RyYWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gW3tcbiAgICAgICAgICAgIHRhZzogJ3NwYW4nLFxuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICBjbGFzczogW1wiXCIuY29uY2F0KGNvbmZpZy5jc3NQcmVmaXgsIFwiLWxheWVyc1wiKV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShjbGFzc2VzKSkuam9pbignICcpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICAgICAgfV07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5cbnZhciBMYXllcnNDb3VudGVyID0ge1xuICBtaXhvdXQ6IGZ1bmN0aW9uIG1peG91dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY291bnRlcjogZnVuY3Rpb24gY291bnRlcihjb250ZW50KSB7XG4gICAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgICB2YXIgX3BhcmFtcyR0aXRsZSA9IHBhcmFtcy50aXRsZSxcbiAgICAgICAgICAgIHRpdGxlID0gX3BhcmFtcyR0aXRsZSA9PT0gdm9pZCAwID8gbnVsbCA6IF9wYXJhbXMkdGl0bGUsXG4gICAgICAgICAgICBfcGFyYW1zJGNsYXNzZXMgPSBwYXJhbXMuY2xhc3NlcyxcbiAgICAgICAgICAgIGNsYXNzZXMgPSBfcGFyYW1zJGNsYXNzZXMgPT09IHZvaWQgMCA/IFtdIDogX3BhcmFtcyRjbGFzc2VzLFxuICAgICAgICAgICAgX3BhcmFtcyRhdHRyaWJ1dGVzID0gcGFyYW1zLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzID0gX3BhcmFtcyRhdHRyaWJ1dGVzID09PSB2b2lkIDAgPyB7fSA6IF9wYXJhbXMkYXR0cmlidXRlcyxcbiAgICAgICAgICAgIF9wYXJhbXMkc3R5bGVzID0gcGFyYW1zLnN0eWxlcyxcbiAgICAgICAgICAgIHN0eWxlcyA9IF9wYXJhbXMkc3R5bGVzID09PSB2b2lkIDAgPyB7fSA6IF9wYXJhbXMkc3R5bGVzO1xuICAgICAgICByZXR1cm4gZG9tVmFyaWFudHMoe1xuICAgICAgICAgIHR5cGU6ICdjb3VudGVyJyxcbiAgICAgICAgICBjb250ZW50OiBjb250ZW50XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjYWxsSG9va3MoJ2JlZm9yZURPTUVsZW1lbnRDcmVhdGlvbicsIHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXG4gICAgICAgICAgICBwYXJhbXM6IHBhcmFtc1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBtYWtlTGF5ZXJzQ291bnRlckFic3RyYWN0KHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgICAgIGV4dHJhOiB7XG4gICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgICAgICAgICBjbGFzc2VzOiBbXCJcIi5jb25jYXQoY29uZmlnLmNzc1ByZWZpeCwgXCItbGF5ZXJzLWNvdW50ZXJcIildLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoY2xhc3NlcykpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5cbnZhciBMYXllcnNUZXh0ID0ge1xuICBtaXhvdXQ6IGZ1bmN0aW9uIG1peG91dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogZnVuY3Rpb24gdGV4dChjb250ZW50KSB7XG4gICAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgICB2YXIgX3BhcmFtcyR0cmFuc2Zvcm0gPSBwYXJhbXMudHJhbnNmb3JtLFxuICAgICAgICAgICAgdHJhbnNmb3JtID0gX3BhcmFtcyR0cmFuc2Zvcm0gPT09IHZvaWQgMCA/IG1lYW5pbmdsZXNzVHJhbnNmb3JtIDogX3BhcmFtcyR0cmFuc2Zvcm0sXG4gICAgICAgICAgICBfcGFyYW1zJHRpdGxlID0gcGFyYW1zLnRpdGxlLFxuICAgICAgICAgICAgdGl0bGUgPSBfcGFyYW1zJHRpdGxlID09PSB2b2lkIDAgPyBudWxsIDogX3BhcmFtcyR0aXRsZSxcbiAgICAgICAgICAgIF9wYXJhbXMkY2xhc3NlcyA9IHBhcmFtcy5jbGFzc2VzLFxuICAgICAgICAgICAgY2xhc3NlcyA9IF9wYXJhbXMkY2xhc3NlcyA9PT0gdm9pZCAwID8gW10gOiBfcGFyYW1zJGNsYXNzZXMsXG4gICAgICAgICAgICBfcGFyYW1zJGF0dHJpYnV0ZXMgPSBwYXJhbXMuYXR0cmlidXRlcyxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMgPSBfcGFyYW1zJGF0dHJpYnV0ZXMgPT09IHZvaWQgMCA/IHt9IDogX3BhcmFtcyRhdHRyaWJ1dGVzLFxuICAgICAgICAgICAgX3BhcmFtcyRzdHlsZXMgPSBwYXJhbXMuc3R5bGVzLFxuICAgICAgICAgICAgc3R5bGVzID0gX3BhcmFtcyRzdHlsZXMgPT09IHZvaWQgMCA/IHt9IDogX3BhcmFtcyRzdHlsZXM7XG4gICAgICAgIHJldHVybiBkb21WYXJpYW50cyh7XG4gICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNhbGxIb29rcygnYmVmb3JlRE9NRWxlbWVudENyZWF0aW9uJywge1xuICAgICAgICAgICAgY29udGVudDogY29udGVudCxcbiAgICAgICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIG1ha2VMYXllcnNUZXh0QWJzdHJhY3Qoe1xuICAgICAgICAgICAgY29udGVudDogY29udGVudCxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIG1lYW5pbmdsZXNzVHJhbnNmb3JtKSwgdHJhbnNmb3JtKSxcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgICAgIGV4dHJhOiB7XG4gICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgICAgICAgICBjbGFzc2VzOiBbXCJcIi5jb25jYXQoY29uZmlnLmNzc1ByZWZpeCwgXCItbGF5ZXJzLXRleHRcIildLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoY2xhc3NlcykpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIHByb3ZpZGVzOiBmdW5jdGlvbiBwcm92aWRlcyhwcm92aWRlcnMkJDEpIHtcbiAgICBwcm92aWRlcnMkJDEuZ2VuZXJhdGVMYXllcnNUZXh0ID0gZnVuY3Rpb24gKG5vZGUsIG5vZGVNZXRhKSB7XG4gICAgICB2YXIgdGl0bGUgPSBub2RlTWV0YS50aXRsZSxcbiAgICAgICAgICB0cmFuc2Zvcm0gPSBub2RlTWV0YS50cmFuc2Zvcm0sXG4gICAgICAgICAgZXh0cmEgPSBub2RlTWV0YS5leHRyYTtcbiAgICAgIHZhciB3aWR0aCA9IG51bGw7XG4gICAgICB2YXIgaGVpZ2h0ID0gbnVsbDtcblxuICAgICAgaWYgKElTX0lFKSB7XG4gICAgICAgIHZhciBjb21wdXRlZEZvbnRTaXplID0gcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZShub2RlKS5mb250U2l6ZSwgMTApO1xuICAgICAgICB2YXIgYm91bmRpbmdDbGllbnRSZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgd2lkdGggPSBib3VuZGluZ0NsaWVudFJlY3Qud2lkdGggLyBjb21wdXRlZEZvbnRTaXplO1xuICAgICAgICBoZWlnaHQgPSBib3VuZGluZ0NsaWVudFJlY3QuaGVpZ2h0IC8gY29tcHV0ZWRGb250U2l6ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbmZpZy5hdXRvQTExeSAmJiAhdGl0bGUpIHtcbiAgICAgICAgZXh0cmEuYXR0cmlidXRlc1snYXJpYS1oaWRkZW4nXSA9ICd0cnVlJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbbm9kZSwgbWFrZUxheWVyc1RleHRBYnN0cmFjdCh7XG4gICAgICAgIGNvbnRlbnQ6IG5vZGUuaW5uZXJIVE1MLFxuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgICBleHRyYTogZXh0cmEsXG4gICAgICAgIHdhdGNoYWJsZTogdHJ1ZVxuICAgICAgfSldKTtcbiAgICB9O1xuICB9XG59O1xuXG52YXIgQ0xFQU5fQ09OVEVOVF9QQVRURVJOID0gbmV3IFJlZ0V4cChcIlxcXCJcIiwgJ3VnJyk7XG52YXIgU0VDT05EQVJZX1VOSUNPREVfUkFOR0UgPSBbMTEwNTkyMCwgMTExMjMxOV07XG5mdW5jdGlvbiBoZXhWYWx1ZUZyb21Db250ZW50KGNvbnRlbnQpIHtcbiAgdmFyIGNsZWFuZWQgPSBjb250ZW50LnJlcGxhY2UoQ0xFQU5fQ09OVEVOVF9QQVRURVJOLCAnJyk7XG4gIHZhciBjb2RlUG9pbnQgPSBjb2RlUG9pbnRBdChjbGVhbmVkLCAwKTtcbiAgdmFyIGlzUHJlcGVuZFRlbiA9IGNvZGVQb2ludCA+PSBTRUNPTkRBUllfVU5JQ09ERV9SQU5HRVswXSAmJiBjb2RlUG9pbnQgPD0gU0VDT05EQVJZX1VOSUNPREVfUkFOR0VbMV07XG4gIHZhciBpc0RvdWJsZWQgPSBjbGVhbmVkLmxlbmd0aCA9PT0gMiA/IGNsZWFuZWRbMF0gPT09IGNsZWFuZWRbMV0gOiBmYWxzZTtcbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogaXNEb3VibGVkID8gdG9IZXgoY2xlYW5lZFswXSkgOiB0b0hleChjbGVhbmVkKSxcbiAgICBpc1NlY29uZGFyeTogaXNQcmVwZW5kVGVuIHx8IGlzRG91YmxlZFxuICB9O1xufVxuXG5mdW5jdGlvbiByZXBsYWNlRm9yUG9zaXRpb24obm9kZSwgcG9zaXRpb24pIHtcbiAgdmFyIHBlbmRpbmdBdHRyaWJ1dGUgPSBcIlwiLmNvbmNhdChEQVRBX0ZBX1BTRVVET19FTEVNRU5UX1BFTkRJTkcpLmNvbmNhdChwb3NpdGlvbi5yZXBsYWNlKCc6JywgJy0nKSk7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaWYgKG5vZGUuZ2V0QXR0cmlidXRlKHBlbmRpbmdBdHRyaWJ1dGUpICE9PSBudWxsKSB7XG4gICAgICAvLyBUaGlzIG5vZGUgaXMgYWxyZWFkeSBiZWluZyBwcm9jZXNzZWRcbiAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuID0gdG9BcnJheShub2RlLmNoaWxkcmVuKTtcbiAgICB2YXIgYWxyZWFkeVByb2Nlc3NlZFBzZXVkb0VsZW1lbnQgPSBjaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjLmdldEF0dHJpYnV0ZShEQVRBX0ZBX1BTRVVET19FTEVNRU5UKSA9PT0gcG9zaXRpb247XG4gICAgfSlbMF07XG4gICAgdmFyIHN0eWxlcyA9IFdJTkRPVy5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIHBvc2l0aW9uKTtcbiAgICB2YXIgZm9udEZhbWlseSA9IHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdmb250LWZhbWlseScpLm1hdGNoKEZPTlRfRkFNSUxZX1BBVFRFUk4pO1xuICAgIHZhciBmb250V2VpZ2h0ID0gc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2ZvbnQtd2VpZ2h0Jyk7XG4gICAgdmFyIGNvbnRlbnQgPSBzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnY29udGVudCcpO1xuXG4gICAgaWYgKGFscmVhZHlQcm9jZXNzZWRQc2V1ZG9FbGVtZW50ICYmICFmb250RmFtaWx5KSB7XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IHByb2Nlc3NlZCBpdCBidXQgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc3R5bGUgZG9lcyBub3QgcmVzdWx0IGluIGEgZm9udC1mYW1pbHksXG4gICAgICAvLyB0aGF0IHByb2JhYmx5IG1lYW5zIHRoYXQgYSBjbGFzcyBuYW1lIHRoYXQgd2FzIHByZXZpb3VzbHkgcHJlc2VudCB0byBtYWtlIHRoZSBpY29uIGhhcyBiZWVuXG4gICAgICAvLyByZW1vdmVkLiBTbyB3ZSBub3cgc2hvdWxkIGRlbGV0ZSB0aGUgaWNvbi5cbiAgICAgIG5vZGUucmVtb3ZlQ2hpbGQoYWxyZWFkeVByb2Nlc3NlZFBzZXVkb0VsZW1lbnQpO1xuICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICB9IGVsc2UgaWYgKGZvbnRGYW1pbHkgJiYgY29udGVudCAhPT0gJ25vbmUnICYmIGNvbnRlbnQgIT09ICcnKSB7XG4gICAgICB2YXIgX2NvbnRlbnQgPSBzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnY29udGVudCcpO1xuXG4gICAgICB2YXIgZmFtaWx5ID0gflsnU2hhcnAnXS5pbmRleE9mKGZvbnRGYW1pbHlbMl0pID8gRkFNSUxZX1NIQVJQIDogRkFNSUxZX0NMQVNTSUM7XG4gICAgICB2YXIgcHJlZml4ID0gflsnU29saWQnLCAnUmVndWxhcicsICdMaWdodCcsICdUaGluJywgJ0R1b3RvbmUnLCAnQnJhbmRzJywgJ0tpdCddLmluZGV4T2YoZm9udEZhbWlseVsyXSkgPyBTVFlMRV9UT19QUkVGSVhbZmFtaWx5XVtmb250RmFtaWx5WzJdLnRvTG93ZXJDYXNlKCldIDogRk9OVF9XRUlHSFRfVE9fUFJFRklYW2ZhbWlseV1bZm9udFdlaWdodF07XG5cbiAgICAgIHZhciBfaGV4VmFsdWVGcm9tQ29udGVudCA9IGhleFZhbHVlRnJvbUNvbnRlbnQoX2NvbnRlbnQpLFxuICAgICAgICAgIGhleFZhbHVlID0gX2hleFZhbHVlRnJvbUNvbnRlbnQudmFsdWUsXG4gICAgICAgICAgaXNTZWNvbmRhcnkgPSBfaGV4VmFsdWVGcm9tQ29udGVudC5pc1NlY29uZGFyeTtcblxuICAgICAgdmFyIGlzVjQgPSBmb250RmFtaWx5WzBdLnN0YXJ0c1dpdGgoJ0ZvbnRBd2Vzb21lJyk7XG4gICAgICB2YXIgaWNvbk5hbWUgPSBieVVuaWNvZGUocHJlZml4LCBoZXhWYWx1ZSk7XG4gICAgICB2YXIgaWNvbklkZW50aWZpZXIgPSBpY29uTmFtZTtcblxuICAgICAgaWYgKGlzVjQpIHtcbiAgICAgICAgdmFyIGljb25OYW1lNCA9IGJ5T2xkVW5pY29kZShoZXhWYWx1ZSk7XG5cbiAgICAgICAgaWYgKGljb25OYW1lNC5pY29uTmFtZSAmJiBpY29uTmFtZTQucHJlZml4KSB7XG4gICAgICAgICAgaWNvbk5hbWUgPSBpY29uTmFtZTQuaWNvbk5hbWU7XG4gICAgICAgICAgcHJlZml4ID0gaWNvbk5hbWU0LnByZWZpeDtcbiAgICAgICAgfVxuICAgICAgfSAvLyBPbmx5IGNvbnZlcnQgdGhlIHBzZXVkbyBlbGVtZW50IGluIHRoaXMgOjpiZWZvcmUvOjphZnRlciBwb3NpdGlvbiBpbnRvIGFuIGljb24gaWYgd2UgaGF2ZW4ndFxuICAgICAgLy8gYWxyZWFkeSBkb25lIHNvIHdpdGggdGhlIHNhbWUgcHJlZml4IGFuZCBpY29uTmFtZVxuXG5cbiAgICAgIGlmIChpY29uTmFtZSAmJiAhaXNTZWNvbmRhcnkgJiYgKCFhbHJlYWR5UHJvY2Vzc2VkUHNldWRvRWxlbWVudCB8fCBhbHJlYWR5UHJvY2Vzc2VkUHNldWRvRWxlbWVudC5nZXRBdHRyaWJ1dGUoREFUQV9QUkVGSVgpICE9PSBwcmVmaXggfHwgYWxyZWFkeVByb2Nlc3NlZFBzZXVkb0VsZW1lbnQuZ2V0QXR0cmlidXRlKERBVEFfSUNPTikgIT09IGljb25JZGVudGlmaWVyKSkge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShwZW5kaW5nQXR0cmlidXRlLCBpY29uSWRlbnRpZmllcik7XG5cbiAgICAgICAgaWYgKGFscmVhZHlQcm9jZXNzZWRQc2V1ZG9FbGVtZW50KSB7XG4gICAgICAgICAgLy8gRGVsZXRlIHRoZSBvbGQgb25lLCBzaW5jZSB3ZSdyZSByZXBsYWNpbmcgaXQgd2l0aCBhIG5ldyBvbmVcbiAgICAgICAgICBub2RlLnJlbW92ZUNoaWxkKGFscmVhZHlQcm9jZXNzZWRQc2V1ZG9FbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtZXRhID0gYmxhbmtNZXRhKCk7XG4gICAgICAgIHZhciBleHRyYSA9IG1ldGEuZXh0cmE7XG4gICAgICAgIGV4dHJhLmF0dHJpYnV0ZXNbREFUQV9GQV9QU0VVRE9fRUxFTUVOVF0gPSBwb3NpdGlvbjtcbiAgICAgICAgZmluZEljb24oaWNvbk5hbWUsIHByZWZpeCkudGhlbihmdW5jdGlvbiAobWFpbikge1xuICAgICAgICAgIHZhciBfYWJzdHJhY3QgPSBtYWtlSW5saW5lU3ZnQWJzdHJhY3QoX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIG1ldGEpLCB7fSwge1xuICAgICAgICAgICAgaWNvbnM6IHtcbiAgICAgICAgICAgICAgbWFpbjogbWFpbixcbiAgICAgICAgICAgICAgbWFzazogZW1wdHlDYW5vbmljYWxJY29uKClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcmVmaXg6IHByZWZpeCxcbiAgICAgICAgICAgIGljb25OYW1lOiBpY29uSWRlbnRpZmllcixcbiAgICAgICAgICAgIGV4dHJhOiBleHRyYSxcbiAgICAgICAgICAgIHdhdGNoYWJsZTogdHJ1ZVxuICAgICAgICAgIH0pKTtcblxuICAgICAgICAgIHZhciBlbGVtZW50ID0gRE9DVU1FTlQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdzdmcnKTtcblxuICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJzo6YmVmb3JlJykge1xuICAgICAgICAgICAgbm9kZS5pbnNlcnRCZWZvcmUoZWxlbWVudCwgbm9kZS5maXJzdENoaWxkKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlbGVtZW50Lm91dGVySFRNTCA9IF9hYnN0cmFjdC5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIHJldHVybiB0b0h0bWwoYSk7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUocGVuZGluZ0F0dHJpYnV0ZSk7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KS5jYXRjaChyZWplY3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZShub2RlKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChbcmVwbGFjZUZvclBvc2l0aW9uKG5vZGUsICc6OmJlZm9yZScpLCByZXBsYWNlRm9yUG9zaXRpb24obm9kZSwgJzo6YWZ0ZXInKV0pO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzYWJsZShub2RlKSB7XG4gIHJldHVybiBub2RlLnBhcmVudE5vZGUgIT09IGRvY3VtZW50LmhlYWQgJiYgIX5UQUdOQU1FU19UT19TS0lQX0ZPUl9QU0VVRE9FTEVNRU5UUy5pbmRleE9mKG5vZGUudGFnTmFtZS50b1VwcGVyQ2FzZSgpKSAmJiAhbm9kZS5nZXRBdHRyaWJ1dGUoREFUQV9GQV9QU0VVRE9fRUxFTUVOVCkgJiYgKCFub2RlLnBhcmVudE5vZGUgfHwgbm9kZS5wYXJlbnROb2RlLnRhZ05hbWUgIT09ICdzdmcnKTtcbn1cblxuZnVuY3Rpb24gc2VhcmNoUHNldWRvRWxlbWVudHMocm9vdCkge1xuICBpZiAoIUlTX0RPTSkgcmV0dXJuO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBvcGVyYXRpb25zID0gdG9BcnJheShyb290LnF1ZXJ5U2VsZWN0b3JBbGwoJyonKSkuZmlsdGVyKHByb2Nlc3NhYmxlKS5tYXAocmVwbGFjZSk7XG4gICAgdmFyIGVuZCA9IHBlcmYuYmVnaW4oJ3NlYXJjaFBzZXVkb0VsZW1lbnRzJyk7XG4gICAgZGlzYWJsZU9ic2VydmF0aW9uKCk7XG4gICAgUHJvbWlzZS5hbGwob3BlcmF0aW9ucykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBlbmQoKTtcbiAgICAgIGVuYWJsZU9ic2VydmF0aW9uKCk7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgZW5kKCk7XG4gICAgICBlbmFibGVPYnNlcnZhdGlvbigpO1xuICAgICAgcmVqZWN0KCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG52YXIgUHNldWRvRWxlbWVudHMgPSB7XG4gIGhvb2tzOiBmdW5jdGlvbiBob29rcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbXV0YXRpb25PYnNlcnZlckNhbGxiYWNrczogZnVuY3Rpb24gbXV0YXRpb25PYnNlcnZlckNhbGxiYWNrcyhhY2N1bXVsYXRvcikge1xuICAgICAgICBhY2N1bXVsYXRvci5wc2V1ZG9FbGVtZW50c0NhbGxiYWNrID0gc2VhcmNoUHNldWRvRWxlbWVudHM7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBwcm92aWRlczogZnVuY3Rpb24gcHJvdmlkZXMocHJvdmlkZXJzJCQxKSB7XG4gICAgcHJvdmlkZXJzJCQxLnBzZXVkb0VsZW1lbnRzMnN2ZyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgIHZhciBfcGFyYW1zJG5vZGUgPSBwYXJhbXMubm9kZSxcbiAgICAgICAgICBub2RlID0gX3BhcmFtcyRub2RlID09PSB2b2lkIDAgPyBET0NVTUVOVCA6IF9wYXJhbXMkbm9kZTtcblxuICAgICAgaWYgKGNvbmZpZy5zZWFyY2hQc2V1ZG9FbGVtZW50cykge1xuICAgICAgICBzZWFyY2hQc2V1ZG9FbGVtZW50cyhub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG52YXIgX3Vud2F0Y2hlZCA9IGZhbHNlO1xudmFyIE11dGF0aW9uT2JzZXJ2ZXIkMSA9IHtcbiAgbWl4b3V0OiBmdW5jdGlvbiBtaXhvdXQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRvbToge1xuICAgICAgICB1bndhdGNoOiBmdW5jdGlvbiB1bndhdGNoKCkge1xuICAgICAgICAgIGRpc2FibGVPYnNlcnZhdGlvbigpO1xuICAgICAgICAgIF91bndhdGNoZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgaG9va3M6IGZ1bmN0aW9uIGhvb2tzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBib290c3RyYXA6IGZ1bmN0aW9uIGJvb3RzdHJhcCgpIHtcbiAgICAgICAgb2JzZXJ2ZShjaGFpbkhvb2tzKCdtdXRhdGlvbk9ic2VydmVyQ2FsbGJhY2tzJywge30pKTtcbiAgICAgIH0sXG4gICAgICBub0F1dG86IGZ1bmN0aW9uIG5vQXV0bygpIHtcbiAgICAgICAgZGlzY29ubmVjdCgpO1xuICAgICAgfSxcbiAgICAgIHdhdGNoOiBmdW5jdGlvbiB3YXRjaChwYXJhbXMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVNdXRhdGlvbnNSb290ID0gcGFyYW1zLm9ic2VydmVNdXRhdGlvbnNSb290O1xuXG4gICAgICAgIGlmIChfdW53YXRjaGVkKSB7XG4gICAgICAgICAgZW5hYmxlT2JzZXJ2YXRpb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvYnNlcnZlKGNoYWluSG9va3MoJ211dGF0aW9uT2JzZXJ2ZXJDYWxsYmFja3MnLCB7XG4gICAgICAgICAgICBvYnNlcnZlTXV0YXRpb25zUm9vdDogb2JzZXJ2ZU11dGF0aW9uc1Jvb3RcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG52YXIgcGFyc2VUcmFuc2Zvcm1TdHJpbmcgPSBmdW5jdGlvbiBwYXJzZVRyYW5zZm9ybVN0cmluZyh0cmFuc2Zvcm1TdHJpbmcpIHtcbiAgdmFyIHRyYW5zZm9ybSA9IHtcbiAgICBzaXplOiAxNixcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgZmxpcFg6IGZhbHNlLFxuICAgIGZsaXBZOiBmYWxzZSxcbiAgICByb3RhdGU6IDBcbiAgfTtcbiAgcmV0dXJuIHRyYW5zZm9ybVN0cmluZy50b0xvd2VyQ2FzZSgpLnNwbGl0KCcgJykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG4pIHtcbiAgICB2YXIgcGFydHMgPSBuLnRvTG93ZXJDYXNlKCkuc3BsaXQoJy0nKTtcbiAgICB2YXIgZmlyc3QgPSBwYXJ0c1swXTtcbiAgICB2YXIgcmVzdCA9IHBhcnRzLnNsaWNlKDEpLmpvaW4oJy0nKTtcblxuICAgIGlmIChmaXJzdCAmJiByZXN0ID09PSAnaCcpIHtcbiAgICAgIGFjYy5mbGlwWCA9IHRydWU7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cblxuICAgIGlmIChmaXJzdCAmJiByZXN0ID09PSAndicpIHtcbiAgICAgIGFjYy5mbGlwWSA9IHRydWU7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cblxuICAgIHJlc3QgPSBwYXJzZUZsb2F0KHJlc3QpO1xuXG4gICAgaWYgKGlzTmFOKHJlc3QpKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cblxuICAgIHN3aXRjaCAoZmlyc3QpIHtcbiAgICAgIGNhc2UgJ2dyb3cnOlxuICAgICAgICBhY2Muc2l6ZSA9IGFjYy5zaXplICsgcmVzdDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3Nocmluayc6XG4gICAgICAgIGFjYy5zaXplID0gYWNjLnNpemUgLSByZXN0O1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgIGFjYy54ID0gYWNjLnggLSByZXN0O1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICBhY2MueCA9IGFjYy54ICsgcmVzdDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3VwJzpcbiAgICAgICAgYWNjLnkgPSBhY2MueSAtIHJlc3Q7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdkb3duJzpcbiAgICAgICAgYWNjLnkgPSBhY2MueSArIHJlc3Q7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdyb3RhdGUnOlxuICAgICAgICBhY2Mucm90YXRlID0gYWNjLnJvdGF0ZSArIHJlc3Q7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHRyYW5zZm9ybSk7XG59O1xudmFyIFBvd2VyVHJhbnNmb3JtcyA9IHtcbiAgbWl4b3V0OiBmdW5jdGlvbiBtaXhvdXQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcnNlOiB7XG4gICAgICAgIHRyYW5zZm9ybTogZnVuY3Rpb24gdHJhbnNmb3JtKHRyYW5zZm9ybVN0cmluZykge1xuICAgICAgICAgIHJldHVybiBwYXJzZVRyYW5zZm9ybVN0cmluZyh0cmFuc2Zvcm1TdHJpbmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgaG9va3M6IGZ1bmN0aW9uIGhvb2tzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXJzZU5vZGVBdHRyaWJ1dGVzOiBmdW5jdGlvbiBwYXJzZU5vZGVBdHRyaWJ1dGVzKGFjY3VtdWxhdG9yLCBub2RlKSB7XG4gICAgICAgIHZhciB0cmFuc2Zvcm1TdHJpbmcgPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1mYS10cmFuc2Zvcm0nKTtcblxuICAgICAgICBpZiAodHJhbnNmb3JtU3RyaW5nKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IudHJhbnNmb3JtID0gcGFyc2VUcmFuc2Zvcm1TdHJpbmcodHJhbnNmb3JtU3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBwcm92aWRlczogZnVuY3Rpb24gcHJvdmlkZXMocHJvdmlkZXJzKSB7XG4gICAgcHJvdmlkZXJzLmdlbmVyYXRlQWJzdHJhY3RUcmFuc2Zvcm1Hcm91cGluZyA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgbWFpbiA9IF9yZWYubWFpbixcbiAgICAgICAgICB0cmFuc2Zvcm0gPSBfcmVmLnRyYW5zZm9ybSxcbiAgICAgICAgICBjb250YWluZXJXaWR0aCA9IF9yZWYuY29udGFpbmVyV2lkdGgsXG4gICAgICAgICAgaWNvbldpZHRoID0gX3JlZi5pY29uV2lkdGg7XG4gICAgICB2YXIgb3V0ZXIgPSB7XG4gICAgICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUoXCIuY29uY2F0KGNvbnRhaW5lcldpZHRoIC8gMiwgXCIgMjU2KVwiKVxuICAgICAgfTtcbiAgICAgIHZhciBpbm5lclRyYW5zbGF0ZSA9IFwidHJhbnNsYXRlKFwiLmNvbmNhdCh0cmFuc2Zvcm0ueCAqIDMyLCBcIiwgXCIpLmNvbmNhdCh0cmFuc2Zvcm0ueSAqIDMyLCBcIikgXCIpO1xuICAgICAgdmFyIGlubmVyU2NhbGUgPSBcInNjYWxlKFwiLmNvbmNhdCh0cmFuc2Zvcm0uc2l6ZSAvIDE2ICogKHRyYW5zZm9ybS5mbGlwWCA/IC0xIDogMSksIFwiLCBcIikuY29uY2F0KHRyYW5zZm9ybS5zaXplIC8gMTYgKiAodHJhbnNmb3JtLmZsaXBZID8gLTEgOiAxKSwgXCIpIFwiKTtcbiAgICAgIHZhciBpbm5lclJvdGF0ZSA9IFwicm90YXRlKFwiLmNvbmNhdCh0cmFuc2Zvcm0ucm90YXRlLCBcIiAwIDApXCIpO1xuICAgICAgdmFyIGlubmVyID0ge1xuICAgICAgICB0cmFuc2Zvcm06IFwiXCIuY29uY2F0KGlubmVyVHJhbnNsYXRlLCBcIiBcIikuY29uY2F0KGlubmVyU2NhbGUsIFwiIFwiKS5jb25jYXQoaW5uZXJSb3RhdGUpXG4gICAgICB9O1xuICAgICAgdmFyIHBhdGggPSB7XG4gICAgICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUoXCIuY29uY2F0KGljb25XaWR0aCAvIDIgKiAtMSwgXCIgLTI1NilcIilcbiAgICAgIH07XG4gICAgICB2YXIgb3BlcmF0aW9ucyA9IHtcbiAgICAgICAgb3V0ZXI6IG91dGVyLFxuICAgICAgICBpbm5lcjogaW5uZXIsXG4gICAgICAgIHBhdGg6IHBhdGhcbiAgICAgIH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0YWc6ICdnJyxcbiAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoe30sIG9wZXJhdGlvbnMub3V0ZXIpLFxuICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICB0YWc6ICdnJyxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMih7fSwgb3BlcmF0aW9ucy5pbm5lciksXG4gICAgICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgICAgICB0YWc6IG1haW4uaWNvbi50YWcsXG4gICAgICAgICAgICBjaGlsZHJlbjogbWFpbi5pY29uLmNoaWxkcmVuLFxuICAgICAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIG1haW4uaWNvbi5hdHRyaWJ1dGVzKSwgb3BlcmF0aW9ucy5wYXRoKVxuICAgICAgICAgIH1dXG4gICAgICAgIH1dXG4gICAgICB9O1xuICAgIH07XG4gIH1cbn07XG5cbnZhciBBTExfU1BBQ0UgPSB7XG4gIHg6IDAsXG4gIHk6IDAsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnXG59O1xuXG5mdW5jdGlvbiBmaWxsQmxhY2soX2Fic3RyYWN0KSB7XG4gIHZhciBmb3JjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcblxuICBpZiAoX2Fic3RyYWN0LmF0dHJpYnV0ZXMgJiYgKF9hYnN0cmFjdC5hdHRyaWJ1dGVzLmZpbGwgfHwgZm9yY2UpKSB7XG4gICAgX2Fic3RyYWN0LmF0dHJpYnV0ZXMuZmlsbCA9ICdibGFjayc7XG4gIH1cblxuICByZXR1cm4gX2Fic3RyYWN0O1xufVxuXG5mdW5jdGlvbiBkZUdyb3VwKF9hYnN0cmFjdDIpIHtcbiAgaWYgKF9hYnN0cmFjdDIudGFnID09PSAnZycpIHtcbiAgICByZXR1cm4gX2Fic3RyYWN0Mi5jaGlsZHJlbjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gW19hYnN0cmFjdDJdO1xuICB9XG59XG5cbnZhciBNYXNrcyA9IHtcbiAgaG9va3M6IGZ1bmN0aW9uIGhvb2tzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXJzZU5vZGVBdHRyaWJ1dGVzOiBmdW5jdGlvbiBwYXJzZU5vZGVBdHRyaWJ1dGVzKGFjY3VtdWxhdG9yLCBub2RlKSB7XG4gICAgICAgIHZhciBtYXNrRGF0YSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWZhLW1hc2snKTtcbiAgICAgICAgdmFyIG1hc2sgPSAhbWFza0RhdGEgPyBlbXB0eUNhbm9uaWNhbEljb24oKSA6IGdldENhbm9uaWNhbEljb24obWFza0RhdGEuc3BsaXQoJyAnKS5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gaS50cmltKCk7XG4gICAgICAgIH0pKTtcblxuICAgICAgICBpZiAoIW1hc2sucHJlZml4KSB7XG4gICAgICAgICAgbWFzay5wcmVmaXggPSBnZXREZWZhdWx0VXNhYmxlUHJlZml4KCk7XG4gICAgICAgIH1cblxuICAgICAgICBhY2N1bXVsYXRvci5tYXNrID0gbWFzaztcbiAgICAgICAgYWNjdW11bGF0b3IubWFza0lkID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmEtbWFzay1pZCcpO1xuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgcHJvdmlkZXM6IGZ1bmN0aW9uIHByb3ZpZGVzKHByb3ZpZGVycykge1xuICAgIHByb3ZpZGVycy5nZW5lcmF0ZUFic3RyYWN0TWFzayA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgICAgIGF0dHJpYnV0ZXMgPSBfcmVmLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgbWFpbiA9IF9yZWYubWFpbixcbiAgICAgICAgICBtYXNrID0gX3JlZi5tYXNrLFxuICAgICAgICAgIGV4cGxpY2l0TWFza0lkID0gX3JlZi5tYXNrSWQsXG4gICAgICAgICAgdHJhbnNmb3JtID0gX3JlZi50cmFuc2Zvcm07XG4gICAgICB2YXIgbWFpbldpZHRoID0gbWFpbi53aWR0aCxcbiAgICAgICAgICBtYWluUGF0aCA9IG1haW4uaWNvbjtcbiAgICAgIHZhciBtYXNrV2lkdGggPSBtYXNrLndpZHRoLFxuICAgICAgICAgIG1hc2tQYXRoID0gbWFzay5pY29uO1xuICAgICAgdmFyIHRyYW5zID0gdHJhbnNmb3JtRm9yU3ZnKHtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICAgIGNvbnRhaW5lcldpZHRoOiBtYXNrV2lkdGgsXG4gICAgICAgIGljb25XaWR0aDogbWFpbldpZHRoXG4gICAgICB9KTtcbiAgICAgIHZhciBtYXNrUmVjdCA9IHtcbiAgICAgICAgdGFnOiAncmVjdCcsXG4gICAgICAgIGF0dHJpYnV0ZXM6IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBBTExfU1BBQ0UpLCB7fSwge1xuICAgICAgICAgIGZpbGw6ICd3aGl0ZSdcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgICB2YXIgbWFza0lubmVyR3JvdXBDaGlsZHJlbk1peGluID0gbWFpblBhdGguY2hpbGRyZW4gPyB7XG4gICAgICAgIGNoaWxkcmVuOiBtYWluUGF0aC5jaGlsZHJlbi5tYXAoZmlsbEJsYWNrKVxuICAgICAgfSA6IHt9O1xuICAgICAgdmFyIG1hc2tJbm5lckdyb3VwID0ge1xuICAgICAgICB0YWc6ICdnJyxcbiAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoe30sIHRyYW5zLmlubmVyKSxcbiAgICAgICAgY2hpbGRyZW46IFtmaWxsQmxhY2soX29iamVjdFNwcmVhZDIoe1xuICAgICAgICAgIHRhZzogbWFpblBhdGgudGFnLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBtYWluUGF0aC5hdHRyaWJ1dGVzKSwgdHJhbnMucGF0aClcbiAgICAgICAgfSwgbWFza0lubmVyR3JvdXBDaGlsZHJlbk1peGluKSldXG4gICAgICB9O1xuICAgICAgdmFyIG1hc2tPdXRlckdyb3VwID0ge1xuICAgICAgICB0YWc6ICdnJyxcbiAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoe30sIHRyYW5zLm91dGVyKSxcbiAgICAgICAgY2hpbGRyZW46IFttYXNrSW5uZXJHcm91cF1cbiAgICAgIH07XG4gICAgICB2YXIgbWFza0lkID0gXCJtYXNrLVwiLmNvbmNhdChleHBsaWNpdE1hc2tJZCB8fCBuZXh0VW5pcXVlSWQoKSk7XG4gICAgICB2YXIgY2xpcElkID0gXCJjbGlwLVwiLmNvbmNhdChleHBsaWNpdE1hc2tJZCB8fCBuZXh0VW5pcXVlSWQoKSk7XG4gICAgICB2YXIgbWFza1RhZyA9IHtcbiAgICAgICAgdGFnOiAnbWFzaycsXG4gICAgICAgIGF0dHJpYnV0ZXM6IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBBTExfU1BBQ0UpLCB7fSwge1xuICAgICAgICAgIGlkOiBtYXNrSWQsXG4gICAgICAgICAgbWFza1VuaXRzOiAndXNlclNwYWNlT25Vc2UnLFxuICAgICAgICAgIG1hc2tDb250ZW50VW5pdHM6ICd1c2VyU3BhY2VPblVzZSdcbiAgICAgICAgfSksXG4gICAgICAgIGNoaWxkcmVuOiBbbWFza1JlY3QsIG1hc2tPdXRlckdyb3VwXVxuICAgICAgfTtcbiAgICAgIHZhciBkZWZzID0ge1xuICAgICAgICB0YWc6ICdkZWZzJyxcbiAgICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgICAgdGFnOiAnY2xpcFBhdGgnLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgIGlkOiBjbGlwSWRcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNoaWxkcmVuOiBkZUdyb3VwKG1hc2tQYXRoKVxuICAgICAgICB9LCBtYXNrVGFnXVxuICAgICAgfTtcbiAgICAgIGNoaWxkcmVuLnB1c2goZGVmcywge1xuICAgICAgICB0YWc6ICdyZWN0JyxcbiAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoe1xuICAgICAgICAgIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAgICAgICAgICdjbGlwLXBhdGgnOiBcInVybCgjXCIuY29uY2F0KGNsaXBJZCwgXCIpXCIpLFxuICAgICAgICAgIG1hc2s6IFwidXJsKCNcIi5jb25jYXQobWFza0lkLCBcIilcIilcbiAgICAgICAgfSwgQUxMX1NQQUNFKVxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXNcbiAgICAgIH07XG4gICAgfTtcbiAgfVxufTtcblxudmFyIE1pc3NpbmdJY29uSW5kaWNhdG9yID0ge1xuICBwcm92aWRlczogZnVuY3Rpb24gcHJvdmlkZXMocHJvdmlkZXJzKSB7XG4gICAgdmFyIHJlZHVjZU1vdGlvbiA9IGZhbHNlO1xuXG4gICAgaWYgKFdJTkRPVy5tYXRjaE1lZGlhKSB7XG4gICAgICByZWR1Y2VNb3Rpb24gPSBXSU5ET1cubWF0Y2hNZWRpYSgnKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSknKS5tYXRjaGVzO1xuICAgIH1cblxuICAgIHByb3ZpZGVycy5taXNzaW5nSWNvbkFic3RyYWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGdDaGlsZHJlbiA9IFtdO1xuICAgICAgdmFyIEZJTEwgPSB7XG4gICAgICAgIGZpbGw6ICdjdXJyZW50Q29sb3InXG4gICAgICB9O1xuICAgICAgdmFyIEFOSU1BVElPTl9CQVNFID0ge1xuICAgICAgICBhdHRyaWJ1dGVUeXBlOiAnWE1MJyxcbiAgICAgICAgcmVwZWF0Q291bnQ6ICdpbmRlZmluaXRlJyxcbiAgICAgICAgZHVyOiAnMnMnXG4gICAgICB9OyAvLyBSaW5nXG5cbiAgICAgIGdDaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgdGFnOiAncGF0aCcsXG4gICAgICAgIGF0dHJpYnV0ZXM6IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBGSUxMKSwge30sIHtcbiAgICAgICAgICBkOiAnTTE1Ni41LDQ0Ny43bC0xMi42LDI5LjVjLTE4LjctOS41LTM1LjktMjEuMi01MS41LTM0LjlsMjIuNy0yMi43QzEyNy42LDQzMC41LDE0MS41LDQ0MCwxNTYuNSw0NDcuN3ogTTQwLjYsMjcySDguNSBjMS40LDIxLjIsNS40LDQxLjcsMTEuNyw2MS4xTDUwLDMyMS4yQzQ1LjEsMzA1LjUsNDEuOCwyODksNDAuNiwyNzJ6IE00MC42LDI0MGMxLjQtMTguOCw1LjItMzcsMTEuMS01NC4xbC0yOS41LTEyLjYgQzE0LjcsMTk0LjMsMTAsMjE2LjcsOC41LDI0MEg0MC42eiBNNjQuMywxNTYuNWM3LjgtMTQuOSwxNy4yLTI4LjgsMjguMS00MS41TDY5LjcsOTIuM2MtMTMuNywxNS42LTI1LjUsMzIuOC0zNC45LDUxLjUgTDY0LjMsMTU2LjV6IE0zOTcsNDE5LjZjLTEzLjksMTItMjkuNCwyMi4zLTQ2LjEsMzAuNGwxMS45LDI5LjhjMjAuNy05LjksMzkuOC0yMi42LDU2LjktMzcuNkwzOTcsNDE5LjZ6IE0xMTUsOTIuNCBjMTMuOS0xMiwyOS40LTIyLjMsNDYuMS0zMC40bC0xMS45LTI5LjhjLTIwLjcsOS45LTM5LjgsMjIuNi01Ni44LDM3LjZMMTE1LDkyLjR6IE00NDcuNywzNTUuNWMtNy44LDE0LjktMTcuMiwyOC44LTI4LjEsNDEuNSBsMjIuNywyMi43YzEzLjctMTUuNiwyNS41LTMyLjksMzQuOS01MS41TDQ0Ny43LDM1NS41eiBNNDcxLjQsMjcyYy0xLjQsMTguOC01LjIsMzctMTEuMSw1NC4xbDI5LjUsMTIuNiBjNy41LTIxLjEsMTIuMi00My41LDEzLjYtNjYuOEg0NzEuNHogTTMyMS4yLDQ2MmMtMTUuNyw1LTMyLjIsOC4yLTQ5LjIsOS40djMyLjFjMjEuMi0xLjQsNDEuNy01LjQsNjEuMS0xMS43TDMyMS4yLDQ2MnogTTI0MCw0NzEuNGMtMTguOC0xLjQtMzctNS4yLTU0LjEtMTEuMWwtMTIuNiwyOS41YzIxLjEsNy41LDQzLjUsMTIuMiw2Ni44LDEzLjZWNDcxLjR6IE00NjIsMTkwLjhjNSwxNS43LDguMiwzMi4yLDkuNCw0OS4yaDMyLjEgYy0xLjQtMjEuMi01LjQtNDEuNy0xMS43LTYxLjFMNDYyLDE5MC44eiBNOTIuNCwzOTdjLTEyLTEzLjktMjIuMy0yOS40LTMwLjQtNDYuMWwtMjkuOCwxMS45YzkuOSwyMC43LDIyLjYsMzkuOCwzNy42LDU2LjkgTDkyLjQsMzk3eiBNMjcyLDQwLjZjMTguOCwxLjQsMzYuOSw1LjIsNTQuMSwxMS4xbDEyLjYtMjkuNUMzMTcuNywxNC43LDI5NS4zLDEwLDI3Miw4LjVWNDAuNnogTTE5MC44LDUwIGMxNS43LTUsMzIuMi04LjIsNDkuMi05LjRWOC41Yy0yMS4yLDEuNC00MS43LDUuNC02MS4xLDExLjdMMTkwLjgsNTB6IE00NDIuMyw5Mi4zTDQxOS42LDExNWMxMiwxMy45LDIyLjMsMjkuNCwzMC41LDQ2LjEgbDI5LjgtMTEuOUM0NzAsMTI4LjUsNDU3LjMsMTA5LjQsNDQyLjMsOTIuM3ogTTM5Nyw5Mi40bDIyLjctMjIuN2MtMTUuNi0xMy43LTMyLjgtMjUuNS01MS41LTM0LjlsLTEyLjYsMjkuNSBDMzcwLjQsNzIuMSwzODQuNCw4MS41LDM5Nyw5Mi40eidcbiAgICAgICAgfSlcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgT1BBQ0lUWV9BTklNQVRFID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIEFOSU1BVElPTl9CQVNFKSwge30sIHtcbiAgICAgICAgYXR0cmlidXRlTmFtZTogJ29wYWNpdHknXG4gICAgICB9KTtcblxuICAgICAgdmFyIGRvdCA9IHtcbiAgICAgICAgdGFnOiAnY2lyY2xlJyxcbiAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIEZJTEwpLCB7fSwge1xuICAgICAgICAgIGN4OiAnMjU2JyxcbiAgICAgICAgICBjeTogJzM2NCcsXG4gICAgICAgICAgcjogJzI4J1xuICAgICAgICB9KSxcbiAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICB9O1xuXG4gICAgICBpZiAoIXJlZHVjZU1vdGlvbikge1xuICAgICAgICBkb3QuY2hpbGRyZW4ucHVzaCh7XG4gICAgICAgICAgdGFnOiAnYW5pbWF0ZScsXG4gICAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIEFOSU1BVElPTl9CQVNFKSwge30sIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdyJyxcbiAgICAgICAgICAgIHZhbHVlczogJzI4OzE0OzI4OzI4OzE0OzI4OydcbiAgICAgICAgICB9KVxuICAgICAgICB9LCB7XG4gICAgICAgICAgdGFnOiAnYW5pbWF0ZScsXG4gICAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIE9QQUNJVFlfQU5JTUFURSksIHt9LCB7XG4gICAgICAgICAgICB2YWx1ZXM6ICcxOzA7MTsxOzA7MTsnXG4gICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGdDaGlsZHJlbi5wdXNoKGRvdCk7XG4gICAgICBnQ2hpbGRyZW4ucHVzaCh7XG4gICAgICAgIHRhZzogJ3BhdGgnLFxuICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgRklMTCksIHt9LCB7XG4gICAgICAgICAgb3BhY2l0eTogJzEnLFxuICAgICAgICAgIGQ6ICdNMjYzLjcsMzEyaC0xNmMtNi42LDAtMTItNS40LTEyLTEyYzAtNzEsNzcuNC02My45LDc3LjQtMTA3LjhjMC0yMC0xNy44LTQwLjItNTcuNC00MC4yYy0yOS4xLDAtNDQuMyw5LjYtNTkuMiwyOC43IGMtMy45LDUtMTEuMSw2LTE2LjIsMi40bC0xMy4xLTkuMmMtNS42LTMuOS02LjktMTEuOC0yLjYtMTcuMmMyMS4yLTI3LjIsNDYuNC00NC43LDkxLjItNDQuN2M1Mi4zLDAsOTcuNCwyOS44LDk3LjQsODAuMiBjMCw2Ny42LTc3LjQsNjMuNS03Ny40LDEwNy44QzI3NS43LDMwNi42LDI3MC4zLDMxMiwyNjMuNywzMTJ6J1xuICAgICAgICB9KSxcbiAgICAgICAgY2hpbGRyZW46IHJlZHVjZU1vdGlvbiA/IFtdIDogW3tcbiAgICAgICAgICB0YWc6ICdhbmltYXRlJyxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgT1BBQ0lUWV9BTklNQVRFKSwge30sIHtcbiAgICAgICAgICAgIHZhbHVlczogJzE7MDswOzA7MDsxOydcbiAgICAgICAgICB9KVxuICAgICAgICB9XVxuICAgICAgfSk7XG5cbiAgICAgIGlmICghcmVkdWNlTW90aW9uKSB7XG4gICAgICAgIC8vIEV4Y2xhbWF0aW9uXG4gICAgICAgIGdDaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgICB0YWc6ICdwYXRoJyxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgRklMTCksIHt9LCB7XG4gICAgICAgICAgICBvcGFjaXR5OiAnMCcsXG4gICAgICAgICAgICBkOiAnTTIzMi41LDEzNC41bDcsMTY4YzAuMyw2LjQsNS42LDExLjUsMTIsMTEuNWg5YzYuNCwwLDExLjctNS4xLDEyLTExLjVsNy0xNjhjMC4zLTYuOC01LjItMTIuNS0xMi0xMi41aC0yMyBDMjM3LjcsMTIyLDIzMi4yLDEyNy43LDIzMi41LDEzNC41eidcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICAgIHRhZzogJ2FuaW1hdGUnLFxuICAgICAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIE9QQUNJVFlfQU5JTUFURSksIHt9LCB7XG4gICAgICAgICAgICAgIHZhbHVlczogJzA7MDsxOzE7MDswOydcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfV1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRhZzogJ2cnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgJ2NsYXNzJzogJ21pc3NpbmcnXG4gICAgICAgIH0sXG4gICAgICAgIGNoaWxkcmVuOiBnQ2hpbGRyZW5cbiAgICAgIH07XG4gICAgfTtcbiAgfVxufTtcblxudmFyIFN2Z1N5bWJvbHMgPSB7XG4gIGhvb2tzOiBmdW5jdGlvbiBob29rcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFyc2VOb2RlQXR0cmlidXRlczogZnVuY3Rpb24gcGFyc2VOb2RlQXR0cmlidXRlcyhhY2N1bXVsYXRvciwgbm9kZSkge1xuICAgICAgICB2YXIgc3ltYm9sRGF0YSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWZhLXN5bWJvbCcpO1xuICAgICAgICB2YXIgc3ltYm9sID0gc3ltYm9sRGF0YSA9PT0gbnVsbCA/IGZhbHNlIDogc3ltYm9sRGF0YSA9PT0gJycgPyB0cnVlIDogc3ltYm9sRGF0YTtcbiAgICAgICAgYWNjdW11bGF0b3JbJ3N5bWJvbCddID0gc3ltYm9sO1xuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxudmFyIHBsdWdpbnMgPSBbSW5qZWN0Q1NTLCBSZXBsYWNlRWxlbWVudHMsIExheWVycywgTGF5ZXJzQ291bnRlciwgTGF5ZXJzVGV4dCwgUHNldWRvRWxlbWVudHMsIE11dGF0aW9uT2JzZXJ2ZXIkMSwgUG93ZXJUcmFuc2Zvcm1zLCBNYXNrcywgTWlzc2luZ0ljb25JbmRpY2F0b3IsIFN2Z1N5bWJvbHNdO1xuXG5yZWdpc3RlclBsdWdpbnMocGx1Z2lucywge1xuICBtaXhvdXRzVG86IGFwaVxufSk7XG52YXIgbm9BdXRvJDEgPSBhcGkubm9BdXRvO1xudmFyIGNvbmZpZyQxID0gYXBpLmNvbmZpZztcbnZhciBsaWJyYXJ5JDEgPSBhcGkubGlicmFyeTtcbnZhciBkb20kMSA9IGFwaS5kb207XG52YXIgcGFyc2UkMSA9IGFwaS5wYXJzZTtcbnZhciBmaW5kSWNvbkRlZmluaXRpb24kMSA9IGFwaS5maW5kSWNvbkRlZmluaXRpb247XG52YXIgdG9IdG1sJDEgPSBhcGkudG9IdG1sO1xudmFyIGljb24gPSBhcGkuaWNvbjtcbnZhciBsYXllciA9IGFwaS5sYXllcjtcbnZhciB0ZXh0ID0gYXBpLnRleHQ7XG52YXIgY291bnRlciA9IGFwaS5jb3VudGVyO1xuXG5leHBvcnQgeyBub0F1dG8kMSBhcyBub0F1dG8sIGNvbmZpZyQxIGFzIGNvbmZpZywgbGlicmFyeSQxIGFzIGxpYnJhcnksIGRvbSQxIGFzIGRvbSwgcGFyc2UkMSBhcyBwYXJzZSwgZmluZEljb25EZWZpbml0aW9uJDEgYXMgZmluZEljb25EZWZpbml0aW9uLCB0b0h0bWwkMSBhcyB0b0h0bWwsIGljb24sIGxheWVyLCB0ZXh0LCBjb3VudGVyLCBhcGkgfTtcbiJdLCJuYW1lcyI6WyJvd25LZXlzIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJrZXlzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkMiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJmb3JFYWNoIiwia2V5IiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX3dyYXBSZWdFeHAiLCJyZSIsImdyb3VwcyIsIkJhYmVsUmVnRXhwIiwiX3N1cGVyIiwiUmVnRXhwIiwiX2dyb3VwcyIsIldlYWtNYXAiLCJmbGFncyIsIl90aGlzIiwic2V0IiwiZ2V0IiwiX3NldFByb3RvdHlwZU9mIiwiYnVpbGRHcm91cHMiLCJyZXN1bHQiLCJnIiwicmVkdWNlIiwibmFtZSIsImNyZWF0ZSIsIl9pbmhlcml0cyIsImV4ZWMiLCJzdHIiLCJjYWxsIiwicmVwbGFjZSIsInN1YnN0aXR1dGlvbiIsIl8iLCJhcmdzIiwic2xpY2UiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInZhbHVlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwibyIsInAiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJBcnJheSIsImlzQXJyYXkiLCJfYXJyYXlMaWtlVG9BcnJheSIsIml0ZXIiLCJmcm9tIiwiX2kiLCJfYXJyIiwiX24iLCJfZCIsIl9zIiwiX2UiLCJuZXh0IiwiZG9uZSIsImVyciIsIm1pbkxlbiIsIm4iLCJ0b1N0cmluZyIsInRlc3QiLCJsZW4iLCJhcnIyIiwibm9vcCIsIl9XSU5ET1ciLCJfRE9DVU1FTlQiLCJfTVVUQVRJT05fT0JTRVJWRVIiLCJfUEVSRk9STUFOQ0UiLCJtYXJrIiwibWVhc3VyZSIsIndpbmRvdyIsImRvY3VtZW50IiwiTXV0YXRpb25PYnNlcnZlciIsInBlcmZvcm1hbmNlIiwiZSIsIl9yZWYiLCJuYXZpZ2F0b3IiLCJfcmVmJHVzZXJBZ2VudCIsInVzZXJBZ2VudCIsIldJTkRPVyIsIkRPQ1VNRU5UIiwiTVVUQVRJT05fT0JTRVJWRVIiLCJQRVJGT1JNQU5DRSIsIklTX0JST1dTRVIiLCJJU19ET00iLCJkb2N1bWVudEVsZW1lbnQiLCJoZWFkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNyZWF0ZUVsZW1lbnQiLCJJU19JRSIsImluZGV4T2YiLCJfZmFtaWx5UHJveHkiLCJfZmFtaWx5UHJveHkyIiwiX2ZhbWlseVByb3h5MyIsIl9mYW1pbHlQcm94eTQiLCJfZmFtaWx5UHJveHk1IiwiTkFNRVNQQUNFX0lERU5USUZJRVIiLCJVTklUU19JTl9HUklEIiwiREVGQVVMVF9DU1NfUFJFRklYIiwiREVGQVVMVF9SRVBMQUNFTUVOVF9DTEFTUyIsIkRBVEFfRkFfSTJTVkciLCJEQVRBX0ZBX1BTRVVET19FTEVNRU5UIiwiREFUQV9GQV9QU0VVRE9fRUxFTUVOVF9QRU5ESU5HIiwiREFUQV9QUkVGSVgiLCJEQVRBX0lDT04iLCJIVE1MX0NMQVNTX0kyU1ZHX0JBU0VfQ0xBU1MiLCJNVVRBVElPTl9BUFBST0FDSF9BU1lOQyIsIlRBR05BTUVTX1RPX1NLSVBfRk9SX1BTRVVET0VMRU1FTlRTIiwiUFJPRFVDVElPTiIsInByb2Nlc3MiLCJGQU1JTFlfQ0xBU1NJQyIsIkZBTUlMWV9TSEFSUCIsIkZBTUlMSUVTIiwiZmFtaWx5UHJveHkiLCJQcm94eSIsInByb3AiLCJQUkVGSVhfVE9fU1RZTEUiLCJTVFlMRV9UT19QUkVGSVgiLCJQUkVGSVhfVE9fTE9OR19TVFlMRSIsIkxPTkdfU1RZTEVfVE9fUFJFRklYIiwiSUNPTl9TRUxFQ1RJT05fU1lOVEFYX1BBVFRFUk4iLCJMQVlFUlNfVEVYVF9DTEFTU05BTUUiLCJGT05UX0ZBTUlMWV9QQVRURVJOIiwiRk9OVF9XRUlHSFRfVE9fUFJFRklYIiwib25lVG9UZW4iLCJvbmVUb1R3ZW50eSIsImNvbmNhdCIsIkFUVFJJQlVURVNfV0FUQ0hFRF9GT1JfTVVUQVRJT04iLCJEVU9UT05FX0NMQVNTRVMiLCJHUk9VUCIsIlNXQVBfT1BBQ0lUWSIsIlBSSU1BUlkiLCJTRUNPTkRBUlkiLCJwcmVmaXhlcyIsIlNldCIsIm1hcCIsImFkZCIsImJpbmQiLCJSRVNFUlZFRF9DTEFTU0VTIiwiaW5pdGlhbCIsIkZvbnRBd2Vzb21lQ29uZmlnIiwiZ2V0QXR0ckNvbmZpZyIsImF0dHIiLCJlbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsImNvZXJjZSIsInZhbCIsImF0dHJzIiwiX3JlZjIiLCJ1bmRlZmluZWQiLCJfZGVmYXVsdCIsInN0eWxlRGVmYXVsdCIsImZhbWlseURlZmF1bHQiLCJjc3NQcmVmaXgiLCJyZXBsYWNlbWVudENsYXNzIiwiYXV0b1JlcGxhY2VTdmciLCJhdXRvQWRkQ3NzIiwiYXV0b0ExMXkiLCJzZWFyY2hQc2V1ZG9FbGVtZW50cyIsIm9ic2VydmVNdXRhdGlvbnMiLCJtdXRhdGVBcHByb2FjaCIsImtlZXBPcmlnaW5hbFNvdXJjZSIsIm1lYXN1cmVQZXJmb3JtYW5jZSIsInNob3dNaXNzaW5nSWNvbnMiLCJmYW1pbHlQcmVmaXgiLCJfY29uZmlnIiwiY29uZmlnIiwiX29uQ2hhbmdlQ2IiLCJjYiIsIm9uQ2hhbmdlIiwic3BsaWNlIiwiZCIsIm1lYW5pbmdsZXNzVHJhbnNmb3JtIiwic2l6ZSIsIngiLCJ5Iiwicm90YXRlIiwiZmxpcFgiLCJmbGlwWSIsImluc2VydENzcyIsImNzcyIsInN0eWxlIiwic2V0QXR0cmlidXRlIiwiaW5uZXJIVE1MIiwiaGVhZENoaWxkcmVuIiwiY2hpbGROb2RlcyIsImJlZm9yZUNoaWxkIiwiY2hpbGQiLCJ0YWdOYW1lIiwidG9VcHBlckNhc2UiLCJpbnNlcnRCZWZvcmUiLCJpZFBvb2wiLCJuZXh0VW5pcXVlSWQiLCJpZCIsIk1hdGgiLCJyYW5kb20iLCJ0b0FycmF5IiwiYXJyYXkiLCJjbGFzc0FycmF5Iiwibm9kZSIsImNsYXNzTGlzdCIsInNwbGl0IiwiaHRtbEVzY2FwZSIsImpvaW5BdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsImFjYyIsImF0dHJpYnV0ZU5hbWUiLCJ0cmltIiwiam9pblN0eWxlcyIsInN0eWxlcyIsInN0eWxlTmFtZSIsInRyYW5zZm9ybUlzTWVhbmluZ2Z1bCIsInRyYW5zZm9ybSIsInRyYW5zZm9ybUZvclN2ZyIsImNvbnRhaW5lcldpZHRoIiwiaWNvbldpZHRoIiwib3V0ZXIiLCJpbm5lclRyYW5zbGF0ZSIsImlubmVyU2NhbGUiLCJpbm5lclJvdGF0ZSIsImlubmVyIiwicGF0aCIsInRyYW5zZm9ybUZvckNzcyIsIl9yZWYyJHdpZHRoIiwid2lkdGgiLCJfcmVmMiRoZWlnaHQiLCJoZWlnaHQiLCJfcmVmMiRzdGFydENlbnRlcmVkIiwic3RhcnRDZW50ZXJlZCIsImJhc2VTdHlsZXMiLCJkY3AiLCJkcmMiLCJmcCIsInJjIiwicyIsImRQYXR0IiwiY3VzdG9tUHJvcFBhdHQiLCJyUGF0dCIsIl9jc3NJbnNlcnRlZCIsImVuc3VyZUNzcyIsIkluamVjdENTUyIsIm1peG91dCIsImRvbSIsImhvb2tzIiwiYmVmb3JlRE9NRWxlbWVudENyZWF0aW9uIiwiYmVmb3JlSTJzdmciLCJ3Iiwic2hpbXMiLCJuYW1lc3BhY2UiLCJmdW5jdGlvbnMiLCJsaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJsb2FkZWQiLCJmbiIsImRvU2Nyb2xsIiwicmVhZHlTdGF0ZSIsImRvbXJlYWR5Iiwic2V0VGltZW91dCIsInRvSHRtbCIsImFic3RyYWN0Tm9kZXMiLCJ0YWciLCJfYWJzdHJhY3ROb2RlcyRhdHRyaWIiLCJfYWJzdHJhY3ROb2RlcyRjaGlsZHIiLCJjaGlsZHJlbiIsImpvaW4iLCJpY29uRnJvbU1hcHBpbmciLCJtYXBwaW5nIiwicHJlZml4IiwiaWNvbk5hbWUiLCJpY29uIiwiYmluZEludGVybmFsNCIsImZ1bmMiLCJ0aGlzQ29udGV4dCIsImEiLCJiIiwiYyIsImZhc3RSZWR1Y2VPYmplY3QiLCJzdWJqZWN0IiwiaW5pdGlhbFZhbHVlIiwidWNzMmRlY29kZSIsInN0cmluZyIsIm91dHB1dCIsImNvdW50ZXIiLCJjaGFyQ29kZUF0IiwiZXh0cmEiLCJ0b0hleCIsInVuaWNvZGUiLCJkZWNvZGVkIiwiY29kZVBvaW50QXQiLCJpbmRleCIsImZpcnN0Iiwic2Vjb25kIiwibm9ybWFsaXplSWNvbnMiLCJpY29ucyIsImV4cGFuZGVkIiwiZGVmaW5lSWNvbnMiLCJwYXJhbXMiLCJfcGFyYW1zJHNraXBIb29rcyIsInNraXBIb29rcyIsIm5vcm1hbGl6ZWQiLCJhZGRQYWNrIiwiZHVvdG9uZVBhdGhSZSIsImQxIiwiZDIiLCJjbHMxIiwiY2xzMiIsIl9MT05HX1NUWUxFIiwiX1BSRUZJWEVTIiwiX1BSRUZJWEVTX0ZPUl9GQU1JTFkiLCJMT05HX1NUWUxFIiwidmFsdWVzIiwiX2RlZmF1bHRVc2FibGVQcmVmaXgiLCJfYnlVbmljb2RlIiwiX2J5TGlnYXR1cmUiLCJfYnlPbGROYW1lIiwiX2J5T2xkVW5pY29kZSIsIl9ieUFsaWFzIiwiUFJFRklYRVMiLCJpc1Jlc2VydmVkIiwiZ2V0SWNvbk5hbWUiLCJjbHMiLCJwYXJ0cyIsImJ1aWxkIiwibG9va3VwIiwicmVkdWNlciIsImFsaWFzZXMiLCJhbGlhcyIsImhhc1JlZ3VsYXIiLCJhdXRvRmV0Y2hTdmciLCJzaGltTG9va3VwcyIsInNoaW0iLCJtYXliZU5hbWVNYXliZVVuaWNvZGUiLCJuYW1lcyIsInVuaWNvZGVzIiwiZ2V0Q2Fub25pY2FsUHJlZml4IiwiZmFtaWx5IiwiYnlVbmljb2RlIiwiYnlMaWdhdHVyZSIsImxpZ2F0dXJlIiwiYnlBbGlhcyIsImJ5T2xkTmFtZSIsImJ5T2xkVW5pY29kZSIsIm9sZFVuaWNvZGUiLCJuZXdVbmljb2RlIiwiZ2V0RGVmYXVsdFVzYWJsZVByZWZpeCIsImVtcHR5Q2Fub25pY2FsSWNvbiIsInJlc3QiLCJzdHlsZU9yUHJlZml4IiwiX3BhcmFtcyRmYW1pbHkiLCJkZWZpbmVkIiwiUFJFRklYRVNfRk9SX0ZBTUlMWSIsImdldENhbm9uaWNhbEljb24iLCJfZmFtUHJvcHMiLCJfcGFyYW1zJHNraXBMb29rdXBzIiwic2tpcExvb2t1cHMiLCJmYW1Qcm9wcyIsImdpdmVuUHJlZml4IiwiaW5jbHVkZXMiLCJzb21lIiwidiIsImNhbm9uaWNhbCIsImFsaWFzSWNvbk5hbWUiLCJMaWJyYXJ5IiwiZGVmaW5pdGlvbnMiLCJfbGVuIiwiX2tleSIsImFkZGl0aW9ucyIsIl9wdWxsRGVmaW5pdGlvbnMiLCJsb25nUHJlZml4IiwicmVzZXQiLCJkZWZpbml0aW9uIiwiX25vcm1hbGl6ZWQka2V5IiwiX3BsdWdpbnMiLCJfaG9va3MiLCJwcm92aWRlcnMiLCJkZWZhdWx0UHJvdmlkZXJLZXlzIiwicmVnaXN0ZXJQbHVnaW5zIiwibmV4dFBsdWdpbnMiLCJtaXhvdXRzVG8iLCJrIiwicGx1Z2luIiwidGsiLCJzayIsImhvb2siLCJwcm92aWRlcyIsImNoYWluSG9va3MiLCJhY2N1bXVsYXRvciIsImhvb2tGbnMiLCJob29rRm4iLCJjYWxsSG9va3MiLCJfbGVuMiIsIl9rZXkyIiwiY2FsbFByb3ZpZGVkIiwiZmluZEljb25EZWZpbml0aW9uIiwiaWNvbkxvb2t1cCIsImxpYnJhcnkiLCJub0F1dG8iLCJpMnN2ZyIsIlByb21pc2UiLCJyZWplY3QiLCJ3YXRjaCIsImF1dG9SZXBsYWNlU3ZnUm9vdCIsImF1dG9SZXBsYWNlIiwicGFyc2UiLCJfaWNvbiIsIm1hdGNoIiwiY2Fub25pY2FsSWNvbiIsIl9wcmVmaXgiLCJhcGkiLCJfcGFyYW1zJGF1dG9SZXBsYWNlU3YiLCJkb21WYXJpYW50cyIsImFic3RyYWN0Q3JlYXRvciIsImFic3RyYWN0IiwiY29udGFpbmVyIiwiaHRtbCIsImFzSWNvbiIsIm1haW4iLCJtYXNrIiwiZm91bmQiLCJvZmZzZXQiLCJhc1N5bWJvbCIsInN5bWJvbCIsIm1ha2VJbmxpbmVTdmdBYnN0cmFjdCIsIl9wYXJhbXMkaWNvbnMiLCJ0aXRsZSIsIm1hc2tJZCIsInRpdGxlSWQiLCJfcGFyYW1zJHdhdGNoYWJsZSIsIndhdGNoYWJsZSIsImlzVXBsb2FkZWRJY29uIiwiYXR0ckNsYXNzIiwiY2xhc3NlcyIsImNvbnRlbnQiLCJyb2xlIiwidXBsb2FkZWRJY29uV2lkdGhTdHlsZSIsIm1ha2VMYXllcnNUZXh0QWJzdHJhY3QiLCJfcGFyYW1zJHdhdGNoYWJsZTIiLCJzdHlsZVN0cmluZyIsImNsYXNzIiwibWFrZUxheWVyc0NvdW50ZXJBYnN0cmFjdCIsInN0eWxlcyQxIiwiYXNGb3VuZEljb24iLCJfaWNvbiRzbGljZSIsIl9pY29uJHNsaWNlMiIsInZlY3RvckRhdGEiLCJmaWxsIiwibWlzc2luZ0ljb25SZXNvbHV0aW9uTWl4aW4iLCJtYXliZU5vdGlmeU1pc3NpbmciLCJjb25zb2xlIiwiZXJyb3IiLCJmaW5kSWNvbiIsInJlc29sdmUiLCJub29wJDEiLCJwcmVhbWJsZSIsImJlZ2luIiwiZW5kIiwicGVyZiIsIm5vb3AkMiIsImlzV2F0Y2hlZCIsImhhc1ByZWZpeEFuZEljb24iLCJoYXNCZWVuUmVwbGFjZWQiLCJjb250YWlucyIsImdldE11dGF0b3IiLCJtdXRhdG9ycyIsIm11dGF0b3IiLCJjcmVhdGVFbGVtZW50TlMiLCJjb252ZXJ0U1ZHIiwiYWJzdHJhY3RPYmoiLCJfcGFyYW1zJGNlRm4iLCJjZUZuIiwiY3JlYXRlVGV4dE5vZGUiLCJhcHBlbmRDaGlsZCIsIm5vZGVBc0NvbW1lbnQiLCJjb21tZW50Iiwib3V0ZXJIVE1MIiwibXV0YXRpb24iLCJwYXJlbnROb2RlIiwiX2Fic3RyYWN0IiwiY3JlYXRlQ29tbWVudCIsInJlcGxhY2VDaGlsZCIsInJlbW92ZSIsIm5lc3QiLCJfYWJzdHJhY3QyIiwiZm9yU3ZnIiwic3BsaXRDbGFzc2VzIiwidG9TdmciLCJ0b05vZGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJuZXdJbm5lckhUTUwiLCJwZXJmb3JtT3BlcmF0aW9uU3luYyIsIm9wIiwicGVyZm9ybSIsIm11dGF0aW9ucyIsImNhbGxiYWNrIiwiY2FsbGJhY2tGdW5jdGlvbiIsImZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZGlzYWJsZWQiLCJkaXNhYmxlT2JzZXJ2YXRpb24iLCJlbmFibGVPYnNlcnZhdGlvbiIsIm1vIiwib2JzZXJ2ZSIsIm9wdGlvbnMiLCJfb3B0aW9ucyR0cmVlQ2FsbGJhY2siLCJ0cmVlQ2FsbGJhY2siLCJfb3B0aW9ucyRub2RlQ2FsbGJhY2siLCJub2RlQ2FsbGJhY2siLCJfb3B0aW9ucyRwc2V1ZG9FbGVtZW4iLCJwc2V1ZG9FbGVtZW50c0NhbGxiYWNrIiwiX29wdGlvbnMkb2JzZXJ2ZU11dGF0Iiwib2JzZXJ2ZU11dGF0aW9uc1Jvb3QiLCJvYmplY3RzIiwiZGVmYXVsdFByZWZpeCIsIm11dGF0aW9uUmVjb3JkIiwidHlwZSIsImFkZGVkTm9kZXMiLCJfZ2V0Q2Fub25pY2FsSWNvbiIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJzdWJ0cmVlIiwiZGlzY29ubmVjdCIsInN0eWxlUGFyc2VyIiwiY2xhc3NQYXJzZXIiLCJleGlzdGluZ1ByZWZpeCIsImV4aXN0aW5nSWNvbk5hbWUiLCJpbm5lclRleHQiLCJmaXJzdENoaWxkIiwibm9kZVR5cGUiLCJOb2RlIiwiVEVYVF9OT0RFIiwiZGF0YSIsImF0dHJpYnV0ZXNQYXJzZXIiLCJleHRyYUF0dHJpYnV0ZXMiLCJibGFua01ldGEiLCJwYXJzZU1ldGEiLCJwYXJzZXIiLCJfY2xhc3NQYXJzZXIiLCJleHRyYUNsYXNzZXMiLCJwbHVnaW5NZXRhIiwiZXh0cmFTdHlsZXMiLCJzdHlsZXMkMiIsImdlbmVyYXRlTXV0YXRpb24iLCJub2RlTWV0YSIsImtub3duUHJlZml4ZXMiLCJvblRyZWUiLCJyb290IiwiaHRtbENsYXNzTGlzdCIsImhjbEFkZCIsInN1ZmZpeCIsImhjbFJlbW92ZSIsImYiLCJwcmVmaXhlc0RvbVF1ZXJ5IiwiY2FuZGlkYXRlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJhbGwiLCJ0aGVuIiwicmVzb2x2ZWRNdXRhdGlvbnMiLCJjYXRjaCIsIm9uTm9kZSIsInJlc29sdmVJY29ucyIsIm1heWJlSWNvbkRlZmluaXRpb24iLCJpY29uRGVmaW5pdGlvbiIsInJlbmRlciIsIl9wYXJhbXMkdHJhbnNmb3JtIiwiX3BhcmFtcyRzeW1ib2wiLCJfcGFyYW1zJG1hc2siLCJfcGFyYW1zJG1hc2tJZCIsIl9wYXJhbXMkdGl0bGUiLCJfcGFyYW1zJHRpdGxlSWQiLCJfcGFyYW1zJGNsYXNzZXMiLCJfcGFyYW1zJGF0dHJpYnV0ZXMiLCJfcGFyYW1zJHN0eWxlcyIsIlJlcGxhY2VFbGVtZW50cyIsIm11dGF0aW9uT2JzZXJ2ZXJDYWxsYmFja3MiLCJwcm92aWRlcnMkJDEiLCJfcGFyYW1zJG5vZGUiLCJfcGFyYW1zJGNhbGxiYWNrIiwiZ2VuZXJhdGVTdmdSZXBsYWNlbWVudE11dGF0aW9uIiwiZ2VuZXJhdGVBYnN0cmFjdEljb24iLCJfcmVmMyIsIm5leHRDaGlsZCIsIkxheWVycyIsImxheWVyIiwiYXNzZW1ibGVyIiwiTGF5ZXJzQ291bnRlciIsIkxheWVyc1RleHQiLCJ0ZXh0IiwiZ2VuZXJhdGVMYXllcnNUZXh0IiwiY29tcHV0ZWRGb250U2l6ZSIsInBhcnNlSW50IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImZvbnRTaXplIiwiYm91bmRpbmdDbGllbnRSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiQ0xFQU5fQ09OVEVOVF9QQVRURVJOIiwiU0VDT05EQVJZX1VOSUNPREVfUkFOR0UiLCJoZXhWYWx1ZUZyb21Db250ZW50IiwiY2xlYW5lZCIsImNvZGVQb2ludCIsImlzUHJlcGVuZFRlbiIsImlzRG91YmxlZCIsImlzU2Vjb25kYXJ5IiwicmVwbGFjZUZvclBvc2l0aW9uIiwicG9zaXRpb24iLCJwZW5kaW5nQXR0cmlidXRlIiwiYWxyZWFkeVByb2Nlc3NlZFBzZXVkb0VsZW1lbnQiLCJmb250RmFtaWx5IiwiZ2V0UHJvcGVydHlWYWx1ZSIsImZvbnRXZWlnaHQiLCJyZW1vdmVDaGlsZCIsIl9jb250ZW50IiwidG9Mb3dlckNhc2UiLCJfaGV4VmFsdWVGcm9tQ29udGVudCIsImhleFZhbHVlIiwiaXNWNCIsInN0YXJ0c1dpdGgiLCJpY29uSWRlbnRpZmllciIsImljb25OYW1lNCIsIm1ldGEiLCJwcm9jZXNzYWJsZSIsIm9wZXJhdGlvbnMiLCJQc2V1ZG9FbGVtZW50cyIsInBzZXVkb0VsZW1lbnRzMnN2ZyIsIl91bndhdGNoZWQiLCJNdXRhdGlvbk9ic2VydmVyJDEiLCJ1bndhdGNoIiwiYm9vdHN0cmFwIiwicGFyc2VUcmFuc2Zvcm1TdHJpbmciLCJ0cmFuc2Zvcm1TdHJpbmciLCJwYXJzZUZsb2F0IiwiaXNOYU4iLCJQb3dlclRyYW5zZm9ybXMiLCJwYXJzZU5vZGVBdHRyaWJ1dGVzIiwiZ2VuZXJhdGVBYnN0cmFjdFRyYW5zZm9ybUdyb3VwaW5nIiwiQUxMX1NQQUNFIiwiZmlsbEJsYWNrIiwiZm9yY2UiLCJkZUdyb3VwIiwiTWFza3MiLCJtYXNrRGF0YSIsImdlbmVyYXRlQWJzdHJhY3RNYXNrIiwiZXhwbGljaXRNYXNrSWQiLCJtYWluV2lkdGgiLCJtYWluUGF0aCIsIm1hc2tXaWR0aCIsIm1hc2tQYXRoIiwidHJhbnMiLCJtYXNrUmVjdCIsIm1hc2tJbm5lckdyb3VwQ2hpbGRyZW5NaXhpbiIsIm1hc2tJbm5lckdyb3VwIiwibWFza091dGVyR3JvdXAiLCJjbGlwSWQiLCJtYXNrVGFnIiwibWFza1VuaXRzIiwibWFza0NvbnRlbnRVbml0cyIsImRlZnMiLCJNaXNzaW5nSWNvbkluZGljYXRvciIsInJlZHVjZU1vdGlvbiIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwibWlzc2luZ0ljb25BYnN0cmFjdCIsImdDaGlsZHJlbiIsIkZJTEwiLCJBTklNQVRJT05fQkFTRSIsImF0dHJpYnV0ZVR5cGUiLCJyZXBlYXRDb3VudCIsImR1ciIsIk9QQUNJVFlfQU5JTUFURSIsImRvdCIsImN4IiwiY3kiLCJyIiwib3BhY2l0eSIsIlN2Z1N5bWJvbHMiLCJzeW1ib2xEYXRhIiwicGx1Z2lucyIsIm5vQXV0byQxIiwiY29uZmlnJDEiLCJsaWJyYXJ5JDEiLCJkb20kMSIsInBhcnNlJDEiLCJmaW5kSWNvbkRlZmluaXRpb24kMSIsInRvSHRtbCQxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fortawesome/fontawesome-svg-core/index.mjs\n");

/***/ })

};
;